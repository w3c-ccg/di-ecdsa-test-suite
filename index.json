{
  "matrices": [
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:31702180-8936-49c2-b1f5-5ca3ed73170e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:1da31cfc-4115-4b96-991f-579731928faa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:c9468654-a42d-4e75-9623-7f413cb42ca2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:f97bef7e-3040-49d3-b81b-586eada01981",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:c95922e2-47c0-4410-bed1-26ab9ff01daa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:ed0dd0a4-e704-4552-af94-e15bf90d0082",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:5b0db628-2874-4ea0-a353-bc2e61be1b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:fe1d4fd4-d5cb-40ea-a705-9ad98f487f32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:a1b515ed-4c2b-4457-b1ca-d488ba678a78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:8176e38d-aeb8-49d4-aafa-2db8ce2d1d32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:71c12a2c-4f82-44d5-975c-26d5d75e51fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:5bfc6540-ace2-4bc7-b35f-74f070e4c1da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:cf03bf1c-c80d-4409-8bd4-031a5aa516a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:863545eb-1dde-4863-98f8-33ddfc1d9383",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:914fed81-c1ce-4216-a96e-adfb468184a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 625,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 757,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YCNyxyXqWWVvFJlkahu1r",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:a5109ea3-78cf-48c1-a1bd-c99cc6e3844d"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:f01c55a7-11b1-424e-9b5c-17fe857fa334",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:6c2b9afd-4051-45ba-a2fc-2e7c543f00ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:fa56fbd3-9b86-4a13-ba75-bdf06203851a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:78783eff-c834-4009-b574-326bc04f0bbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:e5f1b37f-0137-4a64-96df-abb538ef3043",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:8608aa36-7731-4f84-ae00-81bc41cf6a0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:b3771a57-630f-4dcb-b72e-73db949b6c83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:1664bc47-9e38-4b2b-bea7-59bcfcaf7f15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:cc8023f4-e81c-4d1b-add5-4ca8000785f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:9ff77744-640a-4b33-87c9-06c701ff5174",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:f40104f9-04e3-4ef1-8941-f372f5ba3a31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:cf36525d-d8f9-4733-b481-18b35091df39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:9457a5d6-b3f4-4356-9273-6c392690a7b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:e7cb08c5-8a75-4973-b21f-226636daf408",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:5d3edf5e-19be-494e-8df7-54c3a0275e4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YCNyxyXqWWVvFJlkahu1r",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:00329017-f52c-49aa-a9f1-a77b5b2bec23"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:62606244-0003-4787-a302-96422c4a7623",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:66beabf3-8a14-4ad4-a3b4-660bbb566150",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:a0cc1850-fe44-44b0-b6ff-b7d3554ce462",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:cb5a8a07-6f4a-4a22-8d54-07e2b1880ff7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:db70cc6a-126f-42b1-a723-8b86a7907d47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:d3f75bfa-6f96-4cde-b837-ea3d9c5eb576",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:43080218-e2c8-48bb-aab7-b7dd6b989bc7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:1595435a-d760-4486-8025-44eb6e0e4bd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:fbf0f5e6-1c67-41ff-910d-7d8f15e9bfaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:f1ad12a8-c9ce-4197-aa86-4ff4297551da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:694a0222-5b78-4bc2-980c-8d697912120b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:b61eb5b8-00d3-4330-838d-09932548059a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:e07c561e-4ba6-48b5-ba05-8ae17e702cf8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:a05660bf-7d81-4d1b-b97c-c72d6ff6cbda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:94813b15-f0e0-44f9-8eba-97dd7b4e21c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 604,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YCNyxyXqWWVvFJlkahu1r",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:c7340c0b-6b03-451a-9fc4-ac0647085342"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:716a991c-0be4-49e1-96d6-9f4759c152a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:16f215e6-345b-42e3-b74e-5a2b389f7722",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:95a3351e-41e4-4bf3-a89a-752f79340400",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:b20978c8-b79c-4928-b14f-a05db7e68c0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:44afa785-15c9-4090-a379-279c34b84870",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:352e3d35-1464-4b5e-b959-eec1436a175a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:90666691-ab4c-4522-9fa5-ba58ac76a389",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:881cc803-f1b8-4d67-b7a3-972d8b84a140",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:ff2515eb-a86e-45f6-aaaf-c6163e42d521",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:c5f8ccc6-e2ea-48d8-ac07-5f3e9eda6428",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:0b3dbfc4-d075-4fb2-84ca-ea3ab0797852",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:d413e23f-97de-48de-bfda-1bff29babe99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:c2a6a0af-9a1f-4db0-8e49-abbc68eec10b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:309aecc8-2f1b-4942-973c-7472a6a768ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:f9bdc657-849f-4432-b505-ac4b6b79ae8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YCNyxyXqWWVvFJlkahu1r",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:f381eed9-5612-4fc5-aaff-26e8a9e5a756"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:a53ebbff-a9e1-41e6-8070-f14bfccdb4a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:b9a49180-fef5-4358-8744-def1e14c2bb2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:e989f06a-f828-46bf-a34a-fbf6fb5d05ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:2e0caf2a-0644-4b4a-907a-36b369af713c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:147:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:8a708349-72bc-4ffa-81e4-a3de1acb7447",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:b51e6056-8375-44a4-b153-b9830ff97f98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:f3f5f7ab-c5f7-4ab3-b6da-544e72b7e160",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:2e544b0e-5e40-4d8b-8670-fc086c44af9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:1e498bac-eb71-4722-9fda-caaa60ce9e62",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:53cc7c5c-3491-4684-9861-5c48860d2612",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:009e1ab8-04e7-4627-8e6b-4686d10605ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:4822db04-a757-4a49-b34a-e584e1b9eb96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:27adb115-cdf3-4663-aeb2-b76427160b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:9bda9e9a-db79-4956-853b-7ea28beeeb5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:15c9ae88-4800-4347-826a-c533faa2826d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YCNyxyXqWWVvFJlkahu1r",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:361f09ad-91da-4bd9-8064-52f939c20df6"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:87b1622c-e14a-4d3d-a57c-bf0d14e8f140",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:8aad6e8a-d661-43c9-8c23-9de7e768ebe2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:92a6a007-4c99-4c84-85a2-ac86883beb3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:681ca7ad-a833-448d-8958-be6736ae75c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:6f5595ce-a2f9-4c04-9377-311d6b0e0664",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:283d16ec-3ede-46fb-8217-4b787d1418e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:53f4bf1e-71e8-4a25-bfe1-66e58381b538",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:b344e8e6-f453-4b74-8fc9-bbafeed53f8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:2bec3b90-4786-44d3-a916-68609521a4a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:20c173a2-6a50-41c3-a9b6-6b24978d24d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:c93b5016-9cd7-4524-b1b5-e9cd9960c0e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:f84f3051-1d7b-47cc-91ca-c0f2fbbcf6a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:a0626195-ae43-4584-86c8-58407590a47d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:bf526357-d5bf-4ed4-b704-7a9d770032ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:fd35a701-9e96-45a7-b282-8a158adbbfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 506,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YCNyxyXqWWVvFJlkahu1r",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:d0728b28-da41-4f37-acef-9f387b5a762c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:9ad1bf1c-3d28-436d-8859-4f85ecbcac0c",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:31702180-8936-49c2-b1f5-5ca3ed73170e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:f01c55a7-11b1-424e-9b5c-17fe857fa334",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:62606244-0003-4787-a302-96422c4a7623",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:716a991c-0be4-49e1-96d6-9f4759c152a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:a53ebbff-a9e1-41e6-8070-f14bfccdb4a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:87b1622c-e14a-4d3d-a57c-bf0d14e8f140",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:1da31cfc-4115-4b96-991f-579731928faa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:6c2b9afd-4051-45ba-a2fc-2e7c543f00ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:66beabf3-8a14-4ad4-a3b4-660bbb566150",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:16f215e6-345b-42e3-b74e-5a2b389f7722",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:b9a49180-fef5-4358-8744-def1e14c2bb2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:8aad6e8a-d661-43c9-8c23-9de7e768ebe2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:c9468654-a42d-4e75-9623-7f413cb42ca2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:fa56fbd3-9b86-4a13-ba75-bdf06203851a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:a0cc1850-fe44-44b0-b6ff-b7d3554ce462",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:95a3351e-41e4-4bf3-a89a-752f79340400",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:e989f06a-f828-46bf-a34a-fbf6fb5d05ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:92a6a007-4c99-4c84-85a2-ac86883beb3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:f97bef7e-3040-49d3-b81b-586eada01981",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:78783eff-c834-4009-b574-326bc04f0bbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:cb5a8a07-6f4a-4a22-8d54-07e2b1880ff7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:b20978c8-b79c-4928-b14f-a05db7e68c0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:2e0caf2a-0644-4b4a-907a-36b369af713c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:147:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:681ca7ad-a833-448d-8958-be6736ae75c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:c95922e2-47c0-4410-bed1-26ab9ff01daa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:e5f1b37f-0137-4a64-96df-abb538ef3043",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:db70cc6a-126f-42b1-a723-8b86a7907d47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:44afa785-15c9-4090-a379-279c34b84870",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:8a708349-72bc-4ffa-81e4-a3de1acb7447",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:6f5595ce-a2f9-4c04-9377-311d6b0e0664",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:ed0dd0a4-e704-4552-af94-e15bf90d0082",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:8608aa36-7731-4f84-ae00-81bc41cf6a0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:d3f75bfa-6f96-4cde-b837-ea3d9c5eb576",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:352e3d35-1464-4b5e-b959-eec1436a175a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:b51e6056-8375-44a4-b153-b9830ff97f98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:283d16ec-3ede-46fb-8217-4b787d1418e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:5b0db628-2874-4ea0-a353-bc2e61be1b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:b3771a57-630f-4dcb-b72e-73db949b6c83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:43080218-e2c8-48bb-aab7-b7dd6b989bc7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:90666691-ab4c-4522-9fa5-ba58ac76a389",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:f3f5f7ab-c5f7-4ab3-b6da-544e72b7e160",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:53f4bf1e-71e8-4a25-bfe1-66e58381b538",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:fe1d4fd4-d5cb-40ea-a705-9ad98f487f32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:1664bc47-9e38-4b2b-bea7-59bcfcaf7f15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:1595435a-d760-4486-8025-44eb6e0e4bd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:881cc803-f1b8-4d67-b7a3-972d8b84a140",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:2e544b0e-5e40-4d8b-8670-fc086c44af9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:b344e8e6-f453-4b74-8fc9-bbafeed53f8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:a1b515ed-4c2b-4457-b1ca-d488ba678a78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:cc8023f4-e81c-4d1b-add5-4ca8000785f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:fbf0f5e6-1c67-41ff-910d-7d8f15e9bfaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:ff2515eb-a86e-45f6-aaaf-c6163e42d521",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:1e498bac-eb71-4722-9fda-caaa60ce9e62",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:2bec3b90-4786-44d3-a916-68609521a4a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:8176e38d-aeb8-49d4-aafa-2db8ce2d1d32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:9ff77744-640a-4b33-87c9-06c701ff5174",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:f1ad12a8-c9ce-4197-aa86-4ff4297551da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:c5f8ccc6-e2ea-48d8-ac07-5f3e9eda6428",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:53cc7c5c-3491-4684-9861-5c48860d2612",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:20c173a2-6a50-41c3-a9b6-6b24978d24d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:71c12a2c-4f82-44d5-975c-26d5d75e51fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:f40104f9-04e3-4ef1-8941-f372f5ba3a31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:694a0222-5b78-4bc2-980c-8d697912120b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:0b3dbfc4-d075-4fb2-84ca-ea3ab0797852",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:009e1ab8-04e7-4627-8e6b-4686d10605ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:c93b5016-9cd7-4524-b1b5-e9cd9960c0e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:5bfc6540-ace2-4bc7-b35f-74f070e4c1da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:cf36525d-d8f9-4733-b481-18b35091df39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:b61eb5b8-00d3-4330-838d-09932548059a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:d413e23f-97de-48de-bfda-1bff29babe99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:4822db04-a757-4a49-b34a-e584e1b9eb96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:f84f3051-1d7b-47cc-91ca-c0f2fbbcf6a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:cf03bf1c-c80d-4409-8bd4-031a5aa516a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:9457a5d6-b3f4-4356-9273-6c392690a7b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:e07c561e-4ba6-48b5-ba05-8ae17e702cf8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:c2a6a0af-9a1f-4db0-8e49-abbc68eec10b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:27adb115-cdf3-4663-aeb2-b76427160b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:a0626195-ae43-4584-86c8-58407590a47d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:863545eb-1dde-4863-98f8-33ddfc1d9383",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:e7cb08c5-8a75-4973-b21f-226636daf408",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:a05660bf-7d81-4d1b-b97c-c72d6ff6cbda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:309aecc8-2f1b-4942-973c-7472a6a768ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:9bda9e9a-db79-4956-853b-7ea28beeeb5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:bf526357-d5bf-4ed4-b704-7a9d770032ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "2rgd5CzEIs0_mH0dkgwN3",
              "ctx": null,
              "_testId": "urn:uuid:914fed81-c1ce-4216-a96e-adfb468184a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zR5cqSu-hxkAb_OMG87sY",
              "ctx": null,
              "_testId": "urn:uuid:5d3edf5e-19be-494e-8df7-54c3a0275e4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "eRzVMtlqkwuPSdKmbTA6C",
              "ctx": null,
              "_testId": "urn:uuid:94813b15-f0e0-44f9-8eba-97dd7b4e21c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "F19XQzq9g-CS73tGMxhX5",
              "ctx": null,
              "_testId": "urn:uuid:f9bdc657-849f-4432-b505-ac4b6b79ae8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "skgfBsylUcB2POzNLzUP0",
              "ctx": null,
              "_testId": "urn:uuid:15c9ae88-4800-4347-826a-c533faa2826d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "0qXnHA1AY0KJzaoEhmerX",
              "ctx": null,
              "_testId": "urn:uuid:fd35a701-9e96-45a7-b282-8a158adbbfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:25791f68-55c6-4c06-b27d-fff43ed2da21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:396d61dd-62d2-4e9c-b654-7319bd052a73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:81044aa2-e91c-462c-88c5-e3f1fd1562ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:98019ff5-0b18-44db-bc74-e1e839cd9d33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:b26c63d9-0178-422d-a195-b0c34c1a9576\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-05T05:05:57Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:05:57Z\",\"proofValue\":\"zczedkF9tGErZRhgsTnpx6gfXG1jAsk8mXgfrfgV3M5Ea9XN8pUJXkUcsaMPb9nvCPzWWsb7xaCHdvASuX4nyT9F\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:ddc39e9f-c6ea-4dfe-a9a8-3435ceb39cbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:dc3724aa-581d-40f1-aea2-0b61fe3626cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:a6739b94-f860-4e21-b362-74e45b18bb6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RroQ3vqeh8OYsYCGBsd04",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:60e69e9d-9df8-46fc-8825-1214f81415df"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:039d6616-80d6-48ec-b3e1-c9faca75d1b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:dcc3e7a1-0e8e-46f4-8a30-88508f5cf4e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:f317b143-61a9-4560-ba27-da2a6aea4958",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:6db5c802-a0bd-4691-b229-88e8b51a1ae1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Invalid signature."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:13538959-bfdf-4902-bc7d-cf60294919ed\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-05-05T05:05:57Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:05:57Z\",\"proofValue\":\"zJJMbLwPj6YAYHWVH7bDQ76umF9gKvwrYeC8CTfwE4pjN4wUexwbJgcbWPLnLY9zjb9iFRAR5XmPj34x6qpccyGMX7H1ob9hfrGShSC18oDPrFrHmfHoYS53HUaMv9HNypWX\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:2072a785-1053-40ba-b086-49644a53351b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:e5eeca7f-7a9c-488b-955d-8534ed18ea9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:8c89ba89-3878-4bb2-89d2-798a4e86dd40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 898,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RroQ3vqeh8OYsYCGBsd04",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:039d80fb-d97a-41da-b517-0ef4e383954f"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:256850e3-b749-4dea-98d7-0e36fd144376",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:a6d7d57b-d523-404b-95fc-8d17605dc380",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:02f9c05e-6f05-4141-b086-48646a1343b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:0c60ef21-1bc2-4993-b5b5-ea7a1d6ab384",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:c3e89e61-2d7e-488b-9fbd-d9dac8f6a56c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:599bee9d-0120-4618-b915-1423361023a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:f6559554-620d-468b-b3ff-9ea3841d102d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RroQ3vqeh8OYsYCGBsd04",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:11408e0d-2c61-4a05-b4e1-4314b0791b72"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:9f33e559-10e1-4ae4-83e4-4730729c6de5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:f95c6353-fba4-4e01-b559-8f9bc532698a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:4f60d776-407d-4376-8690-d4ada0fabb8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:f9df03d0-bb64-44e3-a716-618237121bcd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:9002bb09-a56a-42e7-baab-878e2522326a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:9cc5f276-484e-42eb-96ab-698b9c46f7ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:2319f571-035c-4c04-abc7-9c0dd5672cbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 434,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RroQ3vqeh8OYsYCGBsd04",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:2c4b334a-9a26-4e7a-a72e-f0a4b1c041b7"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:e53750d1-d4c4-4fb7-92b6-b0ad5525e003",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:cf898c89-8985-42ff-9236-295bdb627e44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]",
                "showDiff": true,
                "actual": "[\n  \"ecdsa-2019\"\n]",
                "expected": "[\n  \"ecdsa-rdfc-2019\"\n  \"ecdsa-jcs-2019\"\n]",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:104:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:5009fd1d-98af-48b1-b26b-0f053d0a3892",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:119:48)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:e8b3c7c3-572a-45ba-bf29-42ced009f18e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:ce8724d5-d2c7-4051-ba13-86eb0096839a\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-05T05:05:58Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5XTxGCRLeQKfLCgxD57uaoC2UG4rArWXGeaG4r9tS5PdPpyEVPwrKq22QepFGWrdqhdHbgf11sKpfwGYhDwEUKMh\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-05T05:05:58.872Z\",\"cryptosuite\":\"ecdsa-2019\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:be37d38c-66e5-43d7-a61d-c3c0d5a4b255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:3f5c60da-f539-4085-97fa-9c894a9abf09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:ed105ba8-30f9-4aba-a7c2-98e1eca2a086",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RroQ3vqeh8OYsYCGBsd04",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:d4261d40-20d9-4b2b-85a2-1b769184939d"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:53100878-e356-4504-93cc-3b1ff3633c3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:2aef03ca-6940-4cf2-8550-93a6f476e6a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:06deec15-469d-465c-9793-61316f11da1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:082592a5-4519-4bb9-a6fc-8da22a26096e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:c2188f4d-b68a-4f3f-bdb4-4cf3c3c99f2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:05079a93-a561-4aa3-8471-f3210a94893c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:e742f727-eb21-485d-bbaf-7c3fca89ac29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RroQ3vqeh8OYsYCGBsd04",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:994b858f-7b67-485c-b12d-76cbbe693af3"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "AWcw2YB3D17h-0jCEzrz7",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:84801568-5077-4de5-8cee-8aba04b6b29f",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "The (proof) type property MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:25791f68-55c6-4c06-b27d-fff43ed2da21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:039d6616-80d6-48ec-b3e1-c9faca75d1b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:256850e3-b749-4dea-98d7-0e36fd144376",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:9f33e559-10e1-4ae4-83e4-4730729c6de5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:e53750d1-d4c4-4fb7-92b6-b0ad5525e003",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:53100878-e356-4504-93cc-3b1ff3633c3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:396d61dd-62d2-4e9c-b654-7319bd052a73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:dcc3e7a1-0e8e-46f4-8a30-88508f5cf4e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:a6d7d57b-d523-404b-95fc-8d17605dc380",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:f95c6353-fba4-4e01-b559-8f9bc532698a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:cf898c89-8985-42ff-9236-295bdb627e44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]",
                "showDiff": true,
                "actual": "[\n  \"ecdsa-2019\"\n]",
                "expected": "[\n  \"ecdsa-rdfc-2019\"\n  \"ecdsa-jcs-2019\"\n]",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:104:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:2aef03ca-6940-4cf2-8550-93a6f476e6a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:81044aa2-e91c-462c-88c5-e3f1fd1562ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:f317b143-61a9-4560-ba27-da2a6aea4958",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:02f9c05e-6f05-4141-b086-48646a1343b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:4f60d776-407d-4376-8690-d4ada0fabb8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:5009fd1d-98af-48b1-b26b-0f053d0a3892",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:119:48)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:06deec15-469d-465c-9793-61316f11da1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify with a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:98019ff5-0b18-44db-bc74-e1e839cd9d33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:b26c63d9-0178-422d-a195-b0c34c1a9576\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-05T05:05:57Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:05:57Z\",\"proofValue\":\"zczedkF9tGErZRhgsTnpx6gfXG1jAsk8mXgfrfgV3M5Ea9XN8pUJXkUcsaMPb9nvCPzWWsb7xaCHdvASuX4nyT9F\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:6db5c802-a0bd-4691-b229-88e8b51a1ae1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Invalid signature."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:13538959-bfdf-4902-bc7d-cf60294919ed\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-05-05T05:05:57Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:05:57Z\",\"proofValue\":\"zJJMbLwPj6YAYHWVH7bDQ76umF9gKvwrYeC8CTfwE4pjN4wUexwbJgcbWPLnLY9zjb9iFRAR5XmPj34x6qpccyGMX7H1ob9hfrGShSC18oDPrFrHmfHoYS53HUaMv9HNypWX\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:0c60ef21-1bc2-4993-b5b5-ea7a1d6ab384",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:f9df03d0-bb64-44e3-a716-618237121bcd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:e8b3c7c3-572a-45ba-bf29-42ced009f18e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:ce8724d5-d2c7-4051-ba13-86eb0096839a\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-05T05:05:58Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5XTxGCRLeQKfLCgxD57uaoC2UG4rArWXGeaG4r9tS5PdPpyEVPwrKq22QepFGWrdqhdHbgf11sKpfwGYhDwEUKMh\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-05T05:05:58.872Z\",\"cryptosuite\":\"ecdsa-2019\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:082592a5-4519-4bb9-a6fc-8da22a26096e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:ddc39e9f-c6ea-4dfe-a9a8-3435ceb39cbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:2072a785-1053-40ba-b086-49644a53351b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:c3e89e61-2d7e-488b-9fbd-d9dac8f6a56c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:9002bb09-a56a-42e7-baab-878e2522326a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:be37d38c-66e5-43d7-a61d-c3c0d5a4b255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:c2188f4d-b68a-4f3f-bdb4-4cf3c3c99f2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:dc3724aa-581d-40f1-aea2-0b61fe3626cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:e5eeca7f-7a9c-488b-955d-8534ed18ea9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:599bee9d-0120-4618-b915-1423361023a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:9cc5f276-484e-42eb-96ab-698b9c46f7ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:3f5c60da-f539-4085-97fa-9c894a9abf09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:05079a93-a561-4aa3-8471-f3210a94893c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qXrx_RoBqMtOacinrPgF-",
              "ctx": null,
              "_testId": "urn:uuid:a6739b94-f860-4e21-b362-74e45b18bb6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "62lXrfyS_mghcfNOcPbhp",
              "ctx": null,
              "_testId": "urn:uuid:8c89ba89-3878-4bb2-89d2-798a4e86dd40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "UQRsqayPzkpTVJt_kKmrB",
              "ctx": null,
              "_testId": "urn:uuid:f6559554-620d-468b-b3ff-9ea3841d102d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1qmxzeeaChvqkruXQDb4A",
              "ctx": null,
              "_testId": "urn:uuid:2319f571-035c-4c04-abc7-9c0dd5672cbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "OyWcd_evtfgzjzzz8Vc2R",
              "ctx": null,
              "_testId": "urn:uuid:ed105ba8-30f9-4aba-a7c2-98e1eca2a086",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qgTibZuI_GE5eMXMHHzw8",
              "ctx": null,
              "_testId": "urn:uuid:e742f727-eb21-485d-bbaf-7c3fca89ac29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers) VC 2.0",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "AWcw2YB3D17h-0jCEzrz7",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "columns": [],
      "rows": []
    },
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:db143a2a-e9fd-4068-a697-b51184e3def9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:cda03993-88a9-4240-84ac-2f91ad92faaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4598,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:bb399524-6671-429c-b321-db4c1465d7b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:b5fd35eb-e4fb-4b6c-a753-161471fd99bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4739,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:06e17654-4d36-4680-b569-1e29d7409e8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:48253886-66a9-4602-aed2-cfda588ac652",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:4e424d53-efda-427f-ab61-8c5058cac645",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:a7481d91-0174-4d4a-ae6e-bddea826f6f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:3682fd49-0d1c-4bff-a8ba-d9b0e9c1c6ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5079,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:d7a9858c-d351-433a-bc53-4966e534b494",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:4a5ab402-ffa2-448e-b12b-7feaf1d5352c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:68c3cc74-2d6d-43c0-9b81-291d474c8567",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:7f948241-6584-4ea9-858a-34da8ca20619",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:8c475536-a7ad-4e22-99e4-170208aef671",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:03e781fa-ba03-4d95-884d-577efbd6de95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKuAxL3GNYfflQ8B37PIC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:5bbf0c0f-e375-4bcb-a00e-24c97eac19cf"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:9abd234b-e7be-45ed-9503-69b61b2abeab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:34a57da6-0265-4385-be00-bb3d42852ad6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:932ef1dd-db97-46bf-8833-7de0232b0cb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5758,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:bbd65867-2ae6-4f3c-b383-f7eb8116c49e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:9ee38c86-b900-4cb6-a061-fed87c71b372",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:ddf34b8d-7e2f-4e4f-936c-ae6109481995",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:b2c89804-3bc0-4a4c-a8fd-c0ead738f7b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:e7c71967-511d-46d1-8503-b0adf8540847",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:eb601b36-b43e-4b54-9e08-2d9d541d2d34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:58fa74de-af75-419c-8eed-27ba41b3cc91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:4f6b9013-8a13-4655-be21-8ea62f4ac0fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:ba8ea15a-4bb1-42a7-b3c2-296010c1061f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:220d95e7-7be4-4b00-ab09-9942f1248582",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6229,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:c0d71589-4f5c-458e-b3e1-40d342717ac4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:a7a461fd-c660-4cf5-9766-ba06fc0735b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKuAxL3GNYfflQ8B37PIC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:7f5b34b4-b2c6-4745-a77c-311877110d66"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:74505406-b7c1-4974-a4a9-13776bff202c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:8f1ac8c4-acd3-47e5-9183-4d8e5e914d6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:8372846e-f883-4592-b726-eae13760eed9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:bf3a71b4-bafc-4729-9421-85e5f1a20a71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:0c6f8c40-973f-4262-a1ad-8c4e9cc9ab51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:e7842145-38bf-44e3-b30d-f74f94ff8d16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6499,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:e8c6cca2-8c20-491b-9d87-dd4d27b2e232",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:4d552698-dfac-4c0f-80ef-d909a0579fc3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:3ffcdf41-db6d-4083-962f-8b9a9c59c992",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:13ef854b-a6cd-4d8b-b8b9-213665d80c8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:084fe3e7-8f94-41e3-ba5c-b5b0c92ff9a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:83a290eb-bd0e-4861-8455-1695ef83a5ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6642,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:a9631ef4-392f-4ff4-842b-66348ea65d99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6675,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:b6e14b6e-28fd-43c9-b2e1-adb68d36910d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6715,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:8af98775-51a4-4371-aa57-b2e4bfca4611",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKuAxL3GNYfflQ8B37PIC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:0910410f-fa87-40de-b647-bb8d3b90a0e1"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:69b7b649-af98-49f4-ae8f-37d05019dc8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:fc0a044c-6a8d-400a-b463-6dc7fe837cd2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:4e7ce628-dc86-45a8-a09d-a38d1f51e9e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6956,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:d40f1fda-c1f1-4ab6-92d2-a27f0d76b451",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:87b92d50-e8c9-4565-84a0-6e2a74b7447c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7150,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:42de2550-66e1-4627-80e5-d01eebe25917",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:c1cd1f5d-f1ee-4474-a211-1442938c1113",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7344,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:31613ba9-55e2-4da9-af0e-77350bec8e69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:bddf4be1-35ef-403b-8698-d1fbb4e7d1a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:700891fc-5a05-48ed-a74d-8862b2978ba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:388fb857-f2e6-4eca-85b9-eb896aad10a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:bad09d83-a968-4fc3-a1fa-2c643625924f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:ccb5a52a-2efd-4707-9e4c-cab49af2bd1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:4f727451-dbd8-45fb-836d-564171686b95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:8307f745-1d5f-4d66-808f-0415416cac8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8115,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKuAxL3GNYfflQ8B37PIC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:b2a00aa1-6bea-455e-83d2-3a62fd4fa090"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:0bcb82c7-4b38-47b0-98fb-4dc27cbbcf47",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:db143a2a-e9fd-4068-a697-b51184e3def9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:9abd234b-e7be-45ed-9503-69b61b2abeab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:74505406-b7c1-4974-a4a9-13776bff202c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:69b7b649-af98-49f4-ae8f-37d05019dc8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:cda03993-88a9-4240-84ac-2f91ad92faaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4598,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:34a57da6-0265-4385-be00-bb3d42852ad6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:8f1ac8c4-acd3-47e5-9183-4d8e5e914d6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:fc0a044c-6a8d-400a-b463-6dc7fe837cd2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:bb399524-6671-429c-b321-db4c1465d7b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:932ef1dd-db97-46bf-8833-7de0232b0cb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5758,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:8372846e-f883-4592-b726-eae13760eed9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:4e7ce628-dc86-45a8-a09d-a38d1f51e9e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6956,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:b5fd35eb-e4fb-4b6c-a753-161471fd99bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4739,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:bbd65867-2ae6-4f3c-b383-f7eb8116c49e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:bf3a71b4-bafc-4729-9421-85e5f1a20a71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:d40f1fda-c1f1-4ab6-92d2-a27f0d76b451",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:06e17654-4d36-4680-b569-1e29d7409e8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:9ee38c86-b900-4cb6-a061-fed87c71b372",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:0c6f8c40-973f-4262-a1ad-8c4e9cc9ab51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:87b92d50-e8c9-4565-84a0-6e2a74b7447c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7150,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:48253886-66a9-4602-aed2-cfda588ac652",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:ddf34b8d-7e2f-4e4f-936c-ae6109481995",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:e7842145-38bf-44e3-b30d-f74f94ff8d16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6499,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:42de2550-66e1-4627-80e5-d01eebe25917",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:4e424d53-efda-427f-ab61-8c5058cac645",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:b2c89804-3bc0-4a4c-a8fd-c0ead738f7b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:e8c6cca2-8c20-491b-9d87-dd4d27b2e232",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:c1cd1f5d-f1ee-4474-a211-1442938c1113",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7344,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:a7481d91-0174-4d4a-ae6e-bddea826f6f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:e7c71967-511d-46d1-8503-b0adf8540847",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:4d552698-dfac-4c0f-80ef-d909a0579fc3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:31613ba9-55e2-4da9-af0e-77350bec8e69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:3682fd49-0d1c-4bff-a8ba-d9b0e9c1c6ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5079,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:eb601b36-b43e-4b54-9e08-2d9d541d2d34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:3ffcdf41-db6d-4083-962f-8b9a9c59c992",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:bddf4be1-35ef-403b-8698-d1fbb4e7d1a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:d7a9858c-d351-433a-bc53-4966e534b494",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:58fa74de-af75-419c-8eed-27ba41b3cc91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:13ef854b-a6cd-4d8b-b8b9-213665d80c8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:700891fc-5a05-48ed-a74d-8862b2978ba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:4a5ab402-ffa2-448e-b12b-7feaf1d5352c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:4f6b9013-8a13-4655-be21-8ea62f4ac0fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:084fe3e7-8f94-41e3-ba5c-b5b0c92ff9a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:388fb857-f2e6-4eca-85b9-eb896aad10a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:68c3cc74-2d6d-43c0-9b81-291d474c8567",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:ba8ea15a-4bb1-42a7-b3c2-296010c1061f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:83a290eb-bd0e-4861-8455-1695ef83a5ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6642,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:bad09d83-a968-4fc3-a1fa-2c643625924f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:7f948241-6584-4ea9-858a-34da8ca20619",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:220d95e7-7be4-4b00-ab09-9942f1248582",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6229,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:a9631ef4-392f-4ff4-842b-66348ea65d99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6675,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:ccb5a52a-2efd-4707-9e4c-cab49af2bd1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:8c475536-a7ad-4e22-99e4-170208aef671",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:c0d71589-4f5c-458e-b3e1-40d342717ac4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:b6e14b6e-28fd-43c9-b2e1-adb68d36910d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6715,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:4f727451-dbd8-45fb-836d-564171686b95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "tRX3T6ykKofXgTEuAWGv_",
              "ctx": null,
              "_testId": "urn:uuid:03e781fa-ba03-4d95-884d-577efbd6de95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "n50DbXHoie2hJQ_yASEbB",
              "ctx": null,
              "_testId": "urn:uuid:a7a461fd-c660-4cf5-9766-ba06fc0735b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "9wayRQ7UOJ0CXbBclJXxU",
              "ctx": null,
              "_testId": "urn:uuid:8af98775-51a4-4371-aa57-b2e4bfca4611",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "7l5Jivyc5WcudVcrMQwao",
              "ctx": null,
              "_testId": "urn:uuid:8307f745-1d5f-4d66-808f-0415416cac8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8115,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8212,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 65,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8277,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 212,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8489,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 198,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8687,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 100,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8787,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 192,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8979,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 214,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9193,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 450,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9643,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 85,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9728,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 89,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9817,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 95,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9911,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 99,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10010,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 319,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10330,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 28,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10357,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 78,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10436,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 35,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10471,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 31,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10502,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 110,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10612,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 112,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10724,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 110,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "f9oe12fyQYMCkJb-mKOMj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10834,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 113,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:ab866ad3-0d36-4f97-a707-08a65020c7b9",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:20129d2b-9337-4d9a-8abf-805059dffe83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1635,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:7cd7554d-e4f5-49f0-9552-58335a133b98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:9e752ca6-84a1-46aa-8310-f8ec7b4125e8",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256",
                        "issuanceDate": "2024-05-05T05:06:02Z",
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:02Z",
                          "proofValue": "z4jDz7NbtUN9JN44FN2wxSnKGkhRztRaN7AFuurpY84tHhsfhktnPqLHcvyB53F2UpiH72djmV9qBqYCpHeVA56AR"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:9e752ca6-84a1-46aa-8310-f8ec7b4125e8\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-05T05:06:02Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:06:02Z\",\"proofValue\":\"z4jDz7NbtUN9JN44FN2wxSnKGkhRztRaN7AFuurpY84tHhsfhktnPqLHcvyB53F2UpiH72djmV9qBqYCpHeVA56AR\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/data-integrity/v2",
                            "https://w3id.org/security/multikey/v1"
                          ],
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:02Z",
                          "proofValue": "z4jDz7NbtUN9JN44FN2wxSnKGkhRztRaN7AFuurpY84tHhsfhktnPqLHcvyB53F2UpiH72djmV9qBqYCpHeVA56AR"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/multikey/v1",
                          "id": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "Multikey",
                          "controller": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "publicKeyMultibase": "zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:9e752ca6-84a1-46aa-8310-f8ec7b4125e8",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:bdd4da2f-ea68-4347-aea1-f9bb2ed04881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:7aa9164d-7a8e-4b37-9747-822cea87fbf3\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-05T05:06:02Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:06:03Z\",\"proofValue\":\"z5caCNJJE4oiFC4B6MuRwh1szFkP5QEHtiUgo4ufAwSHMfjhMcatnbQ8xQNC9S1T3U45MaD3niy5f3Emq8VNiiMZi\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:7aa9164d-7a8e-4b37-9747-822cea87fbf3",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256",
                        "issuanceDate": "2024-05-05T05:06:02Z",
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:03Z",
                          "proofValue": "z5caCNJJE4oiFC4B6MuRwh1szFkP5QEHtiUgo4ufAwSHMfjhMcatnbQ8xQNC9S1T3U45MaD3niy5f3Emq8VNiiMZi"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:64bb8780-04e0-4862-8021-8869be247fe0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "apicatalog.com: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:7e063e01-73b5-41b0-8ba7-84cec2e582f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 546,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:a9f107b4-77e1-40b4-8f0d-6f85663c9003",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:358be9a0-2a22-4410-bba7-435fc725111c",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384",
                        "issuanceDate": "2024-05-05T05:06:03Z",
                        "proof": {
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:03Z",
                          "proofValue": "zpMEvMGzXSNMyzreG2txQtF8mDgjVLwL5uXQzSKH9FTfkVUjeFCgNZdRqUGcfFX8oovJ8t4nMLoEsdyLFcFUYJUXS6taYJ4jwohvA2mzxNNHn8izecRfzSqne8WCVbKkqRj1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:358be9a0-2a22-4410-bba7-435fc725111c\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-05-05T05:06:03Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:06:03Z\",\"proofValue\":\"zpMEvMGzXSNMyzreG2txQtF8mDgjVLwL5uXQzSKH9FTfkVUjeFCgNZdRqUGcfFX8oovJ8t4nMLoEsdyLFcFUYJUXS6taYJ4jwohvA2mzxNNHn8izecRfzSqne8WCVbKkqRj1\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/data-integrity/v2",
                            "https://w3id.org/security/multikey/v1"
                          ],
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:03Z",
                          "proofValue": "zpMEvMGzXSNMyzreG2txQtF8mDgjVLwL5uXQzSKH9FTfkVUjeFCgNZdRqUGcfFX8oovJ8t4nMLoEsdyLFcFUYJUXS6taYJ4jwohvA2mzxNNHn8izecRfzSqne8WCVbKkqRj1"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:291:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:358be9a0-2a22-4410-bba7-435fc725111c",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:1732e9c6-c09f-4465-943a-fdcbc04c118d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13445,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:c89e3726-46a8-459e-aca3-38d2338d7c92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:f1a9ed4a-acd5-4cc9-abda-a72c9a1bd037",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13758,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:bdfd70b4-8880-4e30-820a-3d558861b3f1\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ\",\"issuanceDate\":\"2024-05-05T05:06:04Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:04Z\",\"verificationMethod\":\"did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ#zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z23W3SgQwv2d1AZD7bd1jA6HmRyCWPQkDgBVWXhc9R93oAPh7BUPpUFnFWKJJgiJKaFUNVcuVDKXnEPbE8e5pdpKX\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:bdfd70b4-8880-4e30-820a-3d558861b3f1",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ",
                        "issuanceDate": "2024-05-05T05:06:04Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:04Z",
                          "verificationMethod": "did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ#zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z23W3SgQwv2d1AZD7bd1jA6HmRyCWPQkDgBVWXhc9R93oAPh7BUPpUFnFWKJJgiJKaFUNVcuVDKXnEPbE8e5pdpKX"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:105420af-e513-4dec-a078-35d5afbe2ed4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:58c9f280-0b36-462e-b6cb-5cd05c9ee605",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 392,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:a8d51add-0c6b-4b50-9ded-af9e537da9ed\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q\",\"issuanceDate\":\"2024-05-05T05:06:04Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:04Z\",\"verificationMethod\":\"did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q#z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zonA1vwtoMJ5iKhfY93rC1UZWUZy1oqMUujS2a4RimdVhxT94nBrEay8z6CX7P5U1JAciXSDvBNAoXY72fmvWyue7d88T4BGqHky4XgzBH92rxG9C95e94RqiHhKT9LZUkTe\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:a8d51add-0c6b-4b50-9ded-af9e537da9ed",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q",
                        "issuanceDate": "2024-05-05T05:06:04Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:04Z",
                          "verificationMethod": "did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q#z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zonA1vwtoMJ5iKhfY93rC1UZWUZy1oqMUujS2a4RimdVhxT94nBrEay8z6CX7P5U1JAciXSDvBNAoXY72fmvWyue7d88T4BGqHky4XgzBH92rxG9C95e94RqiHhKT9LZUkTe"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:1d65c69f-b251-4bea-8a25-7ee5153bc887",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "SpruceID: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:894f52c5-f8d4-4eec-8274-8649531aa0c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14344,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:dceda1f7-b499-4066-93fd-99a0ffa8d982\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-05T05:06:04Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5cwy8KNWQDicnC3d2oCAcvG7s7dguqtf1XtJNbGF8Y2qyYayhiiZgtL5px9kApTB7M4UpsBm7PbRAtj3P1cHheLC\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-05T05:06:04.844Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            },
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            }
                          }
                        ],
                        "id": "urn:uuid:dceda1f7-b499-4066-93fd-99a0ffa8d982",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-05-05T05:06:04Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5cwy8KNWQDicnC3d2oCAcvG7s7dguqtf1XtJNbGF8Y2qyYayhiiZgtL5px9kApTB7M4UpsBm7PbRAtj3P1cHheLC",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-05-05T05:06:04.844Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:d092ac9e-4d31-43a9-9d85-d5c1b8161144",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14403,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:da647093-3c4a-4c95-ab09-08daccec32e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:e79099f7-0e49-4d5b-9a40-bfd20124ae9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:23fa6623-96b4-470a-b3d2-e8077a849f94\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-05T05:06:04Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zRKJctVdtdAUNpMFiQACeKyVEPf8JtgZ2AqeDxAbWr1jNMAVc7XNDqcXYb7Q3fQJBGVTPMDipGRhL9eKxxcqh6fE\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-05T05:06:04.987Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:23fa6623-96b4-470a-b3d2-e8077a849f94",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-05-05T05:06:04Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zRKJctVdtdAUNpMFiQACeKyVEPf8JtgZ2AqeDxAbWr1jNMAVc7XNDqcXYb7Q3fQJBGVTPMDipGRhL9eKxxcqh6fE",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-05-05T05:06:04.987Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            }
          ]
        },
        {
          "id": "bovine: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:43916ad9-5d24-4457-9003-f47514b0e1dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:899ade58-0f2e-4b11-8263-d239020d4ebd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:c8cf3a56-56cd-4299-8631-bdfbf84dd805",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"},\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"id\":\"urn:uuid:655df11c-8778-419b-a10f-82700cde3147\",\"issuanceDate\":\"2024-05-05T05:06:05Z\",\"issuer\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\",\"proof\":{\"created\":\"2024-05-05T05:06:05Z\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3N3DgW7LTXFbVQYHDqqvbaM5DRAbePvwNeLYQGjFQTuWJHwoWotSBkD3VNDFfXgqYJhgrb646rgkFWATo91na7zL\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\"},\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:655df11c-8778-419b-a10f-82700cde3147",
                        "issuanceDate": "2024-05-05T05:06:05Z",
                        "issuer": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr",
                        "proof": {
                          "created": "2024-05-05T05:06:05Z",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3N3DgW7LTXFbVQYHDqqvbaM5DRAbePvwNeLYQGjFQTuWJHwoWotSBkD3VNDFfXgqYJhgrb646rgkFWATo91na7zL",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "f9oe12fyQYMCkJb-mKOMj",
              "ctx": null,
              "_testId": "urn:uuid:8d44674e-179c-4278-8370-fc60c3ae429f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:b48caa8f-5196-46ba-a0bf-6c6a67e6400d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:7b4f24ea-1134-4054-89c9-cc2f06ba3718",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:7f605bad-4cd4-4a0d-8773-d278a1ce8047",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:7a422875-05f1-4edf-a3df-5863aaf7e73e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:cf64f0ef-4bef-4deb-a253-f0877e65a8c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:575915c1-25bd-4dec-ab20-bb4e554cfe8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:880b5ee3-e58a-4fb5-be29-64e1962d11fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:fc1272dc-c9db-40dc-9091-1fbbc02759ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:3a58841b-6840-4b14-a3d6-28cb0edf2c93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:617bc65b-16ba-41fc-a930-affce7a60e3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:32c70a2b-fb22-4f15-a8c1-7dd3142fabab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:cc1f8ff6-46f6-45d1-9940-d01eee6df558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:6113f248-9544-46a5-9f7e-9cb712ffb8c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:538d42d6-9dcd-47b9-b406-080c4f5c3035",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:882010f7-7666-4ac3-95d6-640a318e6382",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15067,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 715,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iQP3MumsHuZiixPSiosux",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:fad687c4-40cc-41ed-a1ff-2658a953e175"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:8a8627a1-0a42-4ca0-8cbf-7f74b4d9da00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:c128099b-ce61-4337-99ec-9854a833d6e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:933c545c-dc79-4331-ac6f-eaa66776a7c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:8b40aac1-a48c-4d68-baf1-45404d144f7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:bb3d09f4-fa39-42f9-a04e-bd0cec620f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:c6f00b7a-a7af-47db-9ec4-e97f77362ca2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:942acd17-6b7e-4817-9a34-f1a20a23f910",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:719cfe70-6ef3-4e77-a6ad-844d0879549c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:7bca913d-e6d3-4561-8d6c-82c5e92d7d86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:902b8644-915d-436c-990f-39a7201224f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:5ea7cb3b-c7b8-4f81-94ba-5f731b73a1b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:b6bd6f10-862e-445f-af2b-a0d50fd04b1e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:eca3e982-8c41-4a8b-9393-13f47ce84918",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:6f858ee6-297c-4e88-baeb-11f923ead86b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:bd5bee6e-5849-49ba-96a2-407150053138",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iQP3MumsHuZiixPSiosux",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:37a85d36-5a7d-48d0-a9e7-94858ac8a33f"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:ea4f7f4d-ddf2-4947-b361-975c863e417a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:9e6451fe-3973-4c6b-9c60-12d8a9583f09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:89677be9-4244-490d-bb05-c4447ed15a8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:c68830f7-298d-46f7-9301-3b725a706373",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:3f543731-976f-405d-a8e5-fc473b26c92b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:2d7e9a1a-0ca0-469c-b89d-faddbdd07a01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:57b268a2-1ea5-4081-9d4b-1a4362f023cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:d2fd7ea3-8e15-4409-9eb3-2c5aa3c22b18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:67fd08e5-2eed-44b8-81b2-ead5b058862f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:bda5284a-1569-41cd-ae04-e8331d40b413",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:69f3d8ee-be13-440a-ad56-efedfac2bbe5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:f28ea0be-41d7-4e96-9371-24e8cbce3e6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:60435bef-a66a-4dad-8b3b-10df6f54794a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:ea341156-3a31-4995-8783-93151e64461d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:82c5960e-8389-42b4-bd17-b22fed2df191",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 358,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iQP3MumsHuZiixPSiosux",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:41f4cc8d-99a9-46ce-b6fb-753598c5d5d5"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:4daf58d2-1f8e-47a8-989e-c94fb88c29f3",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:b48caa8f-5196-46ba-a0bf-6c6a67e6400d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:8a8627a1-0a42-4ca0-8cbf-7f74b4d9da00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:ea4f7f4d-ddf2-4947-b361-975c863e417a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:7b4f24ea-1134-4054-89c9-cc2f06ba3718",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:c128099b-ce61-4337-99ec-9854a833d6e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:9e6451fe-3973-4c6b-9c60-12d8a9583f09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:7f605bad-4cd4-4a0d-8773-d278a1ce8047",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:933c545c-dc79-4331-ac6f-eaa66776a7c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:89677be9-4244-490d-bb05-c4447ed15a8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:7a422875-05f1-4edf-a3df-5863aaf7e73e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:8b40aac1-a48c-4d68-baf1-45404d144f7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:c68830f7-298d-46f7-9301-3b725a706373",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:cf64f0ef-4bef-4deb-a253-f0877e65a8c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:bb3d09f4-fa39-42f9-a04e-bd0cec620f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:3f543731-976f-405d-a8e5-fc473b26c92b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:575915c1-25bd-4dec-ab20-bb4e554cfe8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:c6f00b7a-a7af-47db-9ec4-e97f77362ca2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:2d7e9a1a-0ca0-469c-b89d-faddbdd07a01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:880b5ee3-e58a-4fb5-be29-64e1962d11fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:942acd17-6b7e-4817-9a34-f1a20a23f910",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:57b268a2-1ea5-4081-9d4b-1a4362f023cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:fc1272dc-c9db-40dc-9091-1fbbc02759ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:719cfe70-6ef3-4e77-a6ad-844d0879549c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:d2fd7ea3-8e15-4409-9eb3-2c5aa3c22b18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:3a58841b-6840-4b14-a3d6-28cb0edf2c93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:7bca913d-e6d3-4561-8d6c-82c5e92d7d86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:67fd08e5-2eed-44b8-81b2-ead5b058862f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:617bc65b-16ba-41fc-a930-affce7a60e3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:902b8644-915d-436c-990f-39a7201224f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:bda5284a-1569-41cd-ae04-e8331d40b413",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:32c70a2b-fb22-4f15-a8c1-7dd3142fabab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:5ea7cb3b-c7b8-4f81-94ba-5f731b73a1b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:69f3d8ee-be13-440a-ad56-efedfac2bbe5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:cc1f8ff6-46f6-45d1-9940-d01eee6df558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:b6bd6f10-862e-445f-af2b-a0d50fd04b1e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:f28ea0be-41d7-4e96-9371-24e8cbce3e6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:6113f248-9544-46a5-9f7e-9cb712ffb8c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:eca3e982-8c41-4a8b-9393-13f47ce84918",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:60435bef-a66a-4dad-8b3b-10df6f54794a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:538d42d6-9dcd-47b9-b406-080c4f5c3035",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:6f858ee6-297c-4e88-baeb-11f923ead86b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:ea341156-3a31-4995-8783-93151e64461d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "-XSeDjTskC1DEVGjF_kFh",
              "ctx": null,
              "_testId": "urn:uuid:882010f7-7666-4ac3-95d6-640a318e6382",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "hYLMldM5SXKmIlSQsGS0W",
              "ctx": null,
              "_testId": "urn:uuid:bd5bee6e-5849-49ba-96a2-407150053138",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "jKOGdf4fVuDJ8K2Z6CmIg",
              "ctx": null,
              "_testId": "urn:uuid:82c5960e-8389-42b4-bd17-b22fed2df191",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:405741a3-e0c0-4186-a596-70da75ef84ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:00fd26db-c1f0-4c13-99b3-a90e20a9617a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:c13d89e1-8e6b-4e92-9fd7-91dd7c5a89f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:c619e931-e909-4e57-88fb-3e6053fdf0d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:af3e858a-9744-4776-8284-ad0372776530\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"issuanceDate\":\"2024-05-05T05:06:10Z\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:06:10Z\",\"proofValue\":\"u2V0BhVhAs1OLNMIaVug0W5CABOqDx_X0_myvd6qoSJCk52yfBZXsMSiV3Xu2DJZiNDioUyMcg7Yax_XNaEvf2ciy9SNvm1gjgCQDjYAsQnlCXNCvKvMes7W-1kumSEbxgjgeBhfCpJpcUD6BWEBsTP166fnSdVyucVbZ8ObrFR-XbsFTF1ancrCJ61xO9IQMtfqVDTytVxDwA-iNjzAQM70U3Pm-z0vJqjO7oiNMoIQAAQME\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js:150:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:bb84415d-36b8-451d-a896-763ad4379189",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:f17a4a73-8673-4556-9ce3-5826643e3ce2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:90e82398-8cf2-4123-a3f3-5e817f8c2e47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 621,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "L__I0bFZ1Xyf2odRO8lv6",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:656e7c8d-7ed0-4947-b914-e02ca35a4923"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:fe558eed-fb86-49b0-8520-56d08a54dedb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:00b66b90-126c-498a-a952-a841757ceebb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:2ec6dc23-013a-43a0-9584-4a66dcb66f92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:eebc64ea-8c81-4c56-9e43-6700afc026eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:43156e99-645a-44ab-a7a9-b4f4a2179167",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:c8e097b0-f598-489a-892f-28b8bf9d0505",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:6187056b-20c7-4b20-99e0-cf818edb69d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 386,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "L__I0bFZ1Xyf2odRO8lv6",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:12995113-bb01-4ba5-89ad-60e9aef377e1"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:d0cadb6f-07c4-4870-9376-f94c0febe3b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:3862b6f3-ae99-46b9-9c81-c753c65b6ccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:1eb73118-dab6-46ad-b0f5-cd3cb99fefab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:5f6fdf55-79a7-40ca-81fc-8745490958df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 11,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:0e69b9aa-6c66-4fb1-a865-b2af7d12987c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:3384ed97-534e-4994-87a4-9e8d6dffbaa8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:34ba61a6-d843-4e66-a042-e97532c94992",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "L__I0bFZ1Xyf2odRO8lv6",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:6cce86a8-0d4e-40f4-955a-99f10ba02223"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Qb5CFGFGDV4bMtmnOkEVq",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:242404ba-90b2-424d-b942-e8d2054b2c51",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:405741a3-e0c0-4186-a596-70da75ef84ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:fe558eed-fb86-49b0-8520-56d08a54dedb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:d0cadb6f-07c4-4870-9376-f94c0febe3b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:00fd26db-c1f0-4c13-99b3-a90e20a9617a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:00b66b90-126c-498a-a952-a841757ceebb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:3862b6f3-ae99-46b9-9c81-c753c65b6ccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:c13d89e1-8e6b-4e92-9fd7-91dd7c5a89f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:2ec6dc23-013a-43a0-9584-4a66dcb66f92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:1eb73118-dab6-46ad-b0f5-cd3cb99fefab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:c619e931-e909-4e57-88fb-3e6053fdf0d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:af3e858a-9744-4776-8284-ad0372776530\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"issuanceDate\":\"2024-05-05T05:06:10Z\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:06:10Z\",\"proofValue\":\"u2V0BhVhAs1OLNMIaVug0W5CABOqDx_X0_myvd6qoSJCk52yfBZXsMSiV3Xu2DJZiNDioUyMcg7Yax_XNaEvf2ciy9SNvm1gjgCQDjYAsQnlCXNCvKvMes7W-1kumSEbxgjgeBhfCpJpcUD6BWEBsTP166fnSdVyucVbZ8ObrFR-XbsFTF1ancrCJ61xO9IQMtfqVDTytVxDwA-iNjzAQM70U3Pm-z0vJqjO7oiNMoIQAAQME\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js:150:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:eebc64ea-8c81-4c56-9e43-6700afc026eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:5f6fdf55-79a7-40ca-81fc-8745490958df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 11,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:bb84415d-36b8-451d-a896-763ad4379189",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:43156e99-645a-44ab-a7a9-b4f4a2179167",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:0e69b9aa-6c66-4fb1-a865-b2af7d12987c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:f17a4a73-8673-4556-9ce3-5826643e3ce2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:c8e097b0-f598-489a-892f-28b8bf9d0505",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:3384ed97-534e-4994-87a4-9e8d6dffbaa8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "AQKeElYCsnHAJnTRLcskL",
              "ctx": null,
              "_testId": "urn:uuid:90e82398-8cf2-4123-a3f3-5e817f8c2e47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "Gcmxm8Z0SziwzhyoG57gE",
              "ctx": null,
              "_testId": "urn:uuid:6187056b-20c7-4b20-99e0-cf818edb69d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "CFR-fgtaAScBM5OZG30Dw",
              "ctx": null,
              "_testId": "urn:uuid:34ba61a6-d843-4e66-a042-e97532c94992",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers) VC 2.0",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Qb5CFGFGDV4bMtmnOkEVq",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "columns": [],
      "rows": []
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers 1.1)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-rSvC3WK3gIRaG3B4wiOX",
              "ctx": null,
              "_testId": "urn:uuid:ac847bab-3bcf-4973-b41b-4a96654e216c",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-rSvC3WK3gIRaG3B4wiOX",
              "ctx": null,
              "_testId": "urn:uuid:810c8b5e-66a0-4fa9-b0a6-60b1e0af5627",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-rSvC3WK3gIRaG3B4wiOX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:62691671-db48-4794-b24d-ccbd4a704e64"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "RUhL5H3D7WFNFoTfo6vMI",
              "ctx": null,
              "_testId": "urn:uuid:2d43de9d-ef42-47d2-b01e-76125f6bd391",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 210,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-05-05T05:05:55Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2D9acywWzwb6ehGGAxWqCm36twGxzyHzoNkCBoBrFwxSqZLhkgzmBUtXfA7xxDShTYYgVvW3FaaGgVcPJc77BmiLokqEkbUKRSrSnff3LWBbTPrXq3zzPhPE8vwPacyW17Je\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-05-05T05:05:55Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2D9acywWzwb6ehGGAxWqCm36twGxzyHzoNkCBoBrFwxSqZLhkgzmBUtXfA7xxDShTYYgVvW3FaaGgVcPJc77BmiLokqEkbUKRSrSnff3LWBbTPrXq3zzPhPE8vwPacyW17Je"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "RUhL5H3D7WFNFoTfo6vMI",
              "ctx": null,
              "_testId": "urn:uuid:b9673102-2643-4fdf-9167-672bdf1cc2d1",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "RUhL5H3D7WFNFoTfo6vMI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:6d7a83d6-0721-4b91-8521-7763ddaf2af5"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ixuppxtL7p_YpYZo-jeEL",
              "ctx": null,
              "_testId": "urn:uuid:9d780977-34d7-4844-a79a-5232a71146ae",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ixuppxtL7p_YpYZo-jeEL",
              "ctx": null,
              "_testId": "urn:uuid:25b87423-2c35-41f1-a71c-5fd8d7f6fa40",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ixuppxtL7p_YpYZo-jeEL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:4975d92a-adf4-4d9e-84e5-ccff3da757e4"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "SjRjh0YA8fwc66Y6FYsXa",
              "ctx": null,
              "_testId": "urn:uuid:9977a2af-55bd-433d-bf15-618e1fe24d92",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "SjRjh0YA8fwc66Y6FYsXa",
              "ctx": null,
              "_testId": "urn:uuid:43524373-9c76-460f-8d8a-146856adb737",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SjRjh0YA8fwc66Y6FYsXa",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:ee771ddc-3d6e-42dc-b591-1671e04c72a6"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-6yabODIqS5gKYnX1OGuR",
              "ctx": null,
              "_testId": "urn:uuid:fcb6e20c-ab18-4be3-b1da-4c2db4c0a6db",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-05-05T05:05:55Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4BbYwrdsXvND778v88z3wvgV8Z3qQeZiYfoSsrjCQmjoZ588qJzDa53V4mvwacuommJyQSVHtAY9FtJXBFgejEef\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-05-05T05:05:55Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4BbYwrdsXvND778v88z3wvgV8Z3qQeZiYfoSsrjCQmjoZ588qJzDa53V4mvwacuommJyQSVHtAY9FtJXBFgejEef"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-6yabODIqS5gKYnX1OGuR",
              "ctx": null,
              "_testId": "urn:uuid:698773c1-5908-432e-9e7e-195ee5a715b3",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-6yabODIqS5gKYnX1OGuR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:da6de8b1-ac33-41f9-bd47-e0541c793638"
        },
        {
          "title": "SpruceID: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "WgF7-KsYFbxA3B-VMeOTS",
              "ctx": null,
              "_testId": "urn:uuid:c2785233-635f-4e8a-9a59-2e2e47f3eb88",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "WgF7-KsYFbxA3B-VMeOTS",
              "ctx": null,
              "_testId": "urn:uuid:8e043e28-aec1-44a0-a411-c1819165cef2",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WgF7-KsYFbxA3B-VMeOTS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:2dcc3337-0e9e-4c9b-b988-1df984a1cab4"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "m5COqid_fdB8IkYCeoyQ5",
              "ctx": null,
              "_testId": "urn:uuid:476d70f5-7d54-4718-838e-6915ad14c5ed",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "m5COqid_fdB8IkYCeoyQ5",
              "ctx": null,
              "_testId": "urn:uuid:66ac59f6-9320-4545-b44a-415838159046",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "m5COqid_fdB8IkYCeoyQ5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:e21c79e0-92e6-4759-8e71-09cc7d8c7718"
        },
        {
          "title": "bovine: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pjKceamhSDEescUrTgN6H",
              "ctx": null,
              "_testId": "urn:uuid:38df9598-3dc1-4a72-adcb-5dcd65420f8e",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18726,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pjKceamhSDEescUrTgN6H",
              "ctx": null,
              "_testId": "urn:uuid:e3ec1692-0dec-4ce8-90c1-ac4e163e45eb",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pjKceamhSDEescUrTgN6H",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "RMjDhPNCnMS_rMYcKxR64",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:603413ce-02d0-4f4b-85ea-2662b92ff3f3"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:dd296feb-98bb-469e-b0cc-46c37549efbe",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "SpruceID: P-384",
        "bovine: P-256",
        "bovine: P-384"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-rSvC3WK3gIRaG3B4wiOX",
              "ctx": null,
              "_testId": "urn:uuid:ac847bab-3bcf-4973-b41b-4a96654e216c",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "RUhL5H3D7WFNFoTfo6vMI",
              "ctx": null,
              "_testId": "urn:uuid:2d43de9d-ef42-47d2-b01e-76125f6bd391",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 210,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-05-05T05:05:55Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2D9acywWzwb6ehGGAxWqCm36twGxzyHzoNkCBoBrFwxSqZLhkgzmBUtXfA7xxDShTYYgVvW3FaaGgVcPJc77BmiLokqEkbUKRSrSnff3LWBbTPrXq3zzPhPE8vwPacyW17Je\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-05-05T05:05:55Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2D9acywWzwb6ehGGAxWqCm36twGxzyHzoNkCBoBrFwxSqZLhkgzmBUtXfA7xxDShTYYgVvW3FaaGgVcPJc77BmiLokqEkbUKRSrSnff3LWBbTPrXq3zzPhPE8vwPacyW17Je"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ixuppxtL7p_YpYZo-jeEL",
              "ctx": null,
              "_testId": "urn:uuid:9d780977-34d7-4844-a79a-5232a71146ae",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "SjRjh0YA8fwc66Y6FYsXa",
              "ctx": null,
              "_testId": "urn:uuid:9977a2af-55bd-433d-bf15-618e1fe24d92",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-6yabODIqS5gKYnX1OGuR",
              "ctx": null,
              "_testId": "urn:uuid:fcb6e20c-ab18-4be3-b1da-4c2db4c0a6db",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-05-05T05:05:55Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4BbYwrdsXvND778v88z3wvgV8Z3qQeZiYfoSsrjCQmjoZ588qJzDa53V4mvwacuommJyQSVHtAY9FtJXBFgejEef\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-05-05T05:05:55Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4BbYwrdsXvND778v88z3wvgV8Z3qQeZiYfoSsrjCQmjoZ588qJzDa53V4mvwacuommJyQSVHtAY9FtJXBFgejEef"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "WgF7-KsYFbxA3B-VMeOTS",
              "ctx": null,
              "_testId": "urn:uuid:c2785233-635f-4e8a-9a59-2e2e47f3eb88",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "m5COqid_fdB8IkYCeoyQ5",
              "ctx": null,
              "_testId": "urn:uuid:476d70f5-7d54-4718-838e-6915ad14c5ed",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pjKceamhSDEescUrTgN6H",
              "ctx": null,
              "_testId": "urn:uuid:38df9598-3dc1-4a72-adcb-5dcd65420f8e",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18726,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-rSvC3WK3gIRaG3B4wiOX",
              "ctx": null,
              "_testId": "urn:uuid:810c8b5e-66a0-4fa9-b0a6-60b1e0af5627",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "RUhL5H3D7WFNFoTfo6vMI",
              "ctx": null,
              "_testId": "urn:uuid:b9673102-2643-4fdf-9167-672bdf1cc2d1",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ixuppxtL7p_YpYZo-jeEL",
              "ctx": null,
              "_testId": "urn:uuid:25b87423-2c35-41f1-a71c-5fd8d7f6fa40",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "SjRjh0YA8fwc66Y6FYsXa",
              "ctx": null,
              "_testId": "urn:uuid:43524373-9c76-460f-8d8a-146856adb737",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "-6yabODIqS5gKYnX1OGuR",
              "ctx": null,
              "_testId": "urn:uuid:698773c1-5908-432e-9e7e-195ee5a715b3",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "WgF7-KsYFbxA3B-VMeOTS",
              "ctx": null,
              "_testId": "urn:uuid:8e043e28-aec1-44a0-a411-c1819165cef2",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "m5COqid_fdB8IkYCeoyQ5",
              "ctx": null,
              "_testId": "urn:uuid:66ac59f6-9320-4545-b44a-415838159046",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pjKceamhSDEescUrTgN6H",
              "ctx": null,
              "_testId": "urn:uuid:e3ec1692-0dec-4ce8-90c1-ac4e163e45eb",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers 2.0)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "HXHH_RlnqjTCACPUrJXHp",
              "ctx": null,
              "_testId": "urn:uuid:df3b1b85-829f-4e4b-beaf-d396a7ee9e36",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 267,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "HXHH_RlnqjTCACPUrJXHp",
              "ctx": null,
              "_testId": "urn:uuid:2e4afb07-7e9f-4d57-9632-aa8868ba7e1f",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HXHH_RlnqjTCACPUrJXHp",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:ee63aaed-079a-4d46-971d-5fefac62f9c4"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "fr_o2Fa5Es-aQ1ESfI-F2",
              "ctx": null,
              "_testId": "urn:uuid:fbb69d16-88bc-42f0-90bd-4084ea77d886",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z8ZzHxBTZ1wkrfLAZ6pfBC4gtZTca8wLhBQCBAuQGdzHmk6zJJDLgcyUXiMCG1BiZN6WEvSyu7DkjbnCnT5GkCQP9tA4sDXFT44g93SUGi9k69pzGST1P15qkzJsT5fX5Pob\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z8ZzHxBTZ1wkrfLAZ6pfBC4gtZTca8wLhBQCBAuQGdzHmk6zJJDLgcyUXiMCG1BiZN6WEvSyu7DkjbnCnT5GkCQP9tA4sDXFT44g93SUGi9k69pzGST1P15qkzJsT5fX5Pob"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "fr_o2Fa5Es-aQ1ESfI-F2",
              "ctx": null,
              "_testId": "urn:uuid:e9a10faa-d438-4df0-bf23-58cdaf088e0d",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fr_o2Fa5Es-aQ1ESfI-F2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:0888f654-5fd8-4203-89cb-9a3d29ac86ff"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LAh3fY4ZwhPb7WWwJVtyx",
              "ctx": null,
              "_testId": "urn:uuid:63e5646a-d539-415d-9cbc-97b4e3fda04f",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LAh3fY4ZwhPb7WWwJVtyx",
              "ctx": null,
              "_testId": "urn:uuid:9b525df6-1785-482c-9f13-5c6c0fca5155",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19528,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LAh3fY4ZwhPb7WWwJVtyx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:acde76f1-30bd-48d9-a01a-1e7d7d3cf58f"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "9nyMHcdwSR3IiwVxTIAGD",
              "ctx": null,
              "_testId": "urn:uuid:e09de30d-5ac1-4a79-9eaf-21a4eac49ac7",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "9nyMHcdwSR3IiwVxTIAGD",
              "ctx": null,
              "_testId": "urn:uuid:82ca8b44-fbff-4da4-b767-185a62b6ebed",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9nyMHcdwSR3IiwVxTIAGD",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:5aabc85e-2692-4fec-b555-b0428f728e81"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "B_Fird0ZjubOusrDlgzWa",
              "ctx": null,
              "_testId": "urn:uuid:d971323c-6918-4d3c-8947-61afbc12117e",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5ZwapjgWcaSWG6WHSHoJ5eCoZ6zB4dbD2f9ot5Lj72wgonD1vg5SXJ8oxCuBk9YvwJXWPVVBLdXJCnernjXU1YEW\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5ZwapjgWcaSWG6WHSHoJ5eCoZ6zB4dbD2f9ot5Lj72wgonD1vg5SXJ8oxCuBk9YvwJXWPVVBLdXJCnernjXU1YEW"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "B_Fird0ZjubOusrDlgzWa",
              "ctx": null,
              "_testId": "urn:uuid:078427dd-8b93-4f52-b1d0-6a519f95314a",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "B_Fird0ZjubOusrDlgzWa",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:c9c42217-4289-404a-88bd-8c028a64b63b"
        },
        {
          "title": "SpruceID: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "A3gCa1777eVtZMJJUIM7s",
              "ctx": null,
              "_testId": "urn:uuid:1346786f-9f66-433c-9a72-fe1f674d3829",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "A3gCa1777eVtZMJJUIM7s",
              "ctx": null,
              "_testId": "urn:uuid:49c50016-a659-44a9-bbb9-281eed9cbfbc",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "A3gCa1777eVtZMJJUIM7s",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:4671e9b2-efc1-4cc1-a8c1-1a17890583e6"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "2J2iYkAF0oJJtPpmJQ2aR",
              "ctx": null,
              "_testId": "urn:uuid:988499b9-1ad2-400e-9eb8-d67ec534f17b",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "2J2iYkAF0oJJtPpmJQ2aR",
              "ctx": null,
              "_testId": "urn:uuid:09dcfca9-93e9-4a8c-a868-f05b762c9ccc",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2J2iYkAF0oJJtPpmJQ2aR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:ece5c9e2-8ef0-41bc-aa4e-6f159ef46455"
        },
        {
          "title": "bovine: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "t_rX5FHW3YRMkJ-mxUxs5",
              "ctx": null,
              "_testId": "urn:uuid:ed74b6e8-2437-4316-a320-e6b8be01939c",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "t_rX5FHW3YRMkJ-mxUxs5",
              "ctx": null,
              "_testId": "urn:uuid:8fa730b3-7711-4449-92d4-c835d9805f7f",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "t_rX5FHW3YRMkJ-mxUxs5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R1zqV-zvrMNIRdd5cZX9g",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:65d04487-7dde-4ebf-a9ac-a18f811a695d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:7594f4e3-6471-4897-b9b9-efcdb473061e",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "SpruceID: P-384",
        "bovine: P-256",
        "bovine: P-384"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "HXHH_RlnqjTCACPUrJXHp",
              "ctx": null,
              "_testId": "urn:uuid:df3b1b85-829f-4e4b-beaf-d396a7ee9e36",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 267,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "fr_o2Fa5Es-aQ1ESfI-F2",
              "ctx": null,
              "_testId": "urn:uuid:fbb69d16-88bc-42f0-90bd-4084ea77d886",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z8ZzHxBTZ1wkrfLAZ6pfBC4gtZTca8wLhBQCBAuQGdzHmk6zJJDLgcyUXiMCG1BiZN6WEvSyu7DkjbnCnT5GkCQP9tA4sDXFT44g93SUGi9k69pzGST1P15qkzJsT5fX5Pob\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z8ZzHxBTZ1wkrfLAZ6pfBC4gtZTca8wLhBQCBAuQGdzHmk6zJJDLgcyUXiMCG1BiZN6WEvSyu7DkjbnCnT5GkCQP9tA4sDXFT44g93SUGi9k69pzGST1P15qkzJsT5fX5Pob"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LAh3fY4ZwhPb7WWwJVtyx",
              "ctx": null,
              "_testId": "urn:uuid:63e5646a-d539-415d-9cbc-97b4e3fda04f",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19475,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "9nyMHcdwSR3IiwVxTIAGD",
              "ctx": null,
              "_testId": "urn:uuid:e09de30d-5ac1-4a79-9eaf-21a4eac49ac7",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "B_Fird0ZjubOusrDlgzWa",
              "ctx": null,
              "_testId": "urn:uuid:d971323c-6918-4d3c-8947-61afbc12117e",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:05:55Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5ZwapjgWcaSWG6WHSHoJ5eCoZ6zB4dbD2f9ot5Lj72wgonD1vg5SXJ8oxCuBk9YvwJXWPVVBLdXJCnernjXU1YEW\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:05:55Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5ZwapjgWcaSWG6WHSHoJ5eCoZ6zB4dbD2f9ot5Lj72wgonD1vg5SXJ8oxCuBk9YvwJXWPVVBLdXJCnernjXU1YEW"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "A3gCa1777eVtZMJJUIM7s",
              "ctx": null,
              "_testId": "urn:uuid:1346786f-9f66-433c-9a72-fe1f674d3829",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "2J2iYkAF0oJJtPpmJQ2aR",
              "ctx": null,
              "_testId": "urn:uuid:988499b9-1ad2-400e-9eb8-d67ec534f17b",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "t_rX5FHW3YRMkJ-mxUxs5",
              "ctx": null,
              "_testId": "urn:uuid:ed74b6e8-2437-4316-a320-e6b8be01939c",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "HXHH_RlnqjTCACPUrJXHp",
              "ctx": null,
              "_testId": "urn:uuid:2e4afb07-7e9f-4d57-9632-aa8868ba7e1f",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18994,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "fr_o2Fa5Es-aQ1ESfI-F2",
              "ctx": null,
              "_testId": "urn:uuid:e9a10faa-d438-4df0-bf23-58cdaf088e0d",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LAh3fY4ZwhPb7WWwJVtyx",
              "ctx": null,
              "_testId": "urn:uuid:9b525df6-1785-482c-9f13-5c6c0fca5155",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19528,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "9nyMHcdwSR3IiwVxTIAGD",
              "ctx": null,
              "_testId": "urn:uuid:82ca8b44-fbff-4da4-b767-185a62b6ebed",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "B_Fird0ZjubOusrDlgzWa",
              "ctx": null,
              "_testId": "urn:uuid:078427dd-8b93-4f52-b1d0-6a519f95314a",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "A3gCa1777eVtZMJJUIM7s",
              "ctx": null,
              "_testId": "urn:uuid:49c50016-a659-44a9-bbb9-281eed9cbfbc",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "2J2iYkAF0oJJtPpmJQ2aR",
              "ctx": null,
              "_testId": "urn:uuid:09dcfca9-93e9-4a8c-a868-f05b762c9ccc",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "t_rX5FHW3YRMkJ-mxUxs5",
              "ctx": null,
              "_testId": "urn:uuid:8fa730b3-7711-4449-92d4-c835d9805f7f",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:55c17cd9-49ad-4451-b218-2479eaeec8bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:fb5e4d44-3472-4429-b6e3-f96e0dff4cb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:38b1b006-df10-458b-9ad6-5890bf992e49",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20023,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:40239a10-8cf9-46a0-95bf-0db516d11b69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:37584ba2-6037-44ce-9d75-6de5a02882d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:5752b3a4-4760-4568-98e2-7f9066b487b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:74319ce2-2045-4033-99cd-9219ffcd3ddf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:732e80d9-0ab6-4d2f-b39b-d4ecd9379407",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:22134201-2c45-4d85-a442-b07bbab83309",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:30752ef0-4d1b-4f41-a939-fb621e2113c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:a52a2070-c90f-4f84-b130-6f1574307552",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:1c3e8426-ad87-4afa-b6ce-d99a7276aaab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:d5e5d903-c4ab-4d1d-b5f6-57c6494822ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:370a71fd-921b-4d30-9bbe-7974757672ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:d307a2f8-9bae-47fb-87d7-4964ae98eb8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ylDmMlinjeXpORMOHazPQ",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:8e43a094-c345-4a28-9113-423ea2aa5e74"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:382a60de-ee12-4867-99e9-11e94c233448",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:2450dc6b-d330-40c2-bd36-b2dd9db2ad57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:d131e244-2236-4998-8451-141aaf13b076",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20868,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:c5116b8f-470c-4e9c-8164-b67df27764c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:846c3457-69ea-4bfd-925c-4c089c0a0a20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20952,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:24319ab2-d86a-4c74-ab52-a8be25a7bc5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:cc938fcf-e7aa-45de-aa59-73e7f9ecdcff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:dd719c8f-9cb1-4568-b238-4583b238be24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21094,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:b6cd6755-ca25-406e-aab5-bcee5dccbccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:9afae91f-982e-4f93-93db-86c5906a06dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:8fe88b12-42b1-4a26-992b-55170377701a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21238,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:49f0a027-6f93-4b7e-aae6-55f9dae9ea1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:7f34cc01-ab2a-4dcc-83b7-b7e4452eba08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:9ed8f51c-c628-43ed-a5e4-cad5283afc8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:c098d392-162e-4237-aad6-ac81722c8582",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ylDmMlinjeXpORMOHazPQ",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:044bf689-5d76-48e3-8aea-7b6db59d3509"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:f600b30d-df81-4d1e-b30c-f34e077a234a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:cd9057f7-11c8-4c93-8efd-02cbb9b40128",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:30dc6858-ff77-4e22-855a-60a2c46dfb2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:05923390-d26b-4016-a9ac-bf3a9026d423",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:616708c3-9cee-4b8a-955e-0896da645cd3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:2ab9feae-1d73-4ced-864f-507f113439d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:0c711add-ded4-4be5-9421-22f49c169dcd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:0f284f0c-e4cd-424f-96da-3f4e16455cb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:9740b7e7-6e71-4e2f-9ddb-aae3583ce2f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:c489dcbd-2cc0-4cf3-883e-5ce364bcac5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:0b269e54-b33a-47f8-bed7-8659b4c03457",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:e3b0e6f0-57f9-4783-b74d-649f5b750172",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22320,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:71638c86-aace-4dbe-bacc-586c9cb4af57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:8e22e8dd-7b8c-4807-95c2-b7da4d093554",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:5cf563fd-d438-42e7-a4e3-307cf49694c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ylDmMlinjeXpORMOHazPQ",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:89202aa2-8402-4195-ab8b-e268d85978d6"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:9cb18946-0009-48b2-8270-d86ecafd7d78",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:55c17cd9-49ad-4451-b218-2479eaeec8bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:382a60de-ee12-4867-99e9-11e94c233448",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:f600b30d-df81-4d1e-b30c-f34e077a234a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:fb5e4d44-3472-4429-b6e3-f96e0dff4cb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:2450dc6b-d330-40c2-bd36-b2dd9db2ad57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:cd9057f7-11c8-4c93-8efd-02cbb9b40128",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:38b1b006-df10-458b-9ad6-5890bf992e49",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20023,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:d131e244-2236-4998-8451-141aaf13b076",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20868,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:30dc6858-ff77-4e22-855a-60a2c46dfb2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:40239a10-8cf9-46a0-95bf-0db516d11b69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:c5116b8f-470c-4e9c-8164-b67df27764c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:05923390-d26b-4016-a9ac-bf3a9026d423",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:37584ba2-6037-44ce-9d75-6de5a02882d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:846c3457-69ea-4bfd-925c-4c089c0a0a20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20952,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:616708c3-9cee-4b8a-955e-0896da645cd3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:5752b3a4-4760-4568-98e2-7f9066b487b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:24319ab2-d86a-4c74-ab52-a8be25a7bc5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:2ab9feae-1d73-4ced-864f-507f113439d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:74319ce2-2045-4033-99cd-9219ffcd3ddf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:cc938fcf-e7aa-45de-aa59-73e7f9ecdcff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:0c711add-ded4-4be5-9421-22f49c169dcd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:732e80d9-0ab6-4d2f-b39b-d4ecd9379407",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:dd719c8f-9cb1-4568-b238-4583b238be24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21094,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:0f284f0c-e4cd-424f-96da-3f4e16455cb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:22134201-2c45-4d85-a442-b07bbab83309",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:b6cd6755-ca25-406e-aab5-bcee5dccbccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:9740b7e7-6e71-4e2f-9ddb-aae3583ce2f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:30752ef0-4d1b-4f41-a939-fb621e2113c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:9afae91f-982e-4f93-93db-86c5906a06dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:c489dcbd-2cc0-4cf3-883e-5ce364bcac5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:a52a2070-c90f-4f84-b130-6f1574307552",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:8fe88b12-42b1-4a26-992b-55170377701a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21238,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:0b269e54-b33a-47f8-bed7-8659b4c03457",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:1c3e8426-ad87-4afa-b6ce-d99a7276aaab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:49f0a027-6f93-4b7e-aae6-55f9dae9ea1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:e3b0e6f0-57f9-4783-b74d-649f5b750172",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22320,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:d5e5d903-c4ab-4d1d-b5f6-57c6494822ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:7f34cc01-ab2a-4dcc-83b7-b7e4452eba08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:71638c86-aace-4dbe-bacc-586c9cb4af57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:370a71fd-921b-4d30-9bbe-7974757672ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:9ed8f51c-c628-43ed-a5e4-cad5283afc8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:8e22e8dd-7b8c-4807-95c2-b7da4d093554",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ore0QYBGOLSdNDVas5Jy7",
              "ctx": null,
              "_testId": "urn:uuid:d307a2f8-9bae-47fb-87d7-4964ae98eb8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "L236U9GTjuMXC3VzymeWS",
              "ctx": null,
              "_testId": "urn:uuid:c098d392-162e-4237-aad6-ac81722c8582",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IOPn0V0FKB2cYVqVXNaFY",
              "ctx": null,
              "_testId": "urn:uuid:5cf563fd-d438-42e7-a4e3-307cf49694c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers 1.1)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:734e8586-1b35-4b49-a4a6-9060176c0860",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:68899689-117b-4ec3-8bf5-11c0f38c1ef2",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 998,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:e1f19c86-7fc6-43a3-a951-6584ad980633",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 894,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:48754c2c-2c50-48ee-b485-25f7c154fac8",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-05T05:06:17Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:17Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAWwFsZZpDZa8DoT59FNFD0Neh9Ik_DNbyYisInl9XSLaT1bLrpJobOe8zG6z9UUgobRvJjXELTxrl3kbanT9aV1gjgCQDqyGSZwZcZT-DsPhMs-6VqAdJj8x_Ivox1krqzSfHqNaYN1hA8QF1QD3fy5AdHwmOOK2Wnib6SlyhOTyAILnScnmPzGsxHVJyo5tMcSNgugr_Ib87ENTE2M4hsK9WAUVRQ4IXbFhAH1RTbD9nnZfPXkmkcUpCA0KjZHHbPBZY7uEd_5HLPZ4AF61j4NoK2QfH5NCNOmHVrySkQb7-jbjdSmpnhGxgSFhAziTPkMm6uAK09WPFTy0p15TJ9n0yCeBMwdI4kvTZ7mVV2Tkc6bZ3dAfrBTHbcnsuo6_mBUfo9qqi3JFe7gP3m1hArMg9aUitW2jHLhyKd2JDsakJPHvAful69crXk-wbpwjnNdungmvFrRKwdSsuH0-q2ckW5FkCswXFG5fki3zW3lhADDoXUWC7Hy5isSailjHoCsJP9eM8HYhhBD1Sp0pc4UOeIu7Dw7NvEe3g9B7dRzAG3qa0XokLgfbhp-y96yqcjlhAfQwj-ewv3AQlMgT0hYWyGvYjsLzegDbxlht1HvGHQa4pxsQ6mpJDDTRFrgzXkzqkiJ9Y004A5YTUbe_gT6bzd1hAee6Dbt9AFhpiOkuVpXbbLuYJp8vSsNHImYKaM0mQCYseNOQB5Tf-vEkUp7ZEyDxLh57Ip_-iRh8_pKFg2-kt5VhAASLHE9G7QFnqyjvynzMGpYpGTABlM_ILkjqYRehOea2H9g3BDbLrBlt0Peq2mw88eHDl3zxbcYqu_W6m_Rh6mFhAR1n8HMrrf9MYGuvHbW58v0TMMIrHZLG91GpsAr9X6M89xBYg11IMhgECfjwdPvnKQuf5CObmR1cjbqEA3jSGgVhASGex2Odx4izwOBFT2k-wLArcdEU4ZIp-AAJudPPX3BctlYTcYewNQgxpVpA4TyXrgEsFaKqicz7zDFjqZE8gwVhAq-DAYf4OgKyIkt_CXZU1S4BRe-J5Y5Yt_nrIbiHNlTaLExMLHornI02chjI_Db7u6kDNmvQWrD3xhTCGbptyR1hA9UuAW6p1mU8Mm9IRWK_v0bJQ8I3Dop28zzxBfBS09icti3gEuNRxv4m8Kz2yaYcfBQNHj3B2S378cyW_m6vDS1hAIlCXbDMkJT3AU2QWYNxNU57wNqObUeYARes_J0b5xqsGwp4We53X5LdP4BUVHpF7MIvSS7RcJ2HUaManQZmwRVhAQ1nu6iS8F-LhKzl5flNs2FOZ_iI_Dz-rAp1jNsUGSQwYkWaOfrPqcoOvJ2yvhRH-xb3_5ciAWtcK1WdxthcgNFhAU7GhSA6BuTj2GgIwkrguiBnEjN_0Sf1G3xH0efW8fPlmyLo50P76AuM2h4RV9VOUBclvTV3XftX1ZY__nu2CaFhAIlVslKZsI7QtfJ23UCctWi48GoYbAGDa3Mtve1VqYaMprQ38Ctcc29r10dTfn6ys6z_tpOhj69hjYAn_HZqbr1hATRmOk4l6C2QOYBZzBdgZDqxdewkQpSMF5awRlK57WcpigIxkXL-uRVZWZ5wrClN3WZSXky0Bgb0JQga2AnoXL1hAL2rnDUlsVa5ANcBxMCRVLNCTQrjNeDVJhlgijMgh0hOgpjnOJnBZnRAaOIswplUItihXts_AVl5ZfQOzZnYLiVhAUrL8zsFt3tWVc47UU-4KNZVCEZy6n5m_-TPrYYYLhJdJOUzCaI3n-wyTfqJUN1loHe2GPFAK45ojLmyje1o6LFhAVE2BX78BaC5Q8oL5tvM1QT5SCu92Ch81NjU0YjfqbBvd6E5pdBe-vyNOwCnND1c9O_g3MfKtOQ5HatTif_WkhlhA7jRo_WdatJbVmd7L9DawrJ7oDPEghCcZ0-JG7EbsQJzB1Fc4ArCqLzCgH83LfBVIBMuR6G8Lbg6wz_bHEbJollhAqBNkPNOA-Mua23N8KWpa7F5ZxJPkg1NsKbwBq9J1rHcB_DRQhicWHRE4gpzi2cmUpGwrfarLXS6NZLDTSQWHi1hA8mGFTC4gkYCOdZpsSrO52ov4Hx0i9K3McZT7rfQFuFjO6VSHE_sIiSoIE35vPK7btLS-W2RQwk-YiFbXwr3pk1hAcWRpMo-SobXP4rpOB5ucjCE-1UjvZ48HAgfCpQC_3t2w6AV95z84vV9Sa4D6mgBW8cGXNMTbv3jNF9eJijHv9lhApKVKtxtfOdW89h4BSljIChXayY5bf0MK_HVnZzBZ3fmnU4kzIgT6V7DTaKNhzOprQhx71V-wJNZJXnzQ_dv_AFhAY89fp8VKhjYIlJaIxSQIcqE0g85K-2XsjVidmxYGv1bGYXFlT5GxNWpHVKqlJlnzQ5-bgCds_ZcdvtD3nSTTwVhAca4G2et23B9RF5s6RLtmQ80XCuXqIn-odMlrReN4lrhZqMDfPSxAohyp4_QQwN80ZORn1LJYkjNpm69IUod9kFhAUO_Rv6hdOBi1_QdU2IafQc4vGXOb6qwHD-jMOzrDJ35DMpyXJwubik_ZtLvUQ_CCw33Ra3NK0Y9VWUSB6dHw-FhA3-IOoJN4l84cIPROpgdSTR_FAXFl58HsCmfbfYkIMMhKVXIE8QrmOVA5RxN-__2WRsTyWJd_qiRY6HjVPlBJT1hAiBlUhy3VGZpj8GrjhxMbvxRBBvRFtsmTRG0LnWy9GERYvTfrnJijCEwyJCdpTEn_bBux8AddIQUNIVRcqPYwAFhAF7-RO8tSfboJBuXn-9EPBjzY7iYVRqvq80fymH0kRk4Fop0MyZeALHrN2jAPzurSfvrj2eLByj2biJJF60877lhA5K2dcSlKe71Q-ESNkKWqkVvebHNbckNy-yO0YU4LchQOs00seQ9LGpxB-Hjr00DO5JS27VaZp6NDH_4HxmpJMlhAqHUpdMVj-32AhetreXBVK-sWWJ7IbrenbrccV-qOO4UBYZ5Nbu_smHascyXXXq-LL2xSSzeXPnxub6Hk2jpkrlhAmCnYp8Qewe1fmbiK4zuHtlNBjXdLDNyzcoI9-7hScHeWe-2uClEai-nt2arb4dTzOmE4wYpfLoV7hXZ3CiHgnlhAWrQKfULOB3xSaNGaae25Bct-kKj4YwLL14ab8hg7P055Pb5n6mws9iB0LAd3p1MdYBJOQsXoo2DUMQ4rcVaBc1hAWmeFyv8TfXUam2J6IneXpioy9VlsvEbJB4zefIjiDUwi5eORhwiKlqzu1Wcgwv4ktsPNKRIdLLgTV9GhiZbPVVhAdP5oTCfEyWfcM-EJxvMXUZPjPrz9i2JMMQObQp-LC37bj1u4QcNRDmGgR3rHh40DR9VEZrMg4nLoPkX85D21yVhAWCKRvXf36s524Ge0f0QIPoRErEChAgGgtthvJi_4a6mxOO1e1s9F5OskOFNEC1G1szkNuVyyCjf-SwJJ40SeolhAcWLnlOkoTfG0zIAaGtM_kB2V_vP0E2mGllCLwaEO9CrWc19IjshX6HbyyKcrtWP6iqLGnF-QTU51zMkTIGL8LlhAym3NeDH0DnkHiAT2UmuwXfjvQjF7rOXCq8Naq4UvoBCWzv3efgwfECuE70hQ3ZKZ0_x2VLYAGQ_QeUz9N5nE8VhAo_nwrdQV0HeuSElNrqQZ3Duy569tHbxwIzR3ofuRgJWOdtmYBv-e8_X91hf2gvuC1OtrXBLkE_YwJe2QrZ6A6lhAjNDloCcPVoMhYnM8iVlsVT0UEeI9-RKJQ6vW2waQdljo4Pcbp3Iv3x_OfQm6AjrbpAXei-41ZwwBLZPs7LK-CFhAlQr5NsaYX2qpM5HZrEEgdtfW0rTQJP-hIlREfJxIhs08CZHW-H6tIqF1ZT9JdvK-Kyow7qVrrV9r3rCGTfrsP1hAbqNos0Btf0Nxjgbx9c-gHHWklQy_8wrMJmx1ZNoKkA88wWJAfa3YjgCQm7AKUWsbk3J_h6gBy8AaCuCwK_dXgVhA_eXrkX27UVZbk-7DljOVPOSNqVxpUd0O1myTj5YT--C42n1UrQfo73VibMMN7xq8ctmH62tSe41bia_VwgPBTVhAWna0n0kkacRKtsWfg4V9_x_2DGbzgR6UHCXs15F_BrYmSUBIH1XGNSHRVls_BNP3fC07oxxBXXUhKDfD6y7laVhAQDw55nqK9fwKg3hU53wFI34VBN_8JGU-eK0FMq0_4pQJqaXO1FO1eWVR5RSTyhin7dSfvKGggH8W1HQAH_LKcVhAh50WiSgkyEMumAiVZGGPE9w3vb3KAWF6LSYJdSJ3VHi329sNi8eZHYtA4gyvhuikNY6V7S1ioN-TdJtNNgHtalhAOWFHUcj41Pj5NsMSVIsiGFk3WkHTqZwRAR3gxQyxgm21oCd7shuwGBqURdti1DR-1cjEYEX9DqUcIt0anrv9MlhAeOZijtcDANFjQN56L27Mk4Qv6bPRfX7UscS9XXNHMw1NDB7Ou2ou5cAR73CaqvcGWGppktBSmrRMKTLlI_xuBlhAlqora8avvIVUVflGsrRfrBRqGO5HmASmKQdkjZMZVEbgsd_JQurxZ8XaCyeHmjcYmXjvU8l-fvH6AtcFRGUcFFhAumAe1Hdw5YAYuUB82s2gnsiP-fnbQZrz1DHOpuA2w28F2kMbR1zyQuM_O8Ym88uNAB7aJDWe6kcjlofHYbr6FlhA52wGooBExXb5xY-KbOecwJ27uVq2lK0CFKh_HSzrJSTl7IiHfIwXKRuvMFx7OqQYmZ6sHetgtlrSv-m08Is4OlhALK6EYL7zLSF2AReHVn0rtNlB4P3UWVFTRFXTuce5EkBl1Lb9i8Q96r2BSm2EgDab1DrhWfq3ejA6ppSLX-V2wFhA8qlzdkeOFVbaIPqe6yT34w2MBI4Jt5sCc6lf7jmfvJ7F1K3Jca5sOcLLtH5Pr-JVNe0ea2pUXTQwQSawQLtcM7AAWCAA9aZU0ZcD8Fn5WGGh384ZC67cSZRfFznfiG3ik3IEjAFYIN4VN03WH40eMf13PZ9tP8g0VcIJh3KPFx_85G6IK4qSAlgg5ibKY-wmQMF7Egs-Jr1b-PsPUjvLANcMb2alkquyyScDWCAHe73Xs0R2W_shAK0sQbz2i7Dr-pz7653_B4Uycm9p2wRYIAcr696X_ehqGVI3uuFDDChtOTGePXtvwyI-WKtHDVV8BVggVbanZ25fx60lwFldU9w-4gDFmShT9vrV6yuQb4hUfb4GWCC8btni1BWeV6UuubgVTmRSZEfHAMajMRrmZl-sM4VKOwdYIBozHAT8mSwm5bN8c8kaeL_sxawJxqHHmfCAvw1iFyn5CFggr4ZSLSCCjvHq3xrBTpu7Fq9Q9lOL4Jfv_KCOLEhDrQgJWCAui2A_gsPeCWx0kWbVWyWMiEApA9nCB7y15g3FUmOrkwpYIO9W1ChAPMPVpwymZH_gZRBm_oaoHw_Xt95S_CWpJ4YfC1ggq0Ghp9SJUMX7RbVNkTeWqdXV_UAauM8ont8doG26CIoMWCCX7--ONfkKKAXMZsnX3vglmQPNEuHHqeBkqS3MeQHEmg1YIG9Zx6gAAj0SBCh8kcutAxSqi3PLi64dAh7mYnSazz28DlggHiMmgOv9EwgvfN0reyOjsR0WowEzaz7mqNcBbtgjRxQPWCDbEvZUSMnVmYHIbqgRgV2E1WKaweGgLFD_JXQmEVIZG4QYKhgrGC0YLg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-05T05:06:17Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:17Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAWwFsZZpDZa8DoT59FNFD0Neh9Ik_DNbyYisInl9XSLaT1bLrpJobOe8zG6z9UUgobRvJjXELTxrl3kbanT9aV1gjgCQDqyGSZwZcZT-DsPhMs-6VqAdJj8x_Ivox1krqzSfHqNaYN1hA8QF1QD3fy5AdHwmOOK2Wnib6SlyhOTyAILnScnmPzGsxHVJyo5tMcSNgugr_Ib87ENTE2M4hsK9WAUVRQ4IXbFhAH1RTbD9nnZfPXkmkcUpCA0KjZHHbPBZY7uEd_5HLPZ4AF61j4NoK2QfH5NCNOmHVrySkQb7-jbjdSmpnhGxgSFhAziTPkMm6uAK09WPFTy0p15TJ9n0yCeBMwdI4kvTZ7mVV2Tkc6bZ3dAfrBTHbcnsuo6_mBUfo9qqi3JFe7gP3m1hArMg9aUitW2jHLhyKd2JDsakJPHvAful69crXk-wbpwjnNdungmvFrRKwdSsuH0-q2ckW5FkCswXFG5fki3zW3lhADDoXUWC7Hy5isSailjHoCsJP9eM8HYhhBD1Sp0pc4UOeIu7Dw7NvEe3g9B7dRzAG3qa0XokLgfbhp-y96yqcjlhAfQwj-ewv3AQlMgT0hYWyGvYjsLzegDbxlht1HvGHQa4pxsQ6mpJDDTRFrgzXkzqkiJ9Y004A5YTUbe_gT6bzd1hAee6Dbt9AFhpiOkuVpXbbLuYJp8vSsNHImYKaM0mQCYseNOQB5Tf-vEkUp7ZEyDxLh57Ip_-iRh8_pKFg2-kt5VhAASLHE9G7QFnqyjvynzMGpYpGTABlM_ILkjqYRehOea2H9g3BDbLrBlt0Peq2mw88eHDl3zxbcYqu_W6m_Rh6mFhAR1n8HMrrf9MYGuvHbW58v0TMMIrHZLG91GpsAr9X6M89xBYg11IMhgECfjwdPvnKQuf5CObmR1cjbqEA3jSGgVhASGex2Odx4izwOBFT2k-wLArcdEU4ZIp-AAJudPPX3BctlYTcYewNQgxpVpA4TyXrgEsFaKqicz7zDFjqZE8gwVhAq-DAYf4OgKyIkt_CXZU1S4BRe-J5Y5Yt_nrIbiHNlTaLExMLHornI02chjI_Db7u6kDNmvQWrD3xhTCGbptyR1hA9UuAW6p1mU8Mm9IRWK_v0bJQ8I3Dop28zzxBfBS09icti3gEuNRxv4m8Kz2yaYcfBQNHj3B2S378cyW_m6vDS1hAIlCXbDMkJT3AU2QWYNxNU57wNqObUeYARes_J0b5xqsGwp4We53X5LdP4BUVHpF7MIvSS7RcJ2HUaManQZmwRVhAQ1nu6iS8F-LhKzl5flNs2FOZ_iI_Dz-rAp1jNsUGSQwYkWaOfrPqcoOvJ2yvhRH-xb3_5ciAWtcK1WdxthcgNFhAU7GhSA6BuTj2GgIwkrguiBnEjN_0Sf1G3xH0efW8fPlmyLo50P76AuM2h4RV9VOUBclvTV3XftX1ZY__nu2CaFhAIlVslKZsI7QtfJ23UCctWi48GoYbAGDa3Mtve1VqYaMprQ38Ctcc29r10dTfn6ys6z_tpOhj69hjYAn_HZqbr1hATRmOk4l6C2QOYBZzBdgZDqxdewkQpSMF5awRlK57WcpigIxkXL-uRVZWZ5wrClN3WZSXky0Bgb0JQga2AnoXL1hAL2rnDUlsVa5ANcBxMCRVLNCTQrjNeDVJhlgijMgh0hOgpjnOJnBZnRAaOIswplUItihXts_AVl5ZfQOzZnYLiVhAUrL8zsFt3tWVc47UU-4KNZVCEZy6n5m_-TPrYYYLhJdJOUzCaI3n-wyTfqJUN1loHe2GPFAK45ojLmyje1o6LFhAVE2BX78BaC5Q8oL5tvM1QT5SCu92Ch81NjU0YjfqbBvd6E5pdBe-vyNOwCnND1c9O_g3MfKtOQ5HatTif_WkhlhA7jRo_WdatJbVmd7L9DawrJ7oDPEghCcZ0-JG7EbsQJzB1Fc4ArCqLzCgH83LfBVIBMuR6G8Lbg6wz_bHEbJollhAqBNkPNOA-Mua23N8KWpa7F5ZxJPkg1NsKbwBq9J1rHcB_DRQhicWHRE4gpzi2cmUpGwrfarLXS6NZLDTSQWHi1hA8mGFTC4gkYCOdZpsSrO52ov4Hx0i9K3McZT7rfQFuFjO6VSHE_sIiSoIE35vPK7btLS-W2RQwk-YiFbXwr3pk1hAcWRpMo-SobXP4rpOB5ucjCE-1UjvZ48HAgfCpQC_3t2w6AV95z84vV9Sa4D6mgBW8cGXNMTbv3jNF9eJijHv9lhApKVKtxtfOdW89h4BSljIChXayY5bf0MK_HVnZzBZ3fmnU4kzIgT6V7DTaKNhzOprQhx71V-wJNZJXnzQ_dv_AFhAY89fp8VKhjYIlJaIxSQIcqE0g85K-2XsjVidmxYGv1bGYXFlT5GxNWpHVKqlJlnzQ5-bgCds_ZcdvtD3nSTTwVhAca4G2et23B9RF5s6RLtmQ80XCuXqIn-odMlrReN4lrhZqMDfPSxAohyp4_QQwN80ZORn1LJYkjNpm69IUod9kFhAUO_Rv6hdOBi1_QdU2IafQc4vGXOb6qwHD-jMOzrDJ35DMpyXJwubik_ZtLvUQ_CCw33Ra3NK0Y9VWUSB6dHw-FhA3-IOoJN4l84cIPROpgdSTR_FAXFl58HsCmfbfYkIMMhKVXIE8QrmOVA5RxN-__2WRsTyWJd_qiRY6HjVPlBJT1hAiBlUhy3VGZpj8GrjhxMbvxRBBvRFtsmTRG0LnWy9GERYvTfrnJijCEwyJCdpTEn_bBux8AddIQUNIVRcqPYwAFhAF7-RO8tSfboJBuXn-9EPBjzY7iYVRqvq80fymH0kRk4Fop0MyZeALHrN2jAPzurSfvrj2eLByj2biJJF60877lhA5K2dcSlKe71Q-ESNkKWqkVvebHNbckNy-yO0YU4LchQOs00seQ9LGpxB-Hjr00DO5JS27VaZp6NDH_4HxmpJMlhAqHUpdMVj-32AhetreXBVK-sWWJ7IbrenbrccV-qOO4UBYZ5Nbu_smHascyXXXq-LL2xSSzeXPnxub6Hk2jpkrlhAmCnYp8Qewe1fmbiK4zuHtlNBjXdLDNyzcoI9-7hScHeWe-2uClEai-nt2arb4dTzOmE4wYpfLoV7hXZ3CiHgnlhAWrQKfULOB3xSaNGaae25Bct-kKj4YwLL14ab8hg7P055Pb5n6mws9iB0LAd3p1MdYBJOQsXoo2DUMQ4rcVaBc1hAWmeFyv8TfXUam2J6IneXpioy9VlsvEbJB4zefIjiDUwi5eORhwiKlqzu1Wcgwv4ktsPNKRIdLLgTV9GhiZbPVVhAdP5oTCfEyWfcM-EJxvMXUZPjPrz9i2JMMQObQp-LC37bj1u4QcNRDmGgR3rHh40DR9VEZrMg4nLoPkX85D21yVhAWCKRvXf36s524Ge0f0QIPoRErEChAgGgtthvJi_4a6mxOO1e1s9F5OskOFNEC1G1szkNuVyyCjf-SwJJ40SeolhAcWLnlOkoTfG0zIAaGtM_kB2V_vP0E2mGllCLwaEO9CrWc19IjshX6HbyyKcrtWP6iqLGnF-QTU51zMkTIGL8LlhAym3NeDH0DnkHiAT2UmuwXfjvQjF7rOXCq8Naq4UvoBCWzv3efgwfECuE70hQ3ZKZ0_x2VLYAGQ_QeUz9N5nE8VhAo_nwrdQV0HeuSElNrqQZ3Duy569tHbxwIzR3ofuRgJWOdtmYBv-e8_X91hf2gvuC1OtrXBLkE_YwJe2QrZ6A6lhAjNDloCcPVoMhYnM8iVlsVT0UEeI9-RKJQ6vW2waQdljo4Pcbp3Iv3x_OfQm6AjrbpAXei-41ZwwBLZPs7LK-CFhAlQr5NsaYX2qpM5HZrEEgdtfW0rTQJP-hIlREfJxIhs08CZHW-H6tIqF1ZT9JdvK-Kyow7qVrrV9r3rCGTfrsP1hAbqNos0Btf0Nxjgbx9c-gHHWklQy_8wrMJmx1ZNoKkA88wWJAfa3YjgCQm7AKUWsbk3J_h6gBy8AaCuCwK_dXgVhA_eXrkX27UVZbk-7DljOVPOSNqVxpUd0O1myTj5YT--C42n1UrQfo73VibMMN7xq8ctmH62tSe41bia_VwgPBTVhAWna0n0kkacRKtsWfg4V9_x_2DGbzgR6UHCXs15F_BrYmSUBIH1XGNSHRVls_BNP3fC07oxxBXXUhKDfD6y7laVhAQDw55nqK9fwKg3hU53wFI34VBN_8JGU-eK0FMq0_4pQJqaXO1FO1eWVR5RSTyhin7dSfvKGggH8W1HQAH_LKcVhAh50WiSgkyEMumAiVZGGPE9w3vb3KAWF6LSYJdSJ3VHi329sNi8eZHYtA4gyvhuikNY6V7S1ioN-TdJtNNgHtalhAOWFHUcj41Pj5NsMSVIsiGFk3WkHTqZwRAR3gxQyxgm21oCd7shuwGBqURdti1DR-1cjEYEX9DqUcIt0anrv9MlhAeOZijtcDANFjQN56L27Mk4Qv6bPRfX7UscS9XXNHMw1NDB7Ou2ou5cAR73CaqvcGWGppktBSmrRMKTLlI_xuBlhAlqora8avvIVUVflGsrRfrBRqGO5HmASmKQdkjZMZVEbgsd_JQurxZ8XaCyeHmjcYmXjvU8l-fvH6AtcFRGUcFFhAumAe1Hdw5YAYuUB82s2gnsiP-fnbQZrz1DHOpuA2w28F2kMbR1zyQuM_O8Ym88uNAB7aJDWe6kcjlofHYbr6FlhA52wGooBExXb5xY-KbOecwJ27uVq2lK0CFKh_HSzrJSTl7IiHfIwXKRuvMFx7OqQYmZ6sHetgtlrSv-m08Is4OlhALK6EYL7zLSF2AReHVn0rtNlB4P3UWVFTRFXTuce5EkBl1Lb9i8Q96r2BSm2EgDab1DrhWfq3ejA6ppSLX-V2wFhA8qlzdkeOFVbaIPqe6yT34w2MBI4Jt5sCc6lf7jmfvJ7F1K3Jca5sOcLLtH5Pr-JVNe0ea2pUXTQwQSawQLtcM7AAWCAA9aZU0ZcD8Fn5WGGh384ZC67cSZRfFznfiG3ik3IEjAFYIN4VN03WH40eMf13PZ9tP8g0VcIJh3KPFx_85G6IK4qSAlgg5ibKY-wmQMF7Egs-Jr1b-PsPUjvLANcMb2alkquyyScDWCAHe73Xs0R2W_shAK0sQbz2i7Dr-pz7653_B4Uycm9p2wRYIAcr696X_ehqGVI3uuFDDChtOTGePXtvwyI-WKtHDVV8BVggVbanZ25fx60lwFldU9w-4gDFmShT9vrV6yuQb4hUfb4GWCC8btni1BWeV6UuubgVTmRSZEfHAMajMRrmZl-sM4VKOwdYIBozHAT8mSwm5bN8c8kaeL_sxawJxqHHmfCAvw1iFyn5CFggr4ZSLSCCjvHq3xrBTpu7Fq9Q9lOL4Jfv_KCOLEhDrQgJWCAui2A_gsPeCWx0kWbVWyWMiEApA9nCB7y15g3FUmOrkwpYIO9W1ChAPMPVpwymZH_gZRBm_oaoHw_Xt95S_CWpJ4YfC1ggq0Ghp9SJUMX7RbVNkTeWqdXV_UAauM8ont8doG26CIoMWCCX7--ONfkKKAXMZsnX3vglmQPNEuHHqeBkqS3MeQHEmg1YIG9Zx6gAAj0SBCh8kcutAxSqi3PLi64dAh7mYnSazz28DlggHiMmgOv9EwgvfN0reyOjsR0WowEzaz7mqNcBbtgjRxQPWCDbEvZUSMnVmYHIbqgRgV2E1WKaweGgLFD_JXQmEVIZG4QYKhgrGC0YLg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:0a35d012-42be-499e-a60f-f9ec854dcfbd",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 703,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-05T05:06:17Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:17Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAGS4xgH4cKuFThuwD7m_krba0Jb8ZMNNpjJBSiYuB48_maeygcl8GT8EnPfFZn93dTLvVmdRUwV70tlixQkCebFgjgCQC7XjZFQaaHSg5SW_ni7FuSKHaXACxY5Hu5vYUNeuRfWqYIlhApFF4DE0pC4hPr0WTNH2PITCBllLAIrXhvCtvwMF-alcXRUMVF99uXCUo4rfzS9m8T3Wu5j8E3d7ARoMhQKjmfVhAYIYkvk1ZTyKfiT5tWWCAt2fdg6eIHOExCAt4_y6gQjFWE7CLQ9bQeISGiDl3V16cF_rhRA5w4mql9M44k8JOnlhA6P_z7Oe5BC8YvMRpdLJm5F31Or7bzGml7UvUiXAiMQxecEd99I1tgTCCmue9XgceePl7wvUHWInn0JIr-_HhclhAf50glcu1pClthE6_4sid7yP2Lyydvurta5lVMbbTr21YdWkl95JFPs5Bvh_K-UJpbkrVa7ScxR1H8KelOIHisVhAjzlWa6C57oZAdtG-dUgVUI5vmiZ7Xq5Mz3PUKB8Czg5FyTlUmmeOH237QPZaS__XbxC0GxpLZ1gPoM5AKUO9eFhAnsGVBt_sLyCnpEgHj_03pxj6BjzWxetV85bwWQOjN3q_4x5CxaunmiufhX1KxPJUMUmVzNhcld-W1NMsayW58VhAS8pF6k3Efe2xIpnCze6wtYvG0WG3trq-iyteK-O9dk_Kp7Tjj_DetFabamFyvkr9qs1cT6_wEvUI1HyVZhXimFhAgCHNfbGaWjpaxbNmqbRPe2z50ilbZ60UecmxaGkhPLR_Ld8G2yBuMttZXikxunjMzEbwO6tr8EFNxIFXFtBaEFhA_s-7zesyFSNCRFa1I1AhLB0o8FhE-dFR515lMFK8DsdOSJ3Z834vmq_ekZ5gfVSh6w_jEQ6iRMdpSYZdVpPDGFhAglq1RAAqWoQK2Jfwp8-BQ7DnI0KMAbuKEnzk3tyYxJ8zEUVLuMjNuqs-arI7lJM7OeoDiSyLGE_vEADKE051llhAK1JBvURFuOfWYMFerVosmnevhFAYLKF1ph5HSmx0URKzjL1ivS75VdniLwi4qyEvYtEPgAv08uhs-Pp4uWOhklhA3qvAdyNFiGkbDFCzTwtkIJFy9olI4adUgWRJM9ugsGGEaGCh7yMRk2gP-brrNWnW-aAMM66Oj4QLWCPIzAio1VhAAPXxODMbFjTc-Dp_JYDgZ0bIvQ9JwyUZb7RPXRA4ZBC7QTWK0Q_yDB4zEkFF5Oplg0LJmdtGvp2joY6N2RfFPlhATF96xYCSyjJbo_YJAbORa9hLppIydMKbpbaHPbZKgmlrNbWq3XQ3zY8mJ7u_KOk0_S2ewT3MROW7M-F7cBZ25FhAW7VRG3u8Lo2bcu1d0dqLTfscmEEozQZZKGGv9cJ-9RBoDpbSn1nMTIn_KFwyjhgIghbbyl3fTx9oToiaa65aEVhAUJz61x7QAKtbheBzxnBjG0xy65iGJJJBpfO-xm-PBorHg_BfxvSmyBZqAlmAofd0v8cwU1czIJWDYAOMycR-3lhA9UvUFswgEGL9jEhnBWyOQLB1o_vpowLIUtKu6uADuZxop6Z6vs2IIEs8XYr2T6xFAAOsLXjdAo5U4ECJCh-c0lhAt0C6vgrKvDp57SyiuGYywLGmiVt8fNY6k20ix6VWr0MRAFB3O257ZDXO2PCNpHzCTvTAUPsmEEHFnn0OuSbecVhAL3_RMtDT7qK5-5Y8X7QbjzT823v0jkcaYKtZgJx3AbZsplD2WYcgQ7FHUwEvMias44FoUFGRLLjyYv5tj1OYeVhAlGcXfdjLRMqWhM4iqdKbsXeaBRj_nbVh_ts5dTB4q3pxEZleEouqt58KmuFfkyU3O0HSn2OB3WyjbQUVgV-Ps1hAJfprrjZCHVJsDHfi-umuhkFbkAMTPHKDyW3mNvEDYaUgOa_9d8GMRE229o9zV3JikFoFZ-TclEHiDjR-eE96_1hASnjFGsYDlohjtpVWGE9WI7xSanRU-dpnYQwdmQTOYn2Vzsoz-LCnI9rzSojucu6MyKyhhdPaF5Ad6ry3avGy91hAcglpPZqNsYf7gldI33-VPupwZ5dkLXeLzhosakLN9UV3FeXmmC-Jd-x7w3uJ05HE8n3VRlsd5QEPTUNdZHzyYFhA7jxtiIHcYKPWYSF26PDWFgZOL8cTfeeJ1meoT5KIAtiMwKZdUsKtDkH45m3Tc5UD__63jAS5l9CWiGEFW4RjvlhAB5PbpUT7oAevGLm1QbJibGjOQIHK--YUnGFrb7yRzVw-fD8ESIoueSYn6DJ547p7d_2YRa5EJIydhUkP-n3Y61hAcLvBRjLPCaQ1X6DkgmH1YJoiiyly0DQEhR2kXAnst9r2APFTKVwa9t6Dll7Lb_iHcxd2xgsY28tqFG_Ib0yLmVhA8YmrCAlWCtGntd7yW2LpfTgf7SPFPor9Tlv0SlhMms9PIZceB2pBOwoOtpVMSi1jYx6OQq5u5KSX6keUXE1iRlhAK8PbI8Mi7SbbcPC3MU3qh4A2ddpWExq0y-Ue267X7ggSkqJPErq6VY8LEuVc8AvAFM2EBWnWX66sbEedLz5gllhAEdWchFYM3_hz602mKCX7XMIZSl6K0JB943yjOCm2aR0AcQNfoMwbWEZer0577fq7x4YUpRcnFP4LpFQU2QFSGVhASnEcCzV5NMkYT6Q3-u0O8bmPiZ8o6MIhL7J9QOvjL7Ro8Z_sOFnAhmggxZGE3mBgMsS92SfwDNUfvyIdyPLFYFhAkC5p-lZVWiigXhsGsOvlRn8CCUlgMjNuKqUoP9GKhXxW_SkSN5gsShdFnRpUAVkXE_cUcNcak9yhZFzGd8NFplhAk1Q721kNujJzInyK6YL4cL1HDltVZfW2-hWpNhjOm4FPeRfG1daq9PRH8wJVi-e-2HfNhb4tzJPGuQxlNzH7JVhAguo9j-GPjR7B1_tG3Ncb8uHw7iaheVn4wVv_Xx-1ZQUXiq2NXBPNiKj8BB16gUKQgsw1KEnUyia7N691EdQQyVhAVTsrkB39aAgij0F2aHJmXCYFnVclc9yJbev-CdeWyHoC4BxnR3iGWYTh2i_SdzvgdFQw_asybsM2__-KpdwJC6sAWCD6CXOnITkskUS63679GuDRdIWmd7vNtSakAVL0iBRLGwFYIAdtWaC_j97YyX1KODs11bqLVyb3T27cZE2j2bB9H3kpAlggS0WYo9fKcmRbZ3In-Vjjhx7I-fktadF1YsUmxGXm6UgDWCCStWP_MSKaon-x1Q5OinmcPYXHROGBGYDXud9JnfVGHQRYIGAHX20OisuFVu08DaDNNzGSb8K8nz4KsdvB96-PO6U4BVggfvf_uARpOK7xU-mjWjpHn1-W5vonRoC4kAgkfDL1k2oGWCDlO_pPnAZjBHhVvSp1M5RgHnHM3rteEP-HeR7_sxv9cgdYIM-EDom8waSnPbL4lRjWHPFn2_Erm-v8XUQf2h-q2QxaCFggaAnYbcNN06hF3uZIJXjUGwAo8T0YYkKnpgZDA_wz3QMJWCDWlbOwftPmXITp15NHlBFFihUgz26l5MrUP6e15rbOZApYIH7Q2JqORVQEBEKhUuYWoezNod5us4QrkC7Uu4D2xZyYhBITFRY\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-05T05:06:17Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:17Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAGS4xgH4cKuFThuwD7m_krba0Jb8ZMNNpjJBSiYuB48_maeygcl8GT8EnPfFZn93dTLvVmdRUwV70tlixQkCebFgjgCQC7XjZFQaaHSg5SW_ni7FuSKHaXACxY5Hu5vYUNeuRfWqYIlhApFF4DE0pC4hPr0WTNH2PITCBllLAIrXhvCtvwMF-alcXRUMVF99uXCUo4rfzS9m8T3Wu5j8E3d7ARoMhQKjmfVhAYIYkvk1ZTyKfiT5tWWCAt2fdg6eIHOExCAt4_y6gQjFWE7CLQ9bQeISGiDl3V16cF_rhRA5w4mql9M44k8JOnlhA6P_z7Oe5BC8YvMRpdLJm5F31Or7bzGml7UvUiXAiMQxecEd99I1tgTCCmue9XgceePl7wvUHWInn0JIr-_HhclhAf50glcu1pClthE6_4sid7yP2Lyydvurta5lVMbbTr21YdWkl95JFPs5Bvh_K-UJpbkrVa7ScxR1H8KelOIHisVhAjzlWa6C57oZAdtG-dUgVUI5vmiZ7Xq5Mz3PUKB8Czg5FyTlUmmeOH237QPZaS__XbxC0GxpLZ1gPoM5AKUO9eFhAnsGVBt_sLyCnpEgHj_03pxj6BjzWxetV85bwWQOjN3q_4x5CxaunmiufhX1KxPJUMUmVzNhcld-W1NMsayW58VhAS8pF6k3Efe2xIpnCze6wtYvG0WG3trq-iyteK-O9dk_Kp7Tjj_DetFabamFyvkr9qs1cT6_wEvUI1HyVZhXimFhAgCHNfbGaWjpaxbNmqbRPe2z50ilbZ60UecmxaGkhPLR_Ld8G2yBuMttZXikxunjMzEbwO6tr8EFNxIFXFtBaEFhA_s-7zesyFSNCRFa1I1AhLB0o8FhE-dFR515lMFK8DsdOSJ3Z834vmq_ekZ5gfVSh6w_jEQ6iRMdpSYZdVpPDGFhAglq1RAAqWoQK2Jfwp8-BQ7DnI0KMAbuKEnzk3tyYxJ8zEUVLuMjNuqs-arI7lJM7OeoDiSyLGE_vEADKE051llhAK1JBvURFuOfWYMFerVosmnevhFAYLKF1ph5HSmx0URKzjL1ivS75VdniLwi4qyEvYtEPgAv08uhs-Pp4uWOhklhA3qvAdyNFiGkbDFCzTwtkIJFy9olI4adUgWRJM9ugsGGEaGCh7yMRk2gP-brrNWnW-aAMM66Oj4QLWCPIzAio1VhAAPXxODMbFjTc-Dp_JYDgZ0bIvQ9JwyUZb7RPXRA4ZBC7QTWK0Q_yDB4zEkFF5Oplg0LJmdtGvp2joY6N2RfFPlhATF96xYCSyjJbo_YJAbORa9hLppIydMKbpbaHPbZKgmlrNbWq3XQ3zY8mJ7u_KOk0_S2ewT3MROW7M-F7cBZ25FhAW7VRG3u8Lo2bcu1d0dqLTfscmEEozQZZKGGv9cJ-9RBoDpbSn1nMTIn_KFwyjhgIghbbyl3fTx9oToiaa65aEVhAUJz61x7QAKtbheBzxnBjG0xy65iGJJJBpfO-xm-PBorHg_BfxvSmyBZqAlmAofd0v8cwU1czIJWDYAOMycR-3lhA9UvUFswgEGL9jEhnBWyOQLB1o_vpowLIUtKu6uADuZxop6Z6vs2IIEs8XYr2T6xFAAOsLXjdAo5U4ECJCh-c0lhAt0C6vgrKvDp57SyiuGYywLGmiVt8fNY6k20ix6VWr0MRAFB3O257ZDXO2PCNpHzCTvTAUPsmEEHFnn0OuSbecVhAL3_RMtDT7qK5-5Y8X7QbjzT823v0jkcaYKtZgJx3AbZsplD2WYcgQ7FHUwEvMias44FoUFGRLLjyYv5tj1OYeVhAlGcXfdjLRMqWhM4iqdKbsXeaBRj_nbVh_ts5dTB4q3pxEZleEouqt58KmuFfkyU3O0HSn2OB3WyjbQUVgV-Ps1hAJfprrjZCHVJsDHfi-umuhkFbkAMTPHKDyW3mNvEDYaUgOa_9d8GMRE229o9zV3JikFoFZ-TclEHiDjR-eE96_1hASnjFGsYDlohjtpVWGE9WI7xSanRU-dpnYQwdmQTOYn2Vzsoz-LCnI9rzSojucu6MyKyhhdPaF5Ad6ry3avGy91hAcglpPZqNsYf7gldI33-VPupwZ5dkLXeLzhosakLN9UV3FeXmmC-Jd-x7w3uJ05HE8n3VRlsd5QEPTUNdZHzyYFhA7jxtiIHcYKPWYSF26PDWFgZOL8cTfeeJ1meoT5KIAtiMwKZdUsKtDkH45m3Tc5UD__63jAS5l9CWiGEFW4RjvlhAB5PbpUT7oAevGLm1QbJibGjOQIHK--YUnGFrb7yRzVw-fD8ESIoueSYn6DJ547p7d_2YRa5EJIydhUkP-n3Y61hAcLvBRjLPCaQ1X6DkgmH1YJoiiyly0DQEhR2kXAnst9r2APFTKVwa9t6Dll7Lb_iHcxd2xgsY28tqFG_Ib0yLmVhA8YmrCAlWCtGntd7yW2LpfTgf7SPFPor9Tlv0SlhMms9PIZceB2pBOwoOtpVMSi1jYx6OQq5u5KSX6keUXE1iRlhAK8PbI8Mi7SbbcPC3MU3qh4A2ddpWExq0y-Ue267X7ggSkqJPErq6VY8LEuVc8AvAFM2EBWnWX66sbEedLz5gllhAEdWchFYM3_hz602mKCX7XMIZSl6K0JB943yjOCm2aR0AcQNfoMwbWEZer0577fq7x4YUpRcnFP4LpFQU2QFSGVhASnEcCzV5NMkYT6Q3-u0O8bmPiZ8o6MIhL7J9QOvjL7Ro8Z_sOFnAhmggxZGE3mBgMsS92SfwDNUfvyIdyPLFYFhAkC5p-lZVWiigXhsGsOvlRn8CCUlgMjNuKqUoP9GKhXxW_SkSN5gsShdFnRpUAVkXE_cUcNcak9yhZFzGd8NFplhAk1Q721kNujJzInyK6YL4cL1HDltVZfW2-hWpNhjOm4FPeRfG1daq9PRH8wJVi-e-2HfNhb4tzJPGuQxlNzH7JVhAguo9j-GPjR7B1_tG3Ncb8uHw7iaheVn4wVv_Xx-1ZQUXiq2NXBPNiKj8BB16gUKQgsw1KEnUyia7N691EdQQyVhAVTsrkB39aAgij0F2aHJmXCYFnVclc9yJbev-CdeWyHoC4BxnR3iGWYTh2i_SdzvgdFQw_asybsM2__-KpdwJC6sAWCD6CXOnITkskUS63679GuDRdIWmd7vNtSakAVL0iBRLGwFYIAdtWaC_j97YyX1KODs11bqLVyb3T27cZE2j2bB9H3kpAlggS0WYo9fKcmRbZ3In-Vjjhx7I-fktadF1YsUmxGXm6UgDWCCStWP_MSKaon-x1Q5OinmcPYXHROGBGYDXud9JnfVGHQRYIGAHX20OisuFVu08DaDNNzGSb8K8nz4KsdvB96-PO6U4BVggfvf_uARpOK7xU-mjWjpHn1-W5vonRoC4kAgkfDL1k2oGWCDlO_pPnAZjBHhVvSp1M5RgHnHM3rteEP-HeR7_sxv9cgdYIM-EDom8waSnPbL4lRjWHPFn2_Erm-v8XUQf2h-q2QxaCFggaAnYbcNN06hF3uZIJXjUGwAo8T0YYkKnpgZDA_wz3QMJWCDWlbOwftPmXITp15NHlBFFihUgz26l5MrUP6e15rbOZApYIH7Q2JqORVQEBEKhUuYWoezNod5us4QrkC7Uu4D2xZyYhBITFRY"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:7822e7ee-7e2b-4046-b3dd-de76d6f06b95",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:c6072d83-4727-4ff0-8f41-c48f2ef2f086",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:0ecb9a7b-5fae-4c3e-9d0f-990906801f66",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:bf5b27e7-9b4e-4dba-a3db-1eccae954278",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:f30afe0f-4686-4ff3-9098-d01f339c65d6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 301,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "474Tskw8OqYQRDQYnWmNW",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:63ac32f1-35dc-4740-9d69-a85d72a7e0e2"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:55bbefea-3d7b-40ad-9cdf-dbc796e0fbde",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:4c1e1093-a4fe-4dfa-9b7d-8307b7a9d128",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:bd52fee2-d748-494e-b461-4537b75b33ca",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:af3d007a-f869-45e3-99dc-e536735d9fe3",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:109f9914-1e84-4065-bed4-a383c7da004f",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:50ffb1e0-85ec-4366-8f6f-2d340011e781",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30768,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:51fdd4c5-a799-40a3-bd9e-c15cd4e3d377",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:0529a220-190e-4b62-b531-853e9a285251",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:2f61ac83-cbc7-4efa-9842-5ff7da137365",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:4742f659-2e34-4062-a2ac-022affd04d8c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 243,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "474Tskw8OqYQRDQYnWmNW",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:fd6b4c4c-954e-4113-b199-b0c94e4c38d9"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:64388814-6cf1-4adc-8bd5-f4bb6960efe0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 297,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:449ae524-2e88-486e-ae43-26c33afecaa9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:c3ad5c7b-90ee-4215-9aa2-0e45ad1f22f7",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:62f48179-f815-47ae-ba99-462044d132b5",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 588,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:38ff8ec9-91e2-4f1e-90d4-ee09b4f63541",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:11a2d7d2-b0fd-4cdd-917e-ca02d869125b",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 341,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:2c6ae057-09d1-4752-bfe7-9e9007078d6f",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:0d7180a5-bb49-4456-9a6f-bc94532ba8e8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:8d84cb9c-3531-4964-a583-0278b52530f6",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:2a968f2b-1dc6-4cbe-afac-5873e8f76b88",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "474Tskw8OqYQRDQYnWmNW",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:1ad9f560-fd41-41eb-aeb7-b81243dbcb81"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:ef621e5d-f51c-42d0-8295-b19d94a41cae",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:734e8586-1b35-4b49-a4a6-9060176c0860",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:55bbefea-3d7b-40ad-9cdf-dbc796e0fbde",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:64388814-6cf1-4adc-8bd5-f4bb6960efe0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 297,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:68899689-117b-4ec3-8bf5-11c0f38c1ef2",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 998,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:4c1e1093-a4fe-4dfa-9b7d-8307b7a9d128",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:449ae524-2e88-486e-ae43-26c33afecaa9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:e1f19c86-7fc6-43a3-a951-6584ad980633",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 894,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:bd52fee2-d748-494e-b461-4537b75b33ca",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:c3ad5c7b-90ee-4215-9aa2-0e45ad1f22f7",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:48754c2c-2c50-48ee-b485-25f7c154fac8",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-05T05:06:17Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:17Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAWwFsZZpDZa8DoT59FNFD0Neh9Ik_DNbyYisInl9XSLaT1bLrpJobOe8zG6z9UUgobRvJjXELTxrl3kbanT9aV1gjgCQDqyGSZwZcZT-DsPhMs-6VqAdJj8x_Ivox1krqzSfHqNaYN1hA8QF1QD3fy5AdHwmOOK2Wnib6SlyhOTyAILnScnmPzGsxHVJyo5tMcSNgugr_Ib87ENTE2M4hsK9WAUVRQ4IXbFhAH1RTbD9nnZfPXkmkcUpCA0KjZHHbPBZY7uEd_5HLPZ4AF61j4NoK2QfH5NCNOmHVrySkQb7-jbjdSmpnhGxgSFhAziTPkMm6uAK09WPFTy0p15TJ9n0yCeBMwdI4kvTZ7mVV2Tkc6bZ3dAfrBTHbcnsuo6_mBUfo9qqi3JFe7gP3m1hArMg9aUitW2jHLhyKd2JDsakJPHvAful69crXk-wbpwjnNdungmvFrRKwdSsuH0-q2ckW5FkCswXFG5fki3zW3lhADDoXUWC7Hy5isSailjHoCsJP9eM8HYhhBD1Sp0pc4UOeIu7Dw7NvEe3g9B7dRzAG3qa0XokLgfbhp-y96yqcjlhAfQwj-ewv3AQlMgT0hYWyGvYjsLzegDbxlht1HvGHQa4pxsQ6mpJDDTRFrgzXkzqkiJ9Y004A5YTUbe_gT6bzd1hAee6Dbt9AFhpiOkuVpXbbLuYJp8vSsNHImYKaM0mQCYseNOQB5Tf-vEkUp7ZEyDxLh57Ip_-iRh8_pKFg2-kt5VhAASLHE9G7QFnqyjvynzMGpYpGTABlM_ILkjqYRehOea2H9g3BDbLrBlt0Peq2mw88eHDl3zxbcYqu_W6m_Rh6mFhAR1n8HMrrf9MYGuvHbW58v0TMMIrHZLG91GpsAr9X6M89xBYg11IMhgECfjwdPvnKQuf5CObmR1cjbqEA3jSGgVhASGex2Odx4izwOBFT2k-wLArcdEU4ZIp-AAJudPPX3BctlYTcYewNQgxpVpA4TyXrgEsFaKqicz7zDFjqZE8gwVhAq-DAYf4OgKyIkt_CXZU1S4BRe-J5Y5Yt_nrIbiHNlTaLExMLHornI02chjI_Db7u6kDNmvQWrD3xhTCGbptyR1hA9UuAW6p1mU8Mm9IRWK_v0bJQ8I3Dop28zzxBfBS09icti3gEuNRxv4m8Kz2yaYcfBQNHj3B2S378cyW_m6vDS1hAIlCXbDMkJT3AU2QWYNxNU57wNqObUeYARes_J0b5xqsGwp4We53X5LdP4BUVHpF7MIvSS7RcJ2HUaManQZmwRVhAQ1nu6iS8F-LhKzl5flNs2FOZ_iI_Dz-rAp1jNsUGSQwYkWaOfrPqcoOvJ2yvhRH-xb3_5ciAWtcK1WdxthcgNFhAU7GhSA6BuTj2GgIwkrguiBnEjN_0Sf1G3xH0efW8fPlmyLo50P76AuM2h4RV9VOUBclvTV3XftX1ZY__nu2CaFhAIlVslKZsI7QtfJ23UCctWi48GoYbAGDa3Mtve1VqYaMprQ38Ctcc29r10dTfn6ys6z_tpOhj69hjYAn_HZqbr1hATRmOk4l6C2QOYBZzBdgZDqxdewkQpSMF5awRlK57WcpigIxkXL-uRVZWZ5wrClN3WZSXky0Bgb0JQga2AnoXL1hAL2rnDUlsVa5ANcBxMCRVLNCTQrjNeDVJhlgijMgh0hOgpjnOJnBZnRAaOIswplUItihXts_AVl5ZfQOzZnYLiVhAUrL8zsFt3tWVc47UU-4KNZVCEZy6n5m_-TPrYYYLhJdJOUzCaI3n-wyTfqJUN1loHe2GPFAK45ojLmyje1o6LFhAVE2BX78BaC5Q8oL5tvM1QT5SCu92Ch81NjU0YjfqbBvd6E5pdBe-vyNOwCnND1c9O_g3MfKtOQ5HatTif_WkhlhA7jRo_WdatJbVmd7L9DawrJ7oDPEghCcZ0-JG7EbsQJzB1Fc4ArCqLzCgH83LfBVIBMuR6G8Lbg6wz_bHEbJollhAqBNkPNOA-Mua23N8KWpa7F5ZxJPkg1NsKbwBq9J1rHcB_DRQhicWHRE4gpzi2cmUpGwrfarLXS6NZLDTSQWHi1hA8mGFTC4gkYCOdZpsSrO52ov4Hx0i9K3McZT7rfQFuFjO6VSHE_sIiSoIE35vPK7btLS-W2RQwk-YiFbXwr3pk1hAcWRpMo-SobXP4rpOB5ucjCE-1UjvZ48HAgfCpQC_3t2w6AV95z84vV9Sa4D6mgBW8cGXNMTbv3jNF9eJijHv9lhApKVKtxtfOdW89h4BSljIChXayY5bf0MK_HVnZzBZ3fmnU4kzIgT6V7DTaKNhzOprQhx71V-wJNZJXnzQ_dv_AFhAY89fp8VKhjYIlJaIxSQIcqE0g85K-2XsjVidmxYGv1bGYXFlT5GxNWpHVKqlJlnzQ5-bgCds_ZcdvtD3nSTTwVhAca4G2et23B9RF5s6RLtmQ80XCuXqIn-odMlrReN4lrhZqMDfPSxAohyp4_QQwN80ZORn1LJYkjNpm69IUod9kFhAUO_Rv6hdOBi1_QdU2IafQc4vGXOb6qwHD-jMOzrDJ35DMpyXJwubik_ZtLvUQ_CCw33Ra3NK0Y9VWUSB6dHw-FhA3-IOoJN4l84cIPROpgdSTR_FAXFl58HsCmfbfYkIMMhKVXIE8QrmOVA5RxN-__2WRsTyWJd_qiRY6HjVPlBJT1hAiBlUhy3VGZpj8GrjhxMbvxRBBvRFtsmTRG0LnWy9GERYvTfrnJijCEwyJCdpTEn_bBux8AddIQUNIVRcqPYwAFhAF7-RO8tSfboJBuXn-9EPBjzY7iYVRqvq80fymH0kRk4Fop0MyZeALHrN2jAPzurSfvrj2eLByj2biJJF60877lhA5K2dcSlKe71Q-ESNkKWqkVvebHNbckNy-yO0YU4LchQOs00seQ9LGpxB-Hjr00DO5JS27VaZp6NDH_4HxmpJMlhAqHUpdMVj-32AhetreXBVK-sWWJ7IbrenbrccV-qOO4UBYZ5Nbu_smHascyXXXq-LL2xSSzeXPnxub6Hk2jpkrlhAmCnYp8Qewe1fmbiK4zuHtlNBjXdLDNyzcoI9-7hScHeWe-2uClEai-nt2arb4dTzOmE4wYpfLoV7hXZ3CiHgnlhAWrQKfULOB3xSaNGaae25Bct-kKj4YwLL14ab8hg7P055Pb5n6mws9iB0LAd3p1MdYBJOQsXoo2DUMQ4rcVaBc1hAWmeFyv8TfXUam2J6IneXpioy9VlsvEbJB4zefIjiDUwi5eORhwiKlqzu1Wcgwv4ktsPNKRIdLLgTV9GhiZbPVVhAdP5oTCfEyWfcM-EJxvMXUZPjPrz9i2JMMQObQp-LC37bj1u4QcNRDmGgR3rHh40DR9VEZrMg4nLoPkX85D21yVhAWCKRvXf36s524Ge0f0QIPoRErEChAgGgtthvJi_4a6mxOO1e1s9F5OskOFNEC1G1szkNuVyyCjf-SwJJ40SeolhAcWLnlOkoTfG0zIAaGtM_kB2V_vP0E2mGllCLwaEO9CrWc19IjshX6HbyyKcrtWP6iqLGnF-QTU51zMkTIGL8LlhAym3NeDH0DnkHiAT2UmuwXfjvQjF7rOXCq8Naq4UvoBCWzv3efgwfECuE70hQ3ZKZ0_x2VLYAGQ_QeUz9N5nE8VhAo_nwrdQV0HeuSElNrqQZ3Duy569tHbxwIzR3ofuRgJWOdtmYBv-e8_X91hf2gvuC1OtrXBLkE_YwJe2QrZ6A6lhAjNDloCcPVoMhYnM8iVlsVT0UEeI9-RKJQ6vW2waQdljo4Pcbp3Iv3x_OfQm6AjrbpAXei-41ZwwBLZPs7LK-CFhAlQr5NsaYX2qpM5HZrEEgdtfW0rTQJP-hIlREfJxIhs08CZHW-H6tIqF1ZT9JdvK-Kyow7qVrrV9r3rCGTfrsP1hAbqNos0Btf0Nxjgbx9c-gHHWklQy_8wrMJmx1ZNoKkA88wWJAfa3YjgCQm7AKUWsbk3J_h6gBy8AaCuCwK_dXgVhA_eXrkX27UVZbk-7DljOVPOSNqVxpUd0O1myTj5YT--C42n1UrQfo73VibMMN7xq8ctmH62tSe41bia_VwgPBTVhAWna0n0kkacRKtsWfg4V9_x_2DGbzgR6UHCXs15F_BrYmSUBIH1XGNSHRVls_BNP3fC07oxxBXXUhKDfD6y7laVhAQDw55nqK9fwKg3hU53wFI34VBN_8JGU-eK0FMq0_4pQJqaXO1FO1eWVR5RSTyhin7dSfvKGggH8W1HQAH_LKcVhAh50WiSgkyEMumAiVZGGPE9w3vb3KAWF6LSYJdSJ3VHi329sNi8eZHYtA4gyvhuikNY6V7S1ioN-TdJtNNgHtalhAOWFHUcj41Pj5NsMSVIsiGFk3WkHTqZwRAR3gxQyxgm21oCd7shuwGBqURdti1DR-1cjEYEX9DqUcIt0anrv9MlhAeOZijtcDANFjQN56L27Mk4Qv6bPRfX7UscS9XXNHMw1NDB7Ou2ou5cAR73CaqvcGWGppktBSmrRMKTLlI_xuBlhAlqora8avvIVUVflGsrRfrBRqGO5HmASmKQdkjZMZVEbgsd_JQurxZ8XaCyeHmjcYmXjvU8l-fvH6AtcFRGUcFFhAumAe1Hdw5YAYuUB82s2gnsiP-fnbQZrz1DHOpuA2w28F2kMbR1zyQuM_O8Ym88uNAB7aJDWe6kcjlofHYbr6FlhA52wGooBExXb5xY-KbOecwJ27uVq2lK0CFKh_HSzrJSTl7IiHfIwXKRuvMFx7OqQYmZ6sHetgtlrSv-m08Is4OlhALK6EYL7zLSF2AReHVn0rtNlB4P3UWVFTRFXTuce5EkBl1Lb9i8Q96r2BSm2EgDab1DrhWfq3ejA6ppSLX-V2wFhA8qlzdkeOFVbaIPqe6yT34w2MBI4Jt5sCc6lf7jmfvJ7F1K3Jca5sOcLLtH5Pr-JVNe0ea2pUXTQwQSawQLtcM7AAWCAA9aZU0ZcD8Fn5WGGh384ZC67cSZRfFznfiG3ik3IEjAFYIN4VN03WH40eMf13PZ9tP8g0VcIJh3KPFx_85G6IK4qSAlgg5ibKY-wmQMF7Egs-Jr1b-PsPUjvLANcMb2alkquyyScDWCAHe73Xs0R2W_shAK0sQbz2i7Dr-pz7653_B4Uycm9p2wRYIAcr696X_ehqGVI3uuFDDChtOTGePXtvwyI-WKtHDVV8BVggVbanZ25fx60lwFldU9w-4gDFmShT9vrV6yuQb4hUfb4GWCC8btni1BWeV6UuubgVTmRSZEfHAMajMRrmZl-sM4VKOwdYIBozHAT8mSwm5bN8c8kaeL_sxawJxqHHmfCAvw1iFyn5CFggr4ZSLSCCjvHq3xrBTpu7Fq9Q9lOL4Jfv_KCOLEhDrQgJWCAui2A_gsPeCWx0kWbVWyWMiEApA9nCB7y15g3FUmOrkwpYIO9W1ChAPMPVpwymZH_gZRBm_oaoHw_Xt95S_CWpJ4YfC1ggq0Ghp9SJUMX7RbVNkTeWqdXV_UAauM8ont8doG26CIoMWCCX7--ONfkKKAXMZsnX3vglmQPNEuHHqeBkqS3MeQHEmg1YIG9Zx6gAAj0SBCh8kcutAxSqi3PLi64dAh7mYnSazz28DlggHiMmgOv9EwgvfN0reyOjsR0WowEzaz7mqNcBbtgjRxQPWCDbEvZUSMnVmYHIbqgRgV2E1WKaweGgLFD_JXQmEVIZG4QYKhgrGC0YLg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-05T05:06:17Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:17Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAWwFsZZpDZa8DoT59FNFD0Neh9Ik_DNbyYisInl9XSLaT1bLrpJobOe8zG6z9UUgobRvJjXELTxrl3kbanT9aV1gjgCQDqyGSZwZcZT-DsPhMs-6VqAdJj8x_Ivox1krqzSfHqNaYN1hA8QF1QD3fy5AdHwmOOK2Wnib6SlyhOTyAILnScnmPzGsxHVJyo5tMcSNgugr_Ib87ENTE2M4hsK9WAUVRQ4IXbFhAH1RTbD9nnZfPXkmkcUpCA0KjZHHbPBZY7uEd_5HLPZ4AF61j4NoK2QfH5NCNOmHVrySkQb7-jbjdSmpnhGxgSFhAziTPkMm6uAK09WPFTy0p15TJ9n0yCeBMwdI4kvTZ7mVV2Tkc6bZ3dAfrBTHbcnsuo6_mBUfo9qqi3JFe7gP3m1hArMg9aUitW2jHLhyKd2JDsakJPHvAful69crXk-wbpwjnNdungmvFrRKwdSsuH0-q2ckW5FkCswXFG5fki3zW3lhADDoXUWC7Hy5isSailjHoCsJP9eM8HYhhBD1Sp0pc4UOeIu7Dw7NvEe3g9B7dRzAG3qa0XokLgfbhp-y96yqcjlhAfQwj-ewv3AQlMgT0hYWyGvYjsLzegDbxlht1HvGHQa4pxsQ6mpJDDTRFrgzXkzqkiJ9Y004A5YTUbe_gT6bzd1hAee6Dbt9AFhpiOkuVpXbbLuYJp8vSsNHImYKaM0mQCYseNOQB5Tf-vEkUp7ZEyDxLh57Ip_-iRh8_pKFg2-kt5VhAASLHE9G7QFnqyjvynzMGpYpGTABlM_ILkjqYRehOea2H9g3BDbLrBlt0Peq2mw88eHDl3zxbcYqu_W6m_Rh6mFhAR1n8HMrrf9MYGuvHbW58v0TMMIrHZLG91GpsAr9X6M89xBYg11IMhgECfjwdPvnKQuf5CObmR1cjbqEA3jSGgVhASGex2Odx4izwOBFT2k-wLArcdEU4ZIp-AAJudPPX3BctlYTcYewNQgxpVpA4TyXrgEsFaKqicz7zDFjqZE8gwVhAq-DAYf4OgKyIkt_CXZU1S4BRe-J5Y5Yt_nrIbiHNlTaLExMLHornI02chjI_Db7u6kDNmvQWrD3xhTCGbptyR1hA9UuAW6p1mU8Mm9IRWK_v0bJQ8I3Dop28zzxBfBS09icti3gEuNRxv4m8Kz2yaYcfBQNHj3B2S378cyW_m6vDS1hAIlCXbDMkJT3AU2QWYNxNU57wNqObUeYARes_J0b5xqsGwp4We53X5LdP4BUVHpF7MIvSS7RcJ2HUaManQZmwRVhAQ1nu6iS8F-LhKzl5flNs2FOZ_iI_Dz-rAp1jNsUGSQwYkWaOfrPqcoOvJ2yvhRH-xb3_5ciAWtcK1WdxthcgNFhAU7GhSA6BuTj2GgIwkrguiBnEjN_0Sf1G3xH0efW8fPlmyLo50P76AuM2h4RV9VOUBclvTV3XftX1ZY__nu2CaFhAIlVslKZsI7QtfJ23UCctWi48GoYbAGDa3Mtve1VqYaMprQ38Ctcc29r10dTfn6ys6z_tpOhj69hjYAn_HZqbr1hATRmOk4l6C2QOYBZzBdgZDqxdewkQpSMF5awRlK57WcpigIxkXL-uRVZWZ5wrClN3WZSXky0Bgb0JQga2AnoXL1hAL2rnDUlsVa5ANcBxMCRVLNCTQrjNeDVJhlgijMgh0hOgpjnOJnBZnRAaOIswplUItihXts_AVl5ZfQOzZnYLiVhAUrL8zsFt3tWVc47UU-4KNZVCEZy6n5m_-TPrYYYLhJdJOUzCaI3n-wyTfqJUN1loHe2GPFAK45ojLmyje1o6LFhAVE2BX78BaC5Q8oL5tvM1QT5SCu92Ch81NjU0YjfqbBvd6E5pdBe-vyNOwCnND1c9O_g3MfKtOQ5HatTif_WkhlhA7jRo_WdatJbVmd7L9DawrJ7oDPEghCcZ0-JG7EbsQJzB1Fc4ArCqLzCgH83LfBVIBMuR6G8Lbg6wz_bHEbJollhAqBNkPNOA-Mua23N8KWpa7F5ZxJPkg1NsKbwBq9J1rHcB_DRQhicWHRE4gpzi2cmUpGwrfarLXS6NZLDTSQWHi1hA8mGFTC4gkYCOdZpsSrO52ov4Hx0i9K3McZT7rfQFuFjO6VSHE_sIiSoIE35vPK7btLS-W2RQwk-YiFbXwr3pk1hAcWRpMo-SobXP4rpOB5ucjCE-1UjvZ48HAgfCpQC_3t2w6AV95z84vV9Sa4D6mgBW8cGXNMTbv3jNF9eJijHv9lhApKVKtxtfOdW89h4BSljIChXayY5bf0MK_HVnZzBZ3fmnU4kzIgT6V7DTaKNhzOprQhx71V-wJNZJXnzQ_dv_AFhAY89fp8VKhjYIlJaIxSQIcqE0g85K-2XsjVidmxYGv1bGYXFlT5GxNWpHVKqlJlnzQ5-bgCds_ZcdvtD3nSTTwVhAca4G2et23B9RF5s6RLtmQ80XCuXqIn-odMlrReN4lrhZqMDfPSxAohyp4_QQwN80ZORn1LJYkjNpm69IUod9kFhAUO_Rv6hdOBi1_QdU2IafQc4vGXOb6qwHD-jMOzrDJ35DMpyXJwubik_ZtLvUQ_CCw33Ra3NK0Y9VWUSB6dHw-FhA3-IOoJN4l84cIPROpgdSTR_FAXFl58HsCmfbfYkIMMhKVXIE8QrmOVA5RxN-__2WRsTyWJd_qiRY6HjVPlBJT1hAiBlUhy3VGZpj8GrjhxMbvxRBBvRFtsmTRG0LnWy9GERYvTfrnJijCEwyJCdpTEn_bBux8AddIQUNIVRcqPYwAFhAF7-RO8tSfboJBuXn-9EPBjzY7iYVRqvq80fymH0kRk4Fop0MyZeALHrN2jAPzurSfvrj2eLByj2biJJF60877lhA5K2dcSlKe71Q-ESNkKWqkVvebHNbckNy-yO0YU4LchQOs00seQ9LGpxB-Hjr00DO5JS27VaZp6NDH_4HxmpJMlhAqHUpdMVj-32AhetreXBVK-sWWJ7IbrenbrccV-qOO4UBYZ5Nbu_smHascyXXXq-LL2xSSzeXPnxub6Hk2jpkrlhAmCnYp8Qewe1fmbiK4zuHtlNBjXdLDNyzcoI9-7hScHeWe-2uClEai-nt2arb4dTzOmE4wYpfLoV7hXZ3CiHgnlhAWrQKfULOB3xSaNGaae25Bct-kKj4YwLL14ab8hg7P055Pb5n6mws9iB0LAd3p1MdYBJOQsXoo2DUMQ4rcVaBc1hAWmeFyv8TfXUam2J6IneXpioy9VlsvEbJB4zefIjiDUwi5eORhwiKlqzu1Wcgwv4ktsPNKRIdLLgTV9GhiZbPVVhAdP5oTCfEyWfcM-EJxvMXUZPjPrz9i2JMMQObQp-LC37bj1u4QcNRDmGgR3rHh40DR9VEZrMg4nLoPkX85D21yVhAWCKRvXf36s524Ge0f0QIPoRErEChAgGgtthvJi_4a6mxOO1e1s9F5OskOFNEC1G1szkNuVyyCjf-SwJJ40SeolhAcWLnlOkoTfG0zIAaGtM_kB2V_vP0E2mGllCLwaEO9CrWc19IjshX6HbyyKcrtWP6iqLGnF-QTU51zMkTIGL8LlhAym3NeDH0DnkHiAT2UmuwXfjvQjF7rOXCq8Naq4UvoBCWzv3efgwfECuE70hQ3ZKZ0_x2VLYAGQ_QeUz9N5nE8VhAo_nwrdQV0HeuSElNrqQZ3Duy569tHbxwIzR3ofuRgJWOdtmYBv-e8_X91hf2gvuC1OtrXBLkE_YwJe2QrZ6A6lhAjNDloCcPVoMhYnM8iVlsVT0UEeI9-RKJQ6vW2waQdljo4Pcbp3Iv3x_OfQm6AjrbpAXei-41ZwwBLZPs7LK-CFhAlQr5NsaYX2qpM5HZrEEgdtfW0rTQJP-hIlREfJxIhs08CZHW-H6tIqF1ZT9JdvK-Kyow7qVrrV9r3rCGTfrsP1hAbqNos0Btf0Nxjgbx9c-gHHWklQy_8wrMJmx1ZNoKkA88wWJAfa3YjgCQm7AKUWsbk3J_h6gBy8AaCuCwK_dXgVhA_eXrkX27UVZbk-7DljOVPOSNqVxpUd0O1myTj5YT--C42n1UrQfo73VibMMN7xq8ctmH62tSe41bia_VwgPBTVhAWna0n0kkacRKtsWfg4V9_x_2DGbzgR6UHCXs15F_BrYmSUBIH1XGNSHRVls_BNP3fC07oxxBXXUhKDfD6y7laVhAQDw55nqK9fwKg3hU53wFI34VBN_8JGU-eK0FMq0_4pQJqaXO1FO1eWVR5RSTyhin7dSfvKGggH8W1HQAH_LKcVhAh50WiSgkyEMumAiVZGGPE9w3vb3KAWF6LSYJdSJ3VHi329sNi8eZHYtA4gyvhuikNY6V7S1ioN-TdJtNNgHtalhAOWFHUcj41Pj5NsMSVIsiGFk3WkHTqZwRAR3gxQyxgm21oCd7shuwGBqURdti1DR-1cjEYEX9DqUcIt0anrv9MlhAeOZijtcDANFjQN56L27Mk4Qv6bPRfX7UscS9XXNHMw1NDB7Ou2ou5cAR73CaqvcGWGppktBSmrRMKTLlI_xuBlhAlqora8avvIVUVflGsrRfrBRqGO5HmASmKQdkjZMZVEbgsd_JQurxZ8XaCyeHmjcYmXjvU8l-fvH6AtcFRGUcFFhAumAe1Hdw5YAYuUB82s2gnsiP-fnbQZrz1DHOpuA2w28F2kMbR1zyQuM_O8Ym88uNAB7aJDWe6kcjlofHYbr6FlhA52wGooBExXb5xY-KbOecwJ27uVq2lK0CFKh_HSzrJSTl7IiHfIwXKRuvMFx7OqQYmZ6sHetgtlrSv-m08Is4OlhALK6EYL7zLSF2AReHVn0rtNlB4P3UWVFTRFXTuce5EkBl1Lb9i8Q96r2BSm2EgDab1DrhWfq3ejA6ppSLX-V2wFhA8qlzdkeOFVbaIPqe6yT34w2MBI4Jt5sCc6lf7jmfvJ7F1K3Jca5sOcLLtH5Pr-JVNe0ea2pUXTQwQSawQLtcM7AAWCAA9aZU0ZcD8Fn5WGGh384ZC67cSZRfFznfiG3ik3IEjAFYIN4VN03WH40eMf13PZ9tP8g0VcIJh3KPFx_85G6IK4qSAlgg5ibKY-wmQMF7Egs-Jr1b-PsPUjvLANcMb2alkquyyScDWCAHe73Xs0R2W_shAK0sQbz2i7Dr-pz7653_B4Uycm9p2wRYIAcr696X_ehqGVI3uuFDDChtOTGePXtvwyI-WKtHDVV8BVggVbanZ25fx60lwFldU9w-4gDFmShT9vrV6yuQb4hUfb4GWCC8btni1BWeV6UuubgVTmRSZEfHAMajMRrmZl-sM4VKOwdYIBozHAT8mSwm5bN8c8kaeL_sxawJxqHHmfCAvw1iFyn5CFggr4ZSLSCCjvHq3xrBTpu7Fq9Q9lOL4Jfv_KCOLEhDrQgJWCAui2A_gsPeCWx0kWbVWyWMiEApA9nCB7y15g3FUmOrkwpYIO9W1ChAPMPVpwymZH_gZRBm_oaoHw_Xt95S_CWpJ4YfC1ggq0Ghp9SJUMX7RbVNkTeWqdXV_UAauM8ont8doG26CIoMWCCX7--ONfkKKAXMZsnX3vglmQPNEuHHqeBkqS3MeQHEmg1YIG9Zx6gAAj0SBCh8kcutAxSqi3PLi64dAh7mYnSazz28DlggHiMmgOv9EwgvfN0reyOjsR0WowEzaz7mqNcBbtgjRxQPWCDbEvZUSMnVmYHIbqgRgV2E1WKaweGgLFD_JXQmEVIZG4QYKhgrGC0YLg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:af3d007a-f869-45e3-99dc-e536735d9fe3",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:62f48179-f815-47ae-ba99-462044d132b5",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 588,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:0a35d012-42be-499e-a60f-f9ec854dcfbd",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 703,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-05T05:06:17Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:17Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAGS4xgH4cKuFThuwD7m_krba0Jb8ZMNNpjJBSiYuB48_maeygcl8GT8EnPfFZn93dTLvVmdRUwV70tlixQkCebFgjgCQC7XjZFQaaHSg5SW_ni7FuSKHaXACxY5Hu5vYUNeuRfWqYIlhApFF4DE0pC4hPr0WTNH2PITCBllLAIrXhvCtvwMF-alcXRUMVF99uXCUo4rfzS9m8T3Wu5j8E3d7ARoMhQKjmfVhAYIYkvk1ZTyKfiT5tWWCAt2fdg6eIHOExCAt4_y6gQjFWE7CLQ9bQeISGiDl3V16cF_rhRA5w4mql9M44k8JOnlhA6P_z7Oe5BC8YvMRpdLJm5F31Or7bzGml7UvUiXAiMQxecEd99I1tgTCCmue9XgceePl7wvUHWInn0JIr-_HhclhAf50glcu1pClthE6_4sid7yP2Lyydvurta5lVMbbTr21YdWkl95JFPs5Bvh_K-UJpbkrVa7ScxR1H8KelOIHisVhAjzlWa6C57oZAdtG-dUgVUI5vmiZ7Xq5Mz3PUKB8Czg5FyTlUmmeOH237QPZaS__XbxC0GxpLZ1gPoM5AKUO9eFhAnsGVBt_sLyCnpEgHj_03pxj6BjzWxetV85bwWQOjN3q_4x5CxaunmiufhX1KxPJUMUmVzNhcld-W1NMsayW58VhAS8pF6k3Efe2xIpnCze6wtYvG0WG3trq-iyteK-O9dk_Kp7Tjj_DetFabamFyvkr9qs1cT6_wEvUI1HyVZhXimFhAgCHNfbGaWjpaxbNmqbRPe2z50ilbZ60UecmxaGkhPLR_Ld8G2yBuMttZXikxunjMzEbwO6tr8EFNxIFXFtBaEFhA_s-7zesyFSNCRFa1I1AhLB0o8FhE-dFR515lMFK8DsdOSJ3Z834vmq_ekZ5gfVSh6w_jEQ6iRMdpSYZdVpPDGFhAglq1RAAqWoQK2Jfwp8-BQ7DnI0KMAbuKEnzk3tyYxJ8zEUVLuMjNuqs-arI7lJM7OeoDiSyLGE_vEADKE051llhAK1JBvURFuOfWYMFerVosmnevhFAYLKF1ph5HSmx0URKzjL1ivS75VdniLwi4qyEvYtEPgAv08uhs-Pp4uWOhklhA3qvAdyNFiGkbDFCzTwtkIJFy9olI4adUgWRJM9ugsGGEaGCh7yMRk2gP-brrNWnW-aAMM66Oj4QLWCPIzAio1VhAAPXxODMbFjTc-Dp_JYDgZ0bIvQ9JwyUZb7RPXRA4ZBC7QTWK0Q_yDB4zEkFF5Oplg0LJmdtGvp2joY6N2RfFPlhATF96xYCSyjJbo_YJAbORa9hLppIydMKbpbaHPbZKgmlrNbWq3XQ3zY8mJ7u_KOk0_S2ewT3MROW7M-F7cBZ25FhAW7VRG3u8Lo2bcu1d0dqLTfscmEEozQZZKGGv9cJ-9RBoDpbSn1nMTIn_KFwyjhgIghbbyl3fTx9oToiaa65aEVhAUJz61x7QAKtbheBzxnBjG0xy65iGJJJBpfO-xm-PBorHg_BfxvSmyBZqAlmAofd0v8cwU1czIJWDYAOMycR-3lhA9UvUFswgEGL9jEhnBWyOQLB1o_vpowLIUtKu6uADuZxop6Z6vs2IIEs8XYr2T6xFAAOsLXjdAo5U4ECJCh-c0lhAt0C6vgrKvDp57SyiuGYywLGmiVt8fNY6k20ix6VWr0MRAFB3O257ZDXO2PCNpHzCTvTAUPsmEEHFnn0OuSbecVhAL3_RMtDT7qK5-5Y8X7QbjzT823v0jkcaYKtZgJx3AbZsplD2WYcgQ7FHUwEvMias44FoUFGRLLjyYv5tj1OYeVhAlGcXfdjLRMqWhM4iqdKbsXeaBRj_nbVh_ts5dTB4q3pxEZleEouqt58KmuFfkyU3O0HSn2OB3WyjbQUVgV-Ps1hAJfprrjZCHVJsDHfi-umuhkFbkAMTPHKDyW3mNvEDYaUgOa_9d8GMRE229o9zV3JikFoFZ-TclEHiDjR-eE96_1hASnjFGsYDlohjtpVWGE9WI7xSanRU-dpnYQwdmQTOYn2Vzsoz-LCnI9rzSojucu6MyKyhhdPaF5Ad6ry3avGy91hAcglpPZqNsYf7gldI33-VPupwZ5dkLXeLzhosakLN9UV3FeXmmC-Jd-x7w3uJ05HE8n3VRlsd5QEPTUNdZHzyYFhA7jxtiIHcYKPWYSF26PDWFgZOL8cTfeeJ1meoT5KIAtiMwKZdUsKtDkH45m3Tc5UD__63jAS5l9CWiGEFW4RjvlhAB5PbpUT7oAevGLm1QbJibGjOQIHK--YUnGFrb7yRzVw-fD8ESIoueSYn6DJ547p7d_2YRa5EJIydhUkP-n3Y61hAcLvBRjLPCaQ1X6DkgmH1YJoiiyly0DQEhR2kXAnst9r2APFTKVwa9t6Dll7Lb_iHcxd2xgsY28tqFG_Ib0yLmVhA8YmrCAlWCtGntd7yW2LpfTgf7SPFPor9Tlv0SlhMms9PIZceB2pBOwoOtpVMSi1jYx6OQq5u5KSX6keUXE1iRlhAK8PbI8Mi7SbbcPC3MU3qh4A2ddpWExq0y-Ue267X7ggSkqJPErq6VY8LEuVc8AvAFM2EBWnWX66sbEedLz5gllhAEdWchFYM3_hz602mKCX7XMIZSl6K0JB943yjOCm2aR0AcQNfoMwbWEZer0577fq7x4YUpRcnFP4LpFQU2QFSGVhASnEcCzV5NMkYT6Q3-u0O8bmPiZ8o6MIhL7J9QOvjL7Ro8Z_sOFnAhmggxZGE3mBgMsS92SfwDNUfvyIdyPLFYFhAkC5p-lZVWiigXhsGsOvlRn8CCUlgMjNuKqUoP9GKhXxW_SkSN5gsShdFnRpUAVkXE_cUcNcak9yhZFzGd8NFplhAk1Q721kNujJzInyK6YL4cL1HDltVZfW2-hWpNhjOm4FPeRfG1daq9PRH8wJVi-e-2HfNhb4tzJPGuQxlNzH7JVhAguo9j-GPjR7B1_tG3Ncb8uHw7iaheVn4wVv_Xx-1ZQUXiq2NXBPNiKj8BB16gUKQgsw1KEnUyia7N691EdQQyVhAVTsrkB39aAgij0F2aHJmXCYFnVclc9yJbev-CdeWyHoC4BxnR3iGWYTh2i_SdzvgdFQw_asybsM2__-KpdwJC6sAWCD6CXOnITkskUS63679GuDRdIWmd7vNtSakAVL0iBRLGwFYIAdtWaC_j97YyX1KODs11bqLVyb3T27cZE2j2bB9H3kpAlggS0WYo9fKcmRbZ3In-Vjjhx7I-fktadF1YsUmxGXm6UgDWCCStWP_MSKaon-x1Q5OinmcPYXHROGBGYDXud9JnfVGHQRYIGAHX20OisuFVu08DaDNNzGSb8K8nz4KsdvB96-PO6U4BVggfvf_uARpOK7xU-mjWjpHn1-W5vonRoC4kAgkfDL1k2oGWCDlO_pPnAZjBHhVvSp1M5RgHnHM3rteEP-HeR7_sxv9cgdYIM-EDom8waSnPbL4lRjWHPFn2_Erm-v8XUQf2h-q2QxaCFggaAnYbcNN06hF3uZIJXjUGwAo8T0YYkKnpgZDA_wz3QMJWCDWlbOwftPmXITp15NHlBFFihUgz26l5MrUP6e15rbOZApYIH7Q2JqORVQEBEKhUuYWoezNod5us4QrkC7Uu4D2xZyYhBITFRY\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-05T05:06:17Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:17Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAGS4xgH4cKuFThuwD7m_krba0Jb8ZMNNpjJBSiYuB48_maeygcl8GT8EnPfFZn93dTLvVmdRUwV70tlixQkCebFgjgCQC7XjZFQaaHSg5SW_ni7FuSKHaXACxY5Hu5vYUNeuRfWqYIlhApFF4DE0pC4hPr0WTNH2PITCBllLAIrXhvCtvwMF-alcXRUMVF99uXCUo4rfzS9m8T3Wu5j8E3d7ARoMhQKjmfVhAYIYkvk1ZTyKfiT5tWWCAt2fdg6eIHOExCAt4_y6gQjFWE7CLQ9bQeISGiDl3V16cF_rhRA5w4mql9M44k8JOnlhA6P_z7Oe5BC8YvMRpdLJm5F31Or7bzGml7UvUiXAiMQxecEd99I1tgTCCmue9XgceePl7wvUHWInn0JIr-_HhclhAf50glcu1pClthE6_4sid7yP2Lyydvurta5lVMbbTr21YdWkl95JFPs5Bvh_K-UJpbkrVa7ScxR1H8KelOIHisVhAjzlWa6C57oZAdtG-dUgVUI5vmiZ7Xq5Mz3PUKB8Czg5FyTlUmmeOH237QPZaS__XbxC0GxpLZ1gPoM5AKUO9eFhAnsGVBt_sLyCnpEgHj_03pxj6BjzWxetV85bwWQOjN3q_4x5CxaunmiufhX1KxPJUMUmVzNhcld-W1NMsayW58VhAS8pF6k3Efe2xIpnCze6wtYvG0WG3trq-iyteK-O9dk_Kp7Tjj_DetFabamFyvkr9qs1cT6_wEvUI1HyVZhXimFhAgCHNfbGaWjpaxbNmqbRPe2z50ilbZ60UecmxaGkhPLR_Ld8G2yBuMttZXikxunjMzEbwO6tr8EFNxIFXFtBaEFhA_s-7zesyFSNCRFa1I1AhLB0o8FhE-dFR515lMFK8DsdOSJ3Z834vmq_ekZ5gfVSh6w_jEQ6iRMdpSYZdVpPDGFhAglq1RAAqWoQK2Jfwp8-BQ7DnI0KMAbuKEnzk3tyYxJ8zEUVLuMjNuqs-arI7lJM7OeoDiSyLGE_vEADKE051llhAK1JBvURFuOfWYMFerVosmnevhFAYLKF1ph5HSmx0URKzjL1ivS75VdniLwi4qyEvYtEPgAv08uhs-Pp4uWOhklhA3qvAdyNFiGkbDFCzTwtkIJFy9olI4adUgWRJM9ugsGGEaGCh7yMRk2gP-brrNWnW-aAMM66Oj4QLWCPIzAio1VhAAPXxODMbFjTc-Dp_JYDgZ0bIvQ9JwyUZb7RPXRA4ZBC7QTWK0Q_yDB4zEkFF5Oplg0LJmdtGvp2joY6N2RfFPlhATF96xYCSyjJbo_YJAbORa9hLppIydMKbpbaHPbZKgmlrNbWq3XQ3zY8mJ7u_KOk0_S2ewT3MROW7M-F7cBZ25FhAW7VRG3u8Lo2bcu1d0dqLTfscmEEozQZZKGGv9cJ-9RBoDpbSn1nMTIn_KFwyjhgIghbbyl3fTx9oToiaa65aEVhAUJz61x7QAKtbheBzxnBjG0xy65iGJJJBpfO-xm-PBorHg_BfxvSmyBZqAlmAofd0v8cwU1czIJWDYAOMycR-3lhA9UvUFswgEGL9jEhnBWyOQLB1o_vpowLIUtKu6uADuZxop6Z6vs2IIEs8XYr2T6xFAAOsLXjdAo5U4ECJCh-c0lhAt0C6vgrKvDp57SyiuGYywLGmiVt8fNY6k20ix6VWr0MRAFB3O257ZDXO2PCNpHzCTvTAUPsmEEHFnn0OuSbecVhAL3_RMtDT7qK5-5Y8X7QbjzT823v0jkcaYKtZgJx3AbZsplD2WYcgQ7FHUwEvMias44FoUFGRLLjyYv5tj1OYeVhAlGcXfdjLRMqWhM4iqdKbsXeaBRj_nbVh_ts5dTB4q3pxEZleEouqt58KmuFfkyU3O0HSn2OB3WyjbQUVgV-Ps1hAJfprrjZCHVJsDHfi-umuhkFbkAMTPHKDyW3mNvEDYaUgOa_9d8GMRE229o9zV3JikFoFZ-TclEHiDjR-eE96_1hASnjFGsYDlohjtpVWGE9WI7xSanRU-dpnYQwdmQTOYn2Vzsoz-LCnI9rzSojucu6MyKyhhdPaF5Ad6ry3avGy91hAcglpPZqNsYf7gldI33-VPupwZ5dkLXeLzhosakLN9UV3FeXmmC-Jd-x7w3uJ05HE8n3VRlsd5QEPTUNdZHzyYFhA7jxtiIHcYKPWYSF26PDWFgZOL8cTfeeJ1meoT5KIAtiMwKZdUsKtDkH45m3Tc5UD__63jAS5l9CWiGEFW4RjvlhAB5PbpUT7oAevGLm1QbJibGjOQIHK--YUnGFrb7yRzVw-fD8ESIoueSYn6DJ547p7d_2YRa5EJIydhUkP-n3Y61hAcLvBRjLPCaQ1X6DkgmH1YJoiiyly0DQEhR2kXAnst9r2APFTKVwa9t6Dll7Lb_iHcxd2xgsY28tqFG_Ib0yLmVhA8YmrCAlWCtGntd7yW2LpfTgf7SPFPor9Tlv0SlhMms9PIZceB2pBOwoOtpVMSi1jYx6OQq5u5KSX6keUXE1iRlhAK8PbI8Mi7SbbcPC3MU3qh4A2ddpWExq0y-Ue267X7ggSkqJPErq6VY8LEuVc8AvAFM2EBWnWX66sbEedLz5gllhAEdWchFYM3_hz602mKCX7XMIZSl6K0JB943yjOCm2aR0AcQNfoMwbWEZer0577fq7x4YUpRcnFP4LpFQU2QFSGVhASnEcCzV5NMkYT6Q3-u0O8bmPiZ8o6MIhL7J9QOvjL7Ro8Z_sOFnAhmggxZGE3mBgMsS92SfwDNUfvyIdyPLFYFhAkC5p-lZVWiigXhsGsOvlRn8CCUlgMjNuKqUoP9GKhXxW_SkSN5gsShdFnRpUAVkXE_cUcNcak9yhZFzGd8NFplhAk1Q721kNujJzInyK6YL4cL1HDltVZfW2-hWpNhjOm4FPeRfG1daq9PRH8wJVi-e-2HfNhb4tzJPGuQxlNzH7JVhAguo9j-GPjR7B1_tG3Ncb8uHw7iaheVn4wVv_Xx-1ZQUXiq2NXBPNiKj8BB16gUKQgsw1KEnUyia7N691EdQQyVhAVTsrkB39aAgij0F2aHJmXCYFnVclc9yJbev-CdeWyHoC4BxnR3iGWYTh2i_SdzvgdFQw_asybsM2__-KpdwJC6sAWCD6CXOnITkskUS63679GuDRdIWmd7vNtSakAVL0iBRLGwFYIAdtWaC_j97YyX1KODs11bqLVyb3T27cZE2j2bB9H3kpAlggS0WYo9fKcmRbZ3In-Vjjhx7I-fktadF1YsUmxGXm6UgDWCCStWP_MSKaon-x1Q5OinmcPYXHROGBGYDXud9JnfVGHQRYIGAHX20OisuFVu08DaDNNzGSb8K8nz4KsdvB96-PO6U4BVggfvf_uARpOK7xU-mjWjpHn1-W5vonRoC4kAgkfDL1k2oGWCDlO_pPnAZjBHhVvSp1M5RgHnHM3rteEP-HeR7_sxv9cgdYIM-EDom8waSnPbL4lRjWHPFn2_Erm-v8XUQf2h-q2QxaCFggaAnYbcNN06hF3uZIJXjUGwAo8T0YYkKnpgZDA_wz3QMJWCDWlbOwftPmXITp15NHlBFFihUgz26l5MrUP6e15rbOZApYIH7Q2JqORVQEBEKhUuYWoezNod5us4QrkC7Uu4D2xZyYhBITFRY"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:109f9914-1e84-4065-bed4-a383c7da004f",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:38ff8ec9-91e2-4f1e-90d4-ee09b4f63541",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:7822e7ee-7e2b-4046-b3dd-de76d6f06b95",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:50ffb1e0-85ec-4366-8f6f-2d340011e781",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30768,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:11a2d7d2-b0fd-4cdd-917e-ca02d869125b",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 341,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:c6072d83-4727-4ff0-8f41-c48f2ef2f086",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:51fdd4c5-a799-40a3-bd9e-c15cd4e3d377",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:2c6ae057-09d1-4752-bfe7-9e9007078d6f",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:0ecb9a7b-5fae-4c3e-9d0f-990906801f66",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:0529a220-190e-4b62-b531-853e9a285251",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:0d7180a5-bb49-4456-9a6f-bc94532ba8e8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:bf5b27e7-9b4e-4dba-a3db-1eccae954278",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:2f61ac83-cbc7-4efa-9842-5ff7da137365",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:8d84cb9c-3531-4964-a583-0278b52530f6",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "okbZYEkxKSi-0Z-pIfu-u",
              "ctx": null,
              "_testId": "urn:uuid:f30afe0f-4686-4ff3-9098-d01f339c65d6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 301,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "wBmjFYsULytuIuG46aH7D",
              "ctx": null,
              "_testId": "urn:uuid:4742f659-2e34-4062-a2ac-022affd04d8c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "HFcz7MpadBNyhcj4uossS",
              "ctx": null,
              "_testId": "urn:uuid:2a968f2b-1dc6-4cbe-afac-5873e8f76b88",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers 2.0)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:c6c6ace4-0b94-4583-818e-5a614b9eae2f",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:55a5164e-ea03-4e7c-87c6-773fb2c1265e",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 509,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:0f12d655-43bc-4417-9f1e-056dc927f387",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 882,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:2257366c-9c05-435c-83d9-cec49fa2cb45",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35279,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 506,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:28Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAREX_0kBvsYehVuwcK6Z3R_uvlWTDPZFVAAuweRUYfR5D8YdLD9DO_2HxRzY26W11O04VgUrg27AtZz3NAu6rrVgjgCQD3zU5s0J1-oed5gOfG5Ct1jwJ7ifZIDzDkyCGVPGP702YN1hArKBUbdTgmnT0yCo_YdM67r1bAYdbX09GMTeuMT_MpgxhTa9osYm4v0HZwdpwSqjrSx2SeOPzzJGrhWA-dk-rCFhACU0PFICHMB7Hg1l9cXZxrJPIA-zEQPj244RQ18OEEdRL3NO7Mx7sr6mFIzx2fNyltH1Qla3szguDDbUto4-4wFhAc1945UJvNtN2zFj9xZWiklX7zdUcA2wLoi5SWM2m1JvYGVtb_zTjjCCbXa-uvlOVBCMPdUdwTJKbmTvAF5hg7VhApb-r4hlOj7RY--1gx4AHYQ6OzvPDW5EUc9Pj4KZ1_WvdcVtjVvEIX_bVjO7xGBt3Gof_6mDoO5upF5Z-HGJjGVhADKd9w3sDXzXzEdsWecqDVtkKBQpZdc95YsQN5hL01OzbsCf3KDUCrV9bS68CNTYbdYFdLoijMzxlKB37L1nI9lhA6DsgkKiz6NMmbFEQr5z2HyuJl3mxZ4bI_4rpTYvAuCu12ETvaEAaaygNUCEZZLfcunyFsMtsDEXluJuB2P4U11hA4QX2GAprT3GXUQWI5kmpyKljzL8LhGWTApYhQIydDMt__QfLtN5agqoENaHtw6FJQklNIBhanepnGtRXhI5WvlhA5-O6bbVdDu0B0HHNMa--r1ncwTVF3sN2qQvXe3gfwybsxzzLExKxMMmCeoCmzvTq81URpAgduLgX5LXGQ7HAoVhAzh1nWG2oGr-nB9kS4F462w43Qigq3q4iIGuWg-yueWY8pprf5iGZVCgKpD3AbeaT5_hIOfDmjRxaX6jySA_o6VhAUAXaoBypAZg1x0Qb6OHilNjvO-z1s3QFYQcCUxELIsmg1l9JQuQhXgiGmCyWrzBAB9CnGJg-Fp1KcCXmRB5j6VhAyDBUubv3H0vqVO7CVhTSu0O7OsNabicE4qRv4pJBnSjMEb_vvQgAWehMRQtJfi6WKFtZlZu7-B3Mt76W0yKsDlhA7EKEf12rLOTDeWiChpBQxTeiWdPpC3xLCkerkXvjs2pHbnMzaDP1aLhK1umXqWcvqhszmQcVY2rx11NTghDCilhA07IYia8aHLuDziEeFdczOfa933JFsM1l5sdmIp5RFKgmkCH7S6R0Pkz-lnBXNSfr-_dNFK42W2brLAHdb2-qxFhABEalOEnto6GTALgjAc0GhX1HjM2eXDTWEb55ckJ5jfHTbC-t0SCzMfnbLXiAsZOR1sGogsytAiSAtxd1MuEfAlhAdZm_x2XVywmQS-p6-x0wEoPZIKF9waAU8KTl_t7XCaqgE7xMOCcANDb6IaHbfzEeRbwakmy2GRGwvG_xr_W8NlhASkYFPNyHoofPgfFEzbGO2b4fIKah8oPI0owAiyGVuKZA19GMKwOGCBh3iLWx8dw9mAhXECAYngdpomYxQGSRe1hAL61DlUf-2ZsopAiMr9odpd8yGScNWoasygUEhorme_FoMmcaGzrtS8hB_-qpOISqxwq72q08QpZF1LXvB7zeIFhAdIFrZH0922zx9gKu5z2HPJ9eZA-KTTCeIMHUAbd6J7ebpWtbDlOH0tBFEXKVfiLEnAa8AoXPrWlbNhBx57fnCVhAryPHXRQoTZ2oDvD74Xuqm5PoLF1Qa5yBag2vpKa_4CreJG4tVpn2dX56jhnFFQK7sp56DPU80eq9B8D2L7F0-1hAg8uC7NAZvc3m-1p4hLynvmkFt2Du2kpFm7BTIVP9cLA0r8dMzrIsP2t7pEsf02eLZg64u748lj7_4cB51zk4BFhA17DBzwSty1fPpQ6OhXDlexkeXPLYZdjb24mgp3xrLGYq7OTO_TiykQfe5BBJaJbNvMRh9H7C5PvwGxOMYlhsL1hA4oR2kLJ4HxiFublK0RC7TsDCNFuTz8RWiuYw-kenizMxd6bhkrQkAZeJBapnEM1iG35v_bIKa0_biUdm6Bg9QlhAcefdbkV1picjTjroIBWC7TFJLIcJu8pK9WM4Hs1ZFW6tHIdEOy_9UC2sMJfMVw8avTvI6p-C_5ou2ipBTMUO0VhAssxTy7dYNpbVe3Qe0vcoaGpjHak3T2IGrsdpRtKp5SEaJAOg5DFPXX8lYANV9sYIaGQELApVRVZ4BqayAs7K-1hAyxDJsYbyfOv7AeaPjDQklMP9idO8yTprSeE0O1LfKG0XkS0xBPq0iUUxicmkn0SMneZPd2jxbYjy2c-VXFQvFlhA9W5qF8-z7BIrCue7ZtqAc1B8PQwPMm__k48hBEzN-ikQ3guD0X6TPm6F_ktQk416JJH2m_x62iirpKGM2wystVhAPEw0C58OO84L5jTevD7p6SBWuwfoOnXlJkjzxHDTmyD67semrRY0d80qda3UArMAoM-UQxwyr7UATC_Ey3JWGVhA8fm2L-zoj-9z_i2LkQOfg2XRSaKVIMj0s2VSu4DbBz3032LpReI9VEmwONpuUwYDk_bT0QRVbum498zkbGF3y1hAtqmNuGxtwKaRbOB8ZvhLyhl-o8FS5PLkvxMnFt0n-MNGL8X4A6eP41WuRufJFbqxxF4JQXaSp972c9ByJJxI71hAUolpk3kmNr53wU2hjlGUhL8bM_czf4zQDkeUTqx2CjTTaJu6RDzf_P4sVdopq7jiUmIL61mu5-K3RIy1t1vA71hA8s-Ubik2BdHxxAaxB8LmKNwjTZH1vj3I5DFuSCrjy5bwTP1zW6uBvLancSUXgUyPwsgXjB2HvVVKNyL6pm406lhAIpt2dyBGkMXTYtQtbvtyu6JmpwiiorPr3dFoSuNPuXFXXBAtULMqnQBzjGhyFtpfsYW-tjVUm4F83tlACIi1NlhA46cL286Noh6e51sH93T4q7JTZWoAUjfAVdKWr6Vj9wdp5JmbDK093Ss7aOiEej7mDZL1A4W4_IAJ_irybtPykFhAbchQa0TcQMJ3K2c-Yj9ySA1xuP2Da5WVjm20_lspx151WgEhT3p4Nhsurt32eD3zcTeq-b8ZH0CbDH9YnV8tnVhA6rY7SnRrJ9oxdbTEs0DUg1GzkgpFckviNoYm3mvVRIJ3m32hmvtM0IrdvFvAsO-AF-CTpaNNmChbe2zHyHrDTFhA1pkyJe5PbGCNTxtLjcluxD6VafibP8_uefvNMz5MDmm0CkGEA-4xlPeb-FNS3Y0d2jmkpBTEJAVhwGMgwzcFP1hADyw3Al8Pp1LPg3RMNChHknWK3y8O-FODv10CWUF7Sq8qcB6YLMHx4Q9LZQIiEKIOLyqfQijUkGiybQkAXfr-r1hAEySbfhpIZNhJVna1jnlM9aobZozSuLQu1HuNBIdTuUQxbBCvccqNTS5HRjsCTy7vfDW9Vh44DuuIq75fQK-KnFhAU-OCDJCJisug4VK2Uje62Oupub4RkFND5WsuXFy9zpkhKODS42soJkXcRIFEiazkazRiixDGgiLuP6TJKnXeWFhAj0lfmDTi9x3Rva-MjmDE1K9MVMcw9JBMKFuDALEBiahn9bZIaw-GvnMCNX4DbBwQPoBLlV-UFNuO_ujODN3HIFhAugC7PID1wfezGmBkI_DgfAsEjZZkEDI9VTJ1O6ySLNI5cQWVijqEQ6CLjM9SQcdec8hEXzYKOwz7a6vLqYeMp1hAkqIhFxLG0x96pPJYCHBV59ygfd_N1Mb9PTm_A8kSLEK4XX9fa0A5s6_Q7k-TZGZnat7pwnfg98CM6_yLIJD6u1hAEi8_n0rILrbofQPT1BiDfS5hZO6ED3D3rFPJAmTv8CGUXZ7DgCYahRlMmfRYOly4E9khe6CoWQBrkYC82j6qMVhAEanuxNYRw6Wfj6EnsPflMm2TaQQg2TSrcX21VOCDi_Up4Hb2WCnHVmRTwLWcikmXeKxncGgP97MsWtK9_7e4q1hAYwke9lSh2LJqVyzzSgw9LAMgr7TRfE5qAmhMEvTw0ZepKvCHhqWZw4SNdrvD8RpThDWhkvyN05-t2RqcG5LVglhAxXu1nbdBb2kJlV3MP8zAcf1fejHupNUgohUQiK2GCSqMdE45u4y_zFvaqXfEuPilfe06uFCWucxRDx7iu4IikFhAOfRmyO60Ix3_YvxTKdX4HweARCwAtseT5uiDtMwjYNcXaZtweMgtoOylpPL-Li7Ff5s725pl-tRWWlqYUsPRpVhAIv3sq3MT70KzVNKCkS4ZU0IXvy-PYHO0_3HkS92dY58bo_IvCrWpWs0Trzcrg5iyNFg3laeyUNCvzFJclAy8ZFhAd6-TyLdqjZ9b6bZn-HWnnlFx_92j0UbJaeVfLSG5slS8nV8E_MopAhHLbPJwZmTX25CYnMBpStrEB7S2LX8UB1hAj5riczeQCOyz7ehzAXBszZf1Ug-ndWDm9tdNP_lwR5AFjcTLChAdQV-NHMiTHTu8wKLRLP7skfCZFvhmAsV5flhAiCAbXHRcnOOBrnzFGllI-VFsy040OncaSp02GqFBR5O2wO5rt2mujYqb67JJS8Ocf2frBzS2mRgfjREESLH79VhAyksVf42pitM9175WmCzTMEj6NHN9p9hGwGIWjCP0LyKd6tuM98K0Py4e6iDd5rRKQ49QQr0Ah9jXA12aiU8u81hAJjsI9VBVH0viZZQebygL65yYSNhFeGfmsm_49lj9p_y1FU9pqyE7j9dluSh4C94R2bXlGt2sdh4Jia5QoZnHLVhAgKOXpcUmJW3xGeQGxvs2MkUhJehOFeTK6m0PelW_xvfeLU_0Bm7zv3XGsyvLyZ7Qjjly3-6WGsxpMh0wlPm-ilhASMLePSRt5odUj652ToQvpPi2AS8PwK2fSXdsIhiEDA464EiLhwfdMpt42PyXoT7h4Mvnj_fJVVbdAhpMKeweCbAAWCB1mg_n4w1jgbH25r9rTxcWI0k_0BC5jMufF57mR-GJqAFYIMq_zHhwotianUhUFqQpwtvY-4Jbr_RPld9dpGzHIQPIAlggO3dbSB5U7SRYZ3dnyvI0U5fJK3N3xpPncjU7ycLjh6oDWCB7wxZRVbSFNEiyK9tcX7JqH8UG_lhK0LWRC65Q9yDSVwRYINmhMEb0OFc1IYfXDpwSO9SKBHZEL6YxLoyIB-jpkwHXBVgg7C4r8aaHZROnF8CahjGGqMROGoPPTIuzgdALUh53k4oGWCCoLggzV7Udq2mAflTQscsrj3PKjEk7uy3V_ZySXVEjuQdYIG0a4vbgemJiII7e79totGeBIITq6PgZDMTtgFty3y_eCFggWpPgJhinBWFLo0JONPxl9qmoUf8ifBahsDoWxw9thMgJWCCWIjxBHP6gGNvxHCG15T-0qdEKGARpc2JN2W_3AfwGFApYIBhqq9a6NzhPqhrnx3SX3yIzzDIIMINXzGsuWTTlEMQBC1ggItEnFxA22OjCdOP7IJrsjd3y6RNrB5NA_KyEwbVYChUMWCCReT2AUM5PHkMK2PnQk1vIoFO1MsEIjZJWyh1AWhnrlQ1YIAn5Dxg7j8CfWZkeL779RGRhsNzDzIZh22yJ7Br0C4nJDlggQfSQ9oXw6afGB3bmnuFQrbVRn1k0Efmp6w2yPsfkgrsPWCA00OuS1qHXDqoizc9cnF_RK4vTGglwP8l6J_8j64GyHYMYNhg3GDk\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:28Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAREX_0kBvsYehVuwcK6Z3R_uvlWTDPZFVAAuweRUYfR5D8YdLD9DO_2HxRzY26W11O04VgUrg27AtZz3NAu6rrVgjgCQD3zU5s0J1-oed5gOfG5Ct1jwJ7ifZIDzDkyCGVPGP702YN1hArKBUbdTgmnT0yCo_YdM67r1bAYdbX09GMTeuMT_MpgxhTa9osYm4v0HZwdpwSqjrSx2SeOPzzJGrhWA-dk-rCFhACU0PFICHMB7Hg1l9cXZxrJPIA-zEQPj244RQ18OEEdRL3NO7Mx7sr6mFIzx2fNyltH1Qla3szguDDbUto4-4wFhAc1945UJvNtN2zFj9xZWiklX7zdUcA2wLoi5SWM2m1JvYGVtb_zTjjCCbXa-uvlOVBCMPdUdwTJKbmTvAF5hg7VhApb-r4hlOj7RY--1gx4AHYQ6OzvPDW5EUc9Pj4KZ1_WvdcVtjVvEIX_bVjO7xGBt3Gof_6mDoO5upF5Z-HGJjGVhADKd9w3sDXzXzEdsWecqDVtkKBQpZdc95YsQN5hL01OzbsCf3KDUCrV9bS68CNTYbdYFdLoijMzxlKB37L1nI9lhA6DsgkKiz6NMmbFEQr5z2HyuJl3mxZ4bI_4rpTYvAuCu12ETvaEAaaygNUCEZZLfcunyFsMtsDEXluJuB2P4U11hA4QX2GAprT3GXUQWI5kmpyKljzL8LhGWTApYhQIydDMt__QfLtN5agqoENaHtw6FJQklNIBhanepnGtRXhI5WvlhA5-O6bbVdDu0B0HHNMa--r1ncwTVF3sN2qQvXe3gfwybsxzzLExKxMMmCeoCmzvTq81URpAgduLgX5LXGQ7HAoVhAzh1nWG2oGr-nB9kS4F462w43Qigq3q4iIGuWg-yueWY8pprf5iGZVCgKpD3AbeaT5_hIOfDmjRxaX6jySA_o6VhAUAXaoBypAZg1x0Qb6OHilNjvO-z1s3QFYQcCUxELIsmg1l9JQuQhXgiGmCyWrzBAB9CnGJg-Fp1KcCXmRB5j6VhAyDBUubv3H0vqVO7CVhTSu0O7OsNabicE4qRv4pJBnSjMEb_vvQgAWehMRQtJfi6WKFtZlZu7-B3Mt76W0yKsDlhA7EKEf12rLOTDeWiChpBQxTeiWdPpC3xLCkerkXvjs2pHbnMzaDP1aLhK1umXqWcvqhszmQcVY2rx11NTghDCilhA07IYia8aHLuDziEeFdczOfa933JFsM1l5sdmIp5RFKgmkCH7S6R0Pkz-lnBXNSfr-_dNFK42W2brLAHdb2-qxFhABEalOEnto6GTALgjAc0GhX1HjM2eXDTWEb55ckJ5jfHTbC-t0SCzMfnbLXiAsZOR1sGogsytAiSAtxd1MuEfAlhAdZm_x2XVywmQS-p6-x0wEoPZIKF9waAU8KTl_t7XCaqgE7xMOCcANDb6IaHbfzEeRbwakmy2GRGwvG_xr_W8NlhASkYFPNyHoofPgfFEzbGO2b4fIKah8oPI0owAiyGVuKZA19GMKwOGCBh3iLWx8dw9mAhXECAYngdpomYxQGSRe1hAL61DlUf-2ZsopAiMr9odpd8yGScNWoasygUEhorme_FoMmcaGzrtS8hB_-qpOISqxwq72q08QpZF1LXvB7zeIFhAdIFrZH0922zx9gKu5z2HPJ9eZA-KTTCeIMHUAbd6J7ebpWtbDlOH0tBFEXKVfiLEnAa8AoXPrWlbNhBx57fnCVhAryPHXRQoTZ2oDvD74Xuqm5PoLF1Qa5yBag2vpKa_4CreJG4tVpn2dX56jhnFFQK7sp56DPU80eq9B8D2L7F0-1hAg8uC7NAZvc3m-1p4hLynvmkFt2Du2kpFm7BTIVP9cLA0r8dMzrIsP2t7pEsf02eLZg64u748lj7_4cB51zk4BFhA17DBzwSty1fPpQ6OhXDlexkeXPLYZdjb24mgp3xrLGYq7OTO_TiykQfe5BBJaJbNvMRh9H7C5PvwGxOMYlhsL1hA4oR2kLJ4HxiFublK0RC7TsDCNFuTz8RWiuYw-kenizMxd6bhkrQkAZeJBapnEM1iG35v_bIKa0_biUdm6Bg9QlhAcefdbkV1picjTjroIBWC7TFJLIcJu8pK9WM4Hs1ZFW6tHIdEOy_9UC2sMJfMVw8avTvI6p-C_5ou2ipBTMUO0VhAssxTy7dYNpbVe3Qe0vcoaGpjHak3T2IGrsdpRtKp5SEaJAOg5DFPXX8lYANV9sYIaGQELApVRVZ4BqayAs7K-1hAyxDJsYbyfOv7AeaPjDQklMP9idO8yTprSeE0O1LfKG0XkS0xBPq0iUUxicmkn0SMneZPd2jxbYjy2c-VXFQvFlhA9W5qF8-z7BIrCue7ZtqAc1B8PQwPMm__k48hBEzN-ikQ3guD0X6TPm6F_ktQk416JJH2m_x62iirpKGM2wystVhAPEw0C58OO84L5jTevD7p6SBWuwfoOnXlJkjzxHDTmyD67semrRY0d80qda3UArMAoM-UQxwyr7UATC_Ey3JWGVhA8fm2L-zoj-9z_i2LkQOfg2XRSaKVIMj0s2VSu4DbBz3032LpReI9VEmwONpuUwYDk_bT0QRVbum498zkbGF3y1hAtqmNuGxtwKaRbOB8ZvhLyhl-o8FS5PLkvxMnFt0n-MNGL8X4A6eP41WuRufJFbqxxF4JQXaSp972c9ByJJxI71hAUolpk3kmNr53wU2hjlGUhL8bM_czf4zQDkeUTqx2CjTTaJu6RDzf_P4sVdopq7jiUmIL61mu5-K3RIy1t1vA71hA8s-Ubik2BdHxxAaxB8LmKNwjTZH1vj3I5DFuSCrjy5bwTP1zW6uBvLancSUXgUyPwsgXjB2HvVVKNyL6pm406lhAIpt2dyBGkMXTYtQtbvtyu6JmpwiiorPr3dFoSuNPuXFXXBAtULMqnQBzjGhyFtpfsYW-tjVUm4F83tlACIi1NlhA46cL286Noh6e51sH93T4q7JTZWoAUjfAVdKWr6Vj9wdp5JmbDK093Ss7aOiEej7mDZL1A4W4_IAJ_irybtPykFhAbchQa0TcQMJ3K2c-Yj9ySA1xuP2Da5WVjm20_lspx151WgEhT3p4Nhsurt32eD3zcTeq-b8ZH0CbDH9YnV8tnVhA6rY7SnRrJ9oxdbTEs0DUg1GzkgpFckviNoYm3mvVRIJ3m32hmvtM0IrdvFvAsO-AF-CTpaNNmChbe2zHyHrDTFhA1pkyJe5PbGCNTxtLjcluxD6VafibP8_uefvNMz5MDmm0CkGEA-4xlPeb-FNS3Y0d2jmkpBTEJAVhwGMgwzcFP1hADyw3Al8Pp1LPg3RMNChHknWK3y8O-FODv10CWUF7Sq8qcB6YLMHx4Q9LZQIiEKIOLyqfQijUkGiybQkAXfr-r1hAEySbfhpIZNhJVna1jnlM9aobZozSuLQu1HuNBIdTuUQxbBCvccqNTS5HRjsCTy7vfDW9Vh44DuuIq75fQK-KnFhAU-OCDJCJisug4VK2Uje62Oupub4RkFND5WsuXFy9zpkhKODS42soJkXcRIFEiazkazRiixDGgiLuP6TJKnXeWFhAj0lfmDTi9x3Rva-MjmDE1K9MVMcw9JBMKFuDALEBiahn9bZIaw-GvnMCNX4DbBwQPoBLlV-UFNuO_ujODN3HIFhAugC7PID1wfezGmBkI_DgfAsEjZZkEDI9VTJ1O6ySLNI5cQWVijqEQ6CLjM9SQcdec8hEXzYKOwz7a6vLqYeMp1hAkqIhFxLG0x96pPJYCHBV59ygfd_N1Mb9PTm_A8kSLEK4XX9fa0A5s6_Q7k-TZGZnat7pwnfg98CM6_yLIJD6u1hAEi8_n0rILrbofQPT1BiDfS5hZO6ED3D3rFPJAmTv8CGUXZ7DgCYahRlMmfRYOly4E9khe6CoWQBrkYC82j6qMVhAEanuxNYRw6Wfj6EnsPflMm2TaQQg2TSrcX21VOCDi_Up4Hb2WCnHVmRTwLWcikmXeKxncGgP97MsWtK9_7e4q1hAYwke9lSh2LJqVyzzSgw9LAMgr7TRfE5qAmhMEvTw0ZepKvCHhqWZw4SNdrvD8RpThDWhkvyN05-t2RqcG5LVglhAxXu1nbdBb2kJlV3MP8zAcf1fejHupNUgohUQiK2GCSqMdE45u4y_zFvaqXfEuPilfe06uFCWucxRDx7iu4IikFhAOfRmyO60Ix3_YvxTKdX4HweARCwAtseT5uiDtMwjYNcXaZtweMgtoOylpPL-Li7Ff5s725pl-tRWWlqYUsPRpVhAIv3sq3MT70KzVNKCkS4ZU0IXvy-PYHO0_3HkS92dY58bo_IvCrWpWs0Trzcrg5iyNFg3laeyUNCvzFJclAy8ZFhAd6-TyLdqjZ9b6bZn-HWnnlFx_92j0UbJaeVfLSG5slS8nV8E_MopAhHLbPJwZmTX25CYnMBpStrEB7S2LX8UB1hAj5riczeQCOyz7ehzAXBszZf1Ug-ndWDm9tdNP_lwR5AFjcTLChAdQV-NHMiTHTu8wKLRLP7skfCZFvhmAsV5flhAiCAbXHRcnOOBrnzFGllI-VFsy040OncaSp02GqFBR5O2wO5rt2mujYqb67JJS8Ocf2frBzS2mRgfjREESLH79VhAyksVf42pitM9175WmCzTMEj6NHN9p9hGwGIWjCP0LyKd6tuM98K0Py4e6iDd5rRKQ49QQr0Ah9jXA12aiU8u81hAJjsI9VBVH0viZZQebygL65yYSNhFeGfmsm_49lj9p_y1FU9pqyE7j9dluSh4C94R2bXlGt2sdh4Jia5QoZnHLVhAgKOXpcUmJW3xGeQGxvs2MkUhJehOFeTK6m0PelW_xvfeLU_0Bm7zv3XGsyvLyZ7Qjjly3-6WGsxpMh0wlPm-ilhASMLePSRt5odUj652ToQvpPi2AS8PwK2fSXdsIhiEDA464EiLhwfdMpt42PyXoT7h4Mvnj_fJVVbdAhpMKeweCbAAWCB1mg_n4w1jgbH25r9rTxcWI0k_0BC5jMufF57mR-GJqAFYIMq_zHhwotianUhUFqQpwtvY-4Jbr_RPld9dpGzHIQPIAlggO3dbSB5U7SRYZ3dnyvI0U5fJK3N3xpPncjU7ycLjh6oDWCB7wxZRVbSFNEiyK9tcX7JqH8UG_lhK0LWRC65Q9yDSVwRYINmhMEb0OFc1IYfXDpwSO9SKBHZEL6YxLoyIB-jpkwHXBVgg7C4r8aaHZROnF8CahjGGqMROGoPPTIuzgdALUh53k4oGWCCoLggzV7Udq2mAflTQscsrj3PKjEk7uy3V_ZySXVEjuQdYIG0a4vbgemJiII7e79totGeBIITq6PgZDMTtgFty3y_eCFggWpPgJhinBWFLo0JONPxl9qmoUf8ifBahsDoWxw9thMgJWCCWIjxBHP6gGNvxHCG15T-0qdEKGARpc2JN2W_3AfwGFApYIBhqq9a6NzhPqhrnx3SX3yIzzDIIMINXzGsuWTTlEMQBC1ggItEnFxA22OjCdOP7IJrsjd3y6RNrB5NA_KyEwbVYChUMWCCReT2AUM5PHkMK2PnQk1vIoFO1MsEIjZJWyh1AWhnrlQ1YIAn5Dxg7j8CfWZkeL779RGRhsNzDzIZh22yJ7Br0C4nJDlggQfSQ9oXw6afGB3bmnuFQrbVRn1k0Efmp6w2yPsfkgrsPWCA00OuS1qHXDqoizc9cnF_RK4vTGglwP8l6J_8j64GyHYMYNhg3GDk"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:93f79e13-c3f6-42e3-89b6-d517427dfae3",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 216,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:28Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAanHhcH9XXfu-KIP4jVr2G2X7DeUIFCrMdxqsVbSOUc4sQtNv2IKPMvSOl7606CZCTrUGH6Xuw8om3rC8bTLJnVgjgCQCALOvaofYIPjBqqJGEdwy0Q2vkWP4lJPOHX0irgwAFjOYIlhAPZz5H-8ZXzwmhwny9v0hrEtjv5i28T0g7sHVnyrsZj_rleHut4E0r5ywNzopE7fhWG0Tuc3wi6VMH19lCViZTVhAyOLw_crugBfPxP1VlYczlNn-Tq-qeTT3vuLw48DDFhVdee4zTCGab3cVteXAPlre2x47LUUMPgn2TxBctk84YlhA3EyrTuYCkQoRZ2zpf2g_xWGraVra8YwNeRqwvWMJ6MPODvBR4FrvJhZbX3d9SAcyaLmUcsBx_OFC-7a_6thA41hAVOWm0VG8VZOPEQYw-j5tDJzfVS2-UgOE5i8nlx74FA4bWlwmWNEQVIw_BlYJ88NcyJ8V7AZJPGZqHImDcPSjSVhAGrNzTD3_uyhYotpbW1PxUBDFZVmwNWWG8Pvk6j9etb5U_CNiCsG4w_t8KwyOd26SC-QcuvTltYKdfB08xVRWTVhA9LBGKCzVHNfNxWcnsZFIRlKUOwcoFRSwQDC2wDcNWaXXiLcAO6jtMXTv6ZDw-tc591xObmLc_DsCABvZ6r5bJFhASPjuGQa_VkV62KFvzdvzZwZO3Jfo0Deo2yaJv_MQmy9ataRboUguoklHXcAFVv4i_TYg1o9dwp-SUvnU23_VGFhAeT5lHSVjCb6CPSuBB-9MRaVLUZY0BDjYboVVKs-5uXtCF0TJL6I2Nd9qzvKk7-7IIcTcBcCnYAT57ow1xjdmyFhAl2VjEK9gUR6hQ3lGh3ChrJi6jqHXu_JPOVR-rSyAF5b2CJwkgJDS7JhX10kp7FQLTVAsdT47NZDv52pf7eE6Z1hA6VzGKljv6PABXE_hb8pomgZQHy2jta3O46JwRn_oluvcxo1wbO0HZG3oA-DkzEGszRtBrndSy-N8s4QI7nG1RlhAzZAAj8l5jgr36jpgTFrXkA9R9znGRmegn0ky0ddzxQF8YdK8zDy5EbkPUAQHcTaIewLwz7Lg3NwwiE5gqZQv81hA1XDFmMzRvVi2f_FYLE6tX9diC8zDzPpJQA96h8g3r1WSZ26_tjYGuabdIAzbpy3hOyu1okp7oUHMFapr1_jw-VhARNV0QGoqBvhLXYmWc-93-7VM6cZrucJyoU_Tsg1SMGyZwe3WJx8CaBv-2mUUnWih638SglSfw5XdXYI5Yvnr6VhAxfLnuVCXcfm1GxAs0kYkDBy8l4-nSStXqyNFsN6DCoqZgJE-Iq6J0qJsNSf9S4xDaXJ8H2SYA-B1DuKf9o6KgFhA_bYwpesGobW8VcORTqS2e4LFeP_5oJlLx23WMktIaKuO59N8AHY5PTFdFkdDY-f0M_1H9y3jr_r6oFib-s55flhAXp19Q5toY0hidIppUShyxOEUcNh17ynd4KteGKEQKJK5R50iWe51jkgDXAfqMNC-m_kMslh-NO61lEfwQf2-CVhA7fi7ftkUmQKS6kzP7khCnEQaw5aMndv__w0e-zmjSugSIBsZuH9DgeL2bsS0qAFt5BeGrGV2OGGdrPiiRSbyWVhAt9cJNAGdvRTEJax5tKooem26v7TaNiq8LQm1hglk_SPshPxkUZhf598y_5PSj2SQpxLxccy0EedzAhj8hSQ_jVhAA3lOAPYyd78GjNkjkRqVuucwyYZCh0mpm2Y-ji_FLHVTyDzMnVindVYEDkJy8r-l_pPOtisJ7JTJU__6PPZg9lhAoadbpC8vLY199OThuP1ecbnLvf4q-zcu_5NChZ2_4NzMMVGMHescw03ccxDAGdq_hsDjZGTS21viILtkl-k6bVhA8RzSyWnjxDeeC0mGC6VtFTHdUsr4BOQ_mZnQ_kv4KcWvIduFRjBLf7whyVnQM0HBKPQwEbZK9nny_QNEHmGjo1hAZQXotMlYzWuH3v7fSYVZSDs6MzRwY2VFqQ-n-6LSLGX4migVdKYVudiIVelZqZX6xzeP9TmEq0sAf4DzkcbI7VhAGH93vppZ7TXu9sHAqeEod32vFyTn8OV8hXK9zYveb0GagF6hq9lWRcd-hF2u44sufDzN7PnDIg7P3_HTcGa-Q1hA0t2IwhnNplsvL6v3CTiP7keICJF8CcvInKjbVOUn-RAaKXnGxASPKmg2ogp0MNQYNRcFcJ3VX2PEraaCigy1DFhA5ZJUwTOHeMw5v5iXphKu5tSXKyPdn9U0z5AbDIaSLMz4z-YXrAmviG7HX2tuyt15YGaDHg8tKvMWrNxautsvOVhArQOf0OsCyWDM_nGs1EMj7RUrQI9dC51GhTd1JYKPojkPUEi6jkJ4-WzkKxPYkkeoxfa5esLAsfS44XHKI96vVFhA2_xbuVRuIf0nK5mjU1luf3xU731Yix25phYZMt60oHhpgXwwIsJHu0Zw2N_Y0dCuaTw5OkV4uWWjn0oB-tATmFhAaBy4M2q_9-vM-gI1INjWRVMTHrEbqZH25d4l56knOleInR06UeYaggyAbokStzjhwIOJog91ZeBsx4SdwlX_BFhAYbaJd3TePXBak1vZnjwiGHfjgXEEKgHkuUalnIqdDKDrgGob7DUUgOthkpbkmOJ5VDqNVNK0jPIamfMVVEvciFhAZ0AGhf95y6GksoNmT2lziWkZa3I7SFTd5UcYXl-05J0bG9fBf3WFvCzYg66eUNx1hBRiDYPMjnbxdttVBxBVCVhAH7tppih8qxtyLctlIcMewHy_d-ohskEWGDt7VCzh3XpVVgkM0TQduLySSpe_Zk43Rc4PsXu8s86AH4Wns3h7pFhAh_Hb6SwHutTIeQ6TkUmEiGuJ3COMO-zJpwAknoN93lh239fvO8EyHfhTafhqfIduCJkyK8qKAGmZzk8pNndphVhA4LjPaRdQMlMM80E458GP4S8h57pyU0gLetp-g28Nw8ZwNfBFshfTbDzEU7K8VyUBQBwoHLRJUh17klWNn9DXLVhADNaC6GlNtvaiVgq2a3-IplekXK1S_D0-AH54n_fWlduVT73PrE4Wp-UPynWyVdrad0KERdt2HN_i2DdTeVEk4asAWCB6mA8ACbmdL38kt8K73N8IVKXlsEuEUy-pUzvay08-NgFYINYpla0Iph_vW2rEZ68aHOfFPuiT0Up9fxek8cEv2_DyAlggxSAYPxQMYUk2g3HuGgljVGTR9TX4vCOXhr-XroeqeXUDWCDnE51GOCGstC1ISNAwHakVzjWvh3JVNe6KkLAVu5tgzQRYIArgj_H_5K8v-PKSIlSH5GO5bLdC0henQUlORe0jW8MZBVggCnIh1I3cpst7rzWSsZYN_jFer3bWRVP64MLVDDgyT74GWCCRCvkR1UVWrQy0ajSBTDy7A_LRGCio6NmoT-J5zBfifAdYIKV2a2ib34i-y8yfZ0VRgifj7Kq2TfiIWKJ9Vu_ah-NSCFggpw-AOPUIILQmW7XFgod6La0OEKA8j3n49hUfCaAuUBAJWCDvKsdM4cqHi_7E2g8EdLYvCRh-vFC-A0MweEIql8rxMwpYIAyxtRiDditxCY73FWWDlbuP_KnEVcySFIyA4VJpJ9nJgxQVFw\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:28Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAanHhcH9XXfu-KIP4jVr2G2X7DeUIFCrMdxqsVbSOUc4sQtNv2IKPMvSOl7606CZCTrUGH6Xuw8om3rC8bTLJnVgjgCQCALOvaofYIPjBqqJGEdwy0Q2vkWP4lJPOHX0irgwAFjOYIlhAPZz5H-8ZXzwmhwny9v0hrEtjv5i28T0g7sHVnyrsZj_rleHut4E0r5ywNzopE7fhWG0Tuc3wi6VMH19lCViZTVhAyOLw_crugBfPxP1VlYczlNn-Tq-qeTT3vuLw48DDFhVdee4zTCGab3cVteXAPlre2x47LUUMPgn2TxBctk84YlhA3EyrTuYCkQoRZ2zpf2g_xWGraVra8YwNeRqwvWMJ6MPODvBR4FrvJhZbX3d9SAcyaLmUcsBx_OFC-7a_6thA41hAVOWm0VG8VZOPEQYw-j5tDJzfVS2-UgOE5i8nlx74FA4bWlwmWNEQVIw_BlYJ88NcyJ8V7AZJPGZqHImDcPSjSVhAGrNzTD3_uyhYotpbW1PxUBDFZVmwNWWG8Pvk6j9etb5U_CNiCsG4w_t8KwyOd26SC-QcuvTltYKdfB08xVRWTVhA9LBGKCzVHNfNxWcnsZFIRlKUOwcoFRSwQDC2wDcNWaXXiLcAO6jtMXTv6ZDw-tc591xObmLc_DsCABvZ6r5bJFhASPjuGQa_VkV62KFvzdvzZwZO3Jfo0Deo2yaJv_MQmy9ataRboUguoklHXcAFVv4i_TYg1o9dwp-SUvnU23_VGFhAeT5lHSVjCb6CPSuBB-9MRaVLUZY0BDjYboVVKs-5uXtCF0TJL6I2Nd9qzvKk7-7IIcTcBcCnYAT57ow1xjdmyFhAl2VjEK9gUR6hQ3lGh3ChrJi6jqHXu_JPOVR-rSyAF5b2CJwkgJDS7JhX10kp7FQLTVAsdT47NZDv52pf7eE6Z1hA6VzGKljv6PABXE_hb8pomgZQHy2jta3O46JwRn_oluvcxo1wbO0HZG3oA-DkzEGszRtBrndSy-N8s4QI7nG1RlhAzZAAj8l5jgr36jpgTFrXkA9R9znGRmegn0ky0ddzxQF8YdK8zDy5EbkPUAQHcTaIewLwz7Lg3NwwiE5gqZQv81hA1XDFmMzRvVi2f_FYLE6tX9diC8zDzPpJQA96h8g3r1WSZ26_tjYGuabdIAzbpy3hOyu1okp7oUHMFapr1_jw-VhARNV0QGoqBvhLXYmWc-93-7VM6cZrucJyoU_Tsg1SMGyZwe3WJx8CaBv-2mUUnWih638SglSfw5XdXYI5Yvnr6VhAxfLnuVCXcfm1GxAs0kYkDBy8l4-nSStXqyNFsN6DCoqZgJE-Iq6J0qJsNSf9S4xDaXJ8H2SYA-B1DuKf9o6KgFhA_bYwpesGobW8VcORTqS2e4LFeP_5oJlLx23WMktIaKuO59N8AHY5PTFdFkdDY-f0M_1H9y3jr_r6oFib-s55flhAXp19Q5toY0hidIppUShyxOEUcNh17ynd4KteGKEQKJK5R50iWe51jkgDXAfqMNC-m_kMslh-NO61lEfwQf2-CVhA7fi7ftkUmQKS6kzP7khCnEQaw5aMndv__w0e-zmjSugSIBsZuH9DgeL2bsS0qAFt5BeGrGV2OGGdrPiiRSbyWVhAt9cJNAGdvRTEJax5tKooem26v7TaNiq8LQm1hglk_SPshPxkUZhf598y_5PSj2SQpxLxccy0EedzAhj8hSQ_jVhAA3lOAPYyd78GjNkjkRqVuucwyYZCh0mpm2Y-ji_FLHVTyDzMnVindVYEDkJy8r-l_pPOtisJ7JTJU__6PPZg9lhAoadbpC8vLY199OThuP1ecbnLvf4q-zcu_5NChZ2_4NzMMVGMHescw03ccxDAGdq_hsDjZGTS21viILtkl-k6bVhA8RzSyWnjxDeeC0mGC6VtFTHdUsr4BOQ_mZnQ_kv4KcWvIduFRjBLf7whyVnQM0HBKPQwEbZK9nny_QNEHmGjo1hAZQXotMlYzWuH3v7fSYVZSDs6MzRwY2VFqQ-n-6LSLGX4migVdKYVudiIVelZqZX6xzeP9TmEq0sAf4DzkcbI7VhAGH93vppZ7TXu9sHAqeEod32vFyTn8OV8hXK9zYveb0GagF6hq9lWRcd-hF2u44sufDzN7PnDIg7P3_HTcGa-Q1hA0t2IwhnNplsvL6v3CTiP7keICJF8CcvInKjbVOUn-RAaKXnGxASPKmg2ogp0MNQYNRcFcJ3VX2PEraaCigy1DFhA5ZJUwTOHeMw5v5iXphKu5tSXKyPdn9U0z5AbDIaSLMz4z-YXrAmviG7HX2tuyt15YGaDHg8tKvMWrNxautsvOVhArQOf0OsCyWDM_nGs1EMj7RUrQI9dC51GhTd1JYKPojkPUEi6jkJ4-WzkKxPYkkeoxfa5esLAsfS44XHKI96vVFhA2_xbuVRuIf0nK5mjU1luf3xU731Yix25phYZMt60oHhpgXwwIsJHu0Zw2N_Y0dCuaTw5OkV4uWWjn0oB-tATmFhAaBy4M2q_9-vM-gI1INjWRVMTHrEbqZH25d4l56knOleInR06UeYaggyAbokStzjhwIOJog91ZeBsx4SdwlX_BFhAYbaJd3TePXBak1vZnjwiGHfjgXEEKgHkuUalnIqdDKDrgGob7DUUgOthkpbkmOJ5VDqNVNK0jPIamfMVVEvciFhAZ0AGhf95y6GksoNmT2lziWkZa3I7SFTd5UcYXl-05J0bG9fBf3WFvCzYg66eUNx1hBRiDYPMjnbxdttVBxBVCVhAH7tppih8qxtyLctlIcMewHy_d-ohskEWGDt7VCzh3XpVVgkM0TQduLySSpe_Zk43Rc4PsXu8s86AH4Wns3h7pFhAh_Hb6SwHutTIeQ6TkUmEiGuJ3COMO-zJpwAknoN93lh239fvO8EyHfhTafhqfIduCJkyK8qKAGmZzk8pNndphVhA4LjPaRdQMlMM80E458GP4S8h57pyU0gLetp-g28Nw8ZwNfBFshfTbDzEU7K8VyUBQBwoHLRJUh17klWNn9DXLVhADNaC6GlNtvaiVgq2a3-IplekXK1S_D0-AH54n_fWlduVT73PrE4Wp-UPynWyVdrad0KERdt2HN_i2DdTeVEk4asAWCB6mA8ACbmdL38kt8K73N8IVKXlsEuEUy-pUzvay08-NgFYINYpla0Iph_vW2rEZ68aHOfFPuiT0Up9fxek8cEv2_DyAlggxSAYPxQMYUk2g3HuGgljVGTR9TX4vCOXhr-XroeqeXUDWCDnE51GOCGstC1ISNAwHakVzjWvh3JVNe6KkLAVu5tgzQRYIArgj_H_5K8v-PKSIlSH5GO5bLdC0henQUlORe0jW8MZBVggCnIh1I3cpst7rzWSsZYN_jFer3bWRVP64MLVDDgyT74GWCCRCvkR1UVWrQy0ajSBTDy7A_LRGCio6NmoT-J5zBfifAdYIKV2a2ib34i-y8yfZ0VRgifj7Kq2TfiIWKJ9Vu_ah-NSCFggpw-AOPUIILQmW7XFgod6La0OEKA8j3n49hUfCaAuUBAJWCDvKsdM4cqHi_7E2g8EdLYvCRh-vFC-A0MweEIql8rxMwpYIAyxtRiDditxCY73FWWDlbuP_KnEVcySFIyA4VJpJ9nJgxQVFw"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:cb0985c1-a79d-4297-b747-05ae4cfc137f",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2093,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:0b2504ee-ed2f-459f-b407-96f5ef935a19",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:cf16308c-b95c-4d11-bb3a-c7c0c363ea68",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:c5ffbdce-9174-4fc3-bd0f-7cafaa2a668d",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:24979969-0c9b-4c98-9392-83458c09aa31",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "q5tFkFsdTERYP8wMFmFQj",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:e71af2e0-b190-4753-a453-538e7b326ba1"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:ac01972b-086a-436e-81aa-58ee8712eff0",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:1aee851e-b0e9-4e2f-ba6f-1fc3521c7f41",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:7f2c80ee-d644-45f5-a20e-2914f2cee294",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:93ec795d-481a-4b28-b592-6d0a669f5c26",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:a3d96e13-f91a-409f-bfc6-d1b05c196f63",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:35693f1d-5d93-4687-8338-149fd4184159",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:5c3a5e24-cfdb-4bbc-aae8-d2075d1866e0",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:b851586b-8b9d-4baa-9beb-a5f4748688ea",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:8f03d28d-11ed-4a71-98db-1ee31b431207",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:1678fcca-9b13-4a61-b640-2b7dd198a4f4",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39321,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "q5tFkFsdTERYP8wMFmFQj",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:a480e9eb-cbc6-4a9d-8a50-e70a1f050a4d"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:8edb9a45-7611-449b-bb80-fabe2da6b8f9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:3aa79807-8328-47cc-9a6b-79639cc0a4d1",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:e85bbf11-125d-40c5-bfb1-a49d72417571",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 167,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:f9238da6-c92c-49b3-a5b1-9010e0c8e9c8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 695,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:fa3fc35a-fc06-401c-8772-f26ee957c8b0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 465,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:f09149e5-018c-40f9-b647-435463785bca",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41343,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:b1343a44-9f1a-4035-91e0-70acaa111c15",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:10711ce5-727f-480e-b0ec-cbe6c03716a3",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41815,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:0cfd7c34-4ad1-4d1a-adae-cca2f9e54e04",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:99dbc480-c741-4b4f-ba9a-9944a9bf3912",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41968,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "q5tFkFsdTERYP8wMFmFQj",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:ebe77458-8a73-4e12-a1f6-1b4bf0a7b190"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:be5d985b-194a-4fcb-b959-f609249f8da6",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:c6c6ace4-0b94-4583-818e-5a614b9eae2f",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:ac01972b-086a-436e-81aa-58ee8712eff0",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:8edb9a45-7611-449b-bb80-fabe2da6b8f9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:55a5164e-ea03-4e7c-87c6-773fb2c1265e",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 509,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:1aee851e-b0e9-4e2f-ba6f-1fc3521c7f41",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:3aa79807-8328-47cc-9a6b-79639cc0a4d1",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:0f12d655-43bc-4417-9f1e-056dc927f387",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 882,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:7f2c80ee-d644-45f5-a20e-2914f2cee294",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:e85bbf11-125d-40c5-bfb1-a49d72417571",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 167,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:2257366c-9c05-435c-83d9-cec49fa2cb45",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35279,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 506,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:28Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAREX_0kBvsYehVuwcK6Z3R_uvlWTDPZFVAAuweRUYfR5D8YdLD9DO_2HxRzY26W11O04VgUrg27AtZz3NAu6rrVgjgCQD3zU5s0J1-oed5gOfG5Ct1jwJ7ifZIDzDkyCGVPGP702YN1hArKBUbdTgmnT0yCo_YdM67r1bAYdbX09GMTeuMT_MpgxhTa9osYm4v0HZwdpwSqjrSx2SeOPzzJGrhWA-dk-rCFhACU0PFICHMB7Hg1l9cXZxrJPIA-zEQPj244RQ18OEEdRL3NO7Mx7sr6mFIzx2fNyltH1Qla3szguDDbUto4-4wFhAc1945UJvNtN2zFj9xZWiklX7zdUcA2wLoi5SWM2m1JvYGVtb_zTjjCCbXa-uvlOVBCMPdUdwTJKbmTvAF5hg7VhApb-r4hlOj7RY--1gx4AHYQ6OzvPDW5EUc9Pj4KZ1_WvdcVtjVvEIX_bVjO7xGBt3Gof_6mDoO5upF5Z-HGJjGVhADKd9w3sDXzXzEdsWecqDVtkKBQpZdc95YsQN5hL01OzbsCf3KDUCrV9bS68CNTYbdYFdLoijMzxlKB37L1nI9lhA6DsgkKiz6NMmbFEQr5z2HyuJl3mxZ4bI_4rpTYvAuCu12ETvaEAaaygNUCEZZLfcunyFsMtsDEXluJuB2P4U11hA4QX2GAprT3GXUQWI5kmpyKljzL8LhGWTApYhQIydDMt__QfLtN5agqoENaHtw6FJQklNIBhanepnGtRXhI5WvlhA5-O6bbVdDu0B0HHNMa--r1ncwTVF3sN2qQvXe3gfwybsxzzLExKxMMmCeoCmzvTq81URpAgduLgX5LXGQ7HAoVhAzh1nWG2oGr-nB9kS4F462w43Qigq3q4iIGuWg-yueWY8pprf5iGZVCgKpD3AbeaT5_hIOfDmjRxaX6jySA_o6VhAUAXaoBypAZg1x0Qb6OHilNjvO-z1s3QFYQcCUxELIsmg1l9JQuQhXgiGmCyWrzBAB9CnGJg-Fp1KcCXmRB5j6VhAyDBUubv3H0vqVO7CVhTSu0O7OsNabicE4qRv4pJBnSjMEb_vvQgAWehMRQtJfi6WKFtZlZu7-B3Mt76W0yKsDlhA7EKEf12rLOTDeWiChpBQxTeiWdPpC3xLCkerkXvjs2pHbnMzaDP1aLhK1umXqWcvqhszmQcVY2rx11NTghDCilhA07IYia8aHLuDziEeFdczOfa933JFsM1l5sdmIp5RFKgmkCH7S6R0Pkz-lnBXNSfr-_dNFK42W2brLAHdb2-qxFhABEalOEnto6GTALgjAc0GhX1HjM2eXDTWEb55ckJ5jfHTbC-t0SCzMfnbLXiAsZOR1sGogsytAiSAtxd1MuEfAlhAdZm_x2XVywmQS-p6-x0wEoPZIKF9waAU8KTl_t7XCaqgE7xMOCcANDb6IaHbfzEeRbwakmy2GRGwvG_xr_W8NlhASkYFPNyHoofPgfFEzbGO2b4fIKah8oPI0owAiyGVuKZA19GMKwOGCBh3iLWx8dw9mAhXECAYngdpomYxQGSRe1hAL61DlUf-2ZsopAiMr9odpd8yGScNWoasygUEhorme_FoMmcaGzrtS8hB_-qpOISqxwq72q08QpZF1LXvB7zeIFhAdIFrZH0922zx9gKu5z2HPJ9eZA-KTTCeIMHUAbd6J7ebpWtbDlOH0tBFEXKVfiLEnAa8AoXPrWlbNhBx57fnCVhAryPHXRQoTZ2oDvD74Xuqm5PoLF1Qa5yBag2vpKa_4CreJG4tVpn2dX56jhnFFQK7sp56DPU80eq9B8D2L7F0-1hAg8uC7NAZvc3m-1p4hLynvmkFt2Du2kpFm7BTIVP9cLA0r8dMzrIsP2t7pEsf02eLZg64u748lj7_4cB51zk4BFhA17DBzwSty1fPpQ6OhXDlexkeXPLYZdjb24mgp3xrLGYq7OTO_TiykQfe5BBJaJbNvMRh9H7C5PvwGxOMYlhsL1hA4oR2kLJ4HxiFublK0RC7TsDCNFuTz8RWiuYw-kenizMxd6bhkrQkAZeJBapnEM1iG35v_bIKa0_biUdm6Bg9QlhAcefdbkV1picjTjroIBWC7TFJLIcJu8pK9WM4Hs1ZFW6tHIdEOy_9UC2sMJfMVw8avTvI6p-C_5ou2ipBTMUO0VhAssxTy7dYNpbVe3Qe0vcoaGpjHak3T2IGrsdpRtKp5SEaJAOg5DFPXX8lYANV9sYIaGQELApVRVZ4BqayAs7K-1hAyxDJsYbyfOv7AeaPjDQklMP9idO8yTprSeE0O1LfKG0XkS0xBPq0iUUxicmkn0SMneZPd2jxbYjy2c-VXFQvFlhA9W5qF8-z7BIrCue7ZtqAc1B8PQwPMm__k48hBEzN-ikQ3guD0X6TPm6F_ktQk416JJH2m_x62iirpKGM2wystVhAPEw0C58OO84L5jTevD7p6SBWuwfoOnXlJkjzxHDTmyD67semrRY0d80qda3UArMAoM-UQxwyr7UATC_Ey3JWGVhA8fm2L-zoj-9z_i2LkQOfg2XRSaKVIMj0s2VSu4DbBz3032LpReI9VEmwONpuUwYDk_bT0QRVbum498zkbGF3y1hAtqmNuGxtwKaRbOB8ZvhLyhl-o8FS5PLkvxMnFt0n-MNGL8X4A6eP41WuRufJFbqxxF4JQXaSp972c9ByJJxI71hAUolpk3kmNr53wU2hjlGUhL8bM_czf4zQDkeUTqx2CjTTaJu6RDzf_P4sVdopq7jiUmIL61mu5-K3RIy1t1vA71hA8s-Ubik2BdHxxAaxB8LmKNwjTZH1vj3I5DFuSCrjy5bwTP1zW6uBvLancSUXgUyPwsgXjB2HvVVKNyL6pm406lhAIpt2dyBGkMXTYtQtbvtyu6JmpwiiorPr3dFoSuNPuXFXXBAtULMqnQBzjGhyFtpfsYW-tjVUm4F83tlACIi1NlhA46cL286Noh6e51sH93T4q7JTZWoAUjfAVdKWr6Vj9wdp5JmbDK093Ss7aOiEej7mDZL1A4W4_IAJ_irybtPykFhAbchQa0TcQMJ3K2c-Yj9ySA1xuP2Da5WVjm20_lspx151WgEhT3p4Nhsurt32eD3zcTeq-b8ZH0CbDH9YnV8tnVhA6rY7SnRrJ9oxdbTEs0DUg1GzkgpFckviNoYm3mvVRIJ3m32hmvtM0IrdvFvAsO-AF-CTpaNNmChbe2zHyHrDTFhA1pkyJe5PbGCNTxtLjcluxD6VafibP8_uefvNMz5MDmm0CkGEA-4xlPeb-FNS3Y0d2jmkpBTEJAVhwGMgwzcFP1hADyw3Al8Pp1LPg3RMNChHknWK3y8O-FODv10CWUF7Sq8qcB6YLMHx4Q9LZQIiEKIOLyqfQijUkGiybQkAXfr-r1hAEySbfhpIZNhJVna1jnlM9aobZozSuLQu1HuNBIdTuUQxbBCvccqNTS5HRjsCTy7vfDW9Vh44DuuIq75fQK-KnFhAU-OCDJCJisug4VK2Uje62Oupub4RkFND5WsuXFy9zpkhKODS42soJkXcRIFEiazkazRiixDGgiLuP6TJKnXeWFhAj0lfmDTi9x3Rva-MjmDE1K9MVMcw9JBMKFuDALEBiahn9bZIaw-GvnMCNX4DbBwQPoBLlV-UFNuO_ujODN3HIFhAugC7PID1wfezGmBkI_DgfAsEjZZkEDI9VTJ1O6ySLNI5cQWVijqEQ6CLjM9SQcdec8hEXzYKOwz7a6vLqYeMp1hAkqIhFxLG0x96pPJYCHBV59ygfd_N1Mb9PTm_A8kSLEK4XX9fa0A5s6_Q7k-TZGZnat7pwnfg98CM6_yLIJD6u1hAEi8_n0rILrbofQPT1BiDfS5hZO6ED3D3rFPJAmTv8CGUXZ7DgCYahRlMmfRYOly4E9khe6CoWQBrkYC82j6qMVhAEanuxNYRw6Wfj6EnsPflMm2TaQQg2TSrcX21VOCDi_Up4Hb2WCnHVmRTwLWcikmXeKxncGgP97MsWtK9_7e4q1hAYwke9lSh2LJqVyzzSgw9LAMgr7TRfE5qAmhMEvTw0ZepKvCHhqWZw4SNdrvD8RpThDWhkvyN05-t2RqcG5LVglhAxXu1nbdBb2kJlV3MP8zAcf1fejHupNUgohUQiK2GCSqMdE45u4y_zFvaqXfEuPilfe06uFCWucxRDx7iu4IikFhAOfRmyO60Ix3_YvxTKdX4HweARCwAtseT5uiDtMwjYNcXaZtweMgtoOylpPL-Li7Ff5s725pl-tRWWlqYUsPRpVhAIv3sq3MT70KzVNKCkS4ZU0IXvy-PYHO0_3HkS92dY58bo_IvCrWpWs0Trzcrg5iyNFg3laeyUNCvzFJclAy8ZFhAd6-TyLdqjZ9b6bZn-HWnnlFx_92j0UbJaeVfLSG5slS8nV8E_MopAhHLbPJwZmTX25CYnMBpStrEB7S2LX8UB1hAj5riczeQCOyz7ehzAXBszZf1Ug-ndWDm9tdNP_lwR5AFjcTLChAdQV-NHMiTHTu8wKLRLP7skfCZFvhmAsV5flhAiCAbXHRcnOOBrnzFGllI-VFsy040OncaSp02GqFBR5O2wO5rt2mujYqb67JJS8Ocf2frBzS2mRgfjREESLH79VhAyksVf42pitM9175WmCzTMEj6NHN9p9hGwGIWjCP0LyKd6tuM98K0Py4e6iDd5rRKQ49QQr0Ah9jXA12aiU8u81hAJjsI9VBVH0viZZQebygL65yYSNhFeGfmsm_49lj9p_y1FU9pqyE7j9dluSh4C94R2bXlGt2sdh4Jia5QoZnHLVhAgKOXpcUmJW3xGeQGxvs2MkUhJehOFeTK6m0PelW_xvfeLU_0Bm7zv3XGsyvLyZ7Qjjly3-6WGsxpMh0wlPm-ilhASMLePSRt5odUj652ToQvpPi2AS8PwK2fSXdsIhiEDA464EiLhwfdMpt42PyXoT7h4Mvnj_fJVVbdAhpMKeweCbAAWCB1mg_n4w1jgbH25r9rTxcWI0k_0BC5jMufF57mR-GJqAFYIMq_zHhwotianUhUFqQpwtvY-4Jbr_RPld9dpGzHIQPIAlggO3dbSB5U7SRYZ3dnyvI0U5fJK3N3xpPncjU7ycLjh6oDWCB7wxZRVbSFNEiyK9tcX7JqH8UG_lhK0LWRC65Q9yDSVwRYINmhMEb0OFc1IYfXDpwSO9SKBHZEL6YxLoyIB-jpkwHXBVgg7C4r8aaHZROnF8CahjGGqMROGoPPTIuzgdALUh53k4oGWCCoLggzV7Udq2mAflTQscsrj3PKjEk7uy3V_ZySXVEjuQdYIG0a4vbgemJiII7e79totGeBIITq6PgZDMTtgFty3y_eCFggWpPgJhinBWFLo0JONPxl9qmoUf8ifBahsDoWxw9thMgJWCCWIjxBHP6gGNvxHCG15T-0qdEKGARpc2JN2W_3AfwGFApYIBhqq9a6NzhPqhrnx3SX3yIzzDIIMINXzGsuWTTlEMQBC1ggItEnFxA22OjCdOP7IJrsjd3y6RNrB5NA_KyEwbVYChUMWCCReT2AUM5PHkMK2PnQk1vIoFO1MsEIjZJWyh1AWhnrlQ1YIAn5Dxg7j8CfWZkeL779RGRhsNzDzIZh22yJ7Br0C4nJDlggQfSQ9oXw6afGB3bmnuFQrbVRn1k0Efmp6w2yPsfkgrsPWCA00OuS1qHXDqoizc9cnF_RK4vTGglwP8l6J_8j64GyHYMYNhg3GDk\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:28Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAREX_0kBvsYehVuwcK6Z3R_uvlWTDPZFVAAuweRUYfR5D8YdLD9DO_2HxRzY26W11O04VgUrg27AtZz3NAu6rrVgjgCQD3zU5s0J1-oed5gOfG5Ct1jwJ7ifZIDzDkyCGVPGP702YN1hArKBUbdTgmnT0yCo_YdM67r1bAYdbX09GMTeuMT_MpgxhTa9osYm4v0HZwdpwSqjrSx2SeOPzzJGrhWA-dk-rCFhACU0PFICHMB7Hg1l9cXZxrJPIA-zEQPj244RQ18OEEdRL3NO7Mx7sr6mFIzx2fNyltH1Qla3szguDDbUto4-4wFhAc1945UJvNtN2zFj9xZWiklX7zdUcA2wLoi5SWM2m1JvYGVtb_zTjjCCbXa-uvlOVBCMPdUdwTJKbmTvAF5hg7VhApb-r4hlOj7RY--1gx4AHYQ6OzvPDW5EUc9Pj4KZ1_WvdcVtjVvEIX_bVjO7xGBt3Gof_6mDoO5upF5Z-HGJjGVhADKd9w3sDXzXzEdsWecqDVtkKBQpZdc95YsQN5hL01OzbsCf3KDUCrV9bS68CNTYbdYFdLoijMzxlKB37L1nI9lhA6DsgkKiz6NMmbFEQr5z2HyuJl3mxZ4bI_4rpTYvAuCu12ETvaEAaaygNUCEZZLfcunyFsMtsDEXluJuB2P4U11hA4QX2GAprT3GXUQWI5kmpyKljzL8LhGWTApYhQIydDMt__QfLtN5agqoENaHtw6FJQklNIBhanepnGtRXhI5WvlhA5-O6bbVdDu0B0HHNMa--r1ncwTVF3sN2qQvXe3gfwybsxzzLExKxMMmCeoCmzvTq81URpAgduLgX5LXGQ7HAoVhAzh1nWG2oGr-nB9kS4F462w43Qigq3q4iIGuWg-yueWY8pprf5iGZVCgKpD3AbeaT5_hIOfDmjRxaX6jySA_o6VhAUAXaoBypAZg1x0Qb6OHilNjvO-z1s3QFYQcCUxELIsmg1l9JQuQhXgiGmCyWrzBAB9CnGJg-Fp1KcCXmRB5j6VhAyDBUubv3H0vqVO7CVhTSu0O7OsNabicE4qRv4pJBnSjMEb_vvQgAWehMRQtJfi6WKFtZlZu7-B3Mt76W0yKsDlhA7EKEf12rLOTDeWiChpBQxTeiWdPpC3xLCkerkXvjs2pHbnMzaDP1aLhK1umXqWcvqhszmQcVY2rx11NTghDCilhA07IYia8aHLuDziEeFdczOfa933JFsM1l5sdmIp5RFKgmkCH7S6R0Pkz-lnBXNSfr-_dNFK42W2brLAHdb2-qxFhABEalOEnto6GTALgjAc0GhX1HjM2eXDTWEb55ckJ5jfHTbC-t0SCzMfnbLXiAsZOR1sGogsytAiSAtxd1MuEfAlhAdZm_x2XVywmQS-p6-x0wEoPZIKF9waAU8KTl_t7XCaqgE7xMOCcANDb6IaHbfzEeRbwakmy2GRGwvG_xr_W8NlhASkYFPNyHoofPgfFEzbGO2b4fIKah8oPI0owAiyGVuKZA19GMKwOGCBh3iLWx8dw9mAhXECAYngdpomYxQGSRe1hAL61DlUf-2ZsopAiMr9odpd8yGScNWoasygUEhorme_FoMmcaGzrtS8hB_-qpOISqxwq72q08QpZF1LXvB7zeIFhAdIFrZH0922zx9gKu5z2HPJ9eZA-KTTCeIMHUAbd6J7ebpWtbDlOH0tBFEXKVfiLEnAa8AoXPrWlbNhBx57fnCVhAryPHXRQoTZ2oDvD74Xuqm5PoLF1Qa5yBag2vpKa_4CreJG4tVpn2dX56jhnFFQK7sp56DPU80eq9B8D2L7F0-1hAg8uC7NAZvc3m-1p4hLynvmkFt2Du2kpFm7BTIVP9cLA0r8dMzrIsP2t7pEsf02eLZg64u748lj7_4cB51zk4BFhA17DBzwSty1fPpQ6OhXDlexkeXPLYZdjb24mgp3xrLGYq7OTO_TiykQfe5BBJaJbNvMRh9H7C5PvwGxOMYlhsL1hA4oR2kLJ4HxiFublK0RC7TsDCNFuTz8RWiuYw-kenizMxd6bhkrQkAZeJBapnEM1iG35v_bIKa0_biUdm6Bg9QlhAcefdbkV1picjTjroIBWC7TFJLIcJu8pK9WM4Hs1ZFW6tHIdEOy_9UC2sMJfMVw8avTvI6p-C_5ou2ipBTMUO0VhAssxTy7dYNpbVe3Qe0vcoaGpjHak3T2IGrsdpRtKp5SEaJAOg5DFPXX8lYANV9sYIaGQELApVRVZ4BqayAs7K-1hAyxDJsYbyfOv7AeaPjDQklMP9idO8yTprSeE0O1LfKG0XkS0xBPq0iUUxicmkn0SMneZPd2jxbYjy2c-VXFQvFlhA9W5qF8-z7BIrCue7ZtqAc1B8PQwPMm__k48hBEzN-ikQ3guD0X6TPm6F_ktQk416JJH2m_x62iirpKGM2wystVhAPEw0C58OO84L5jTevD7p6SBWuwfoOnXlJkjzxHDTmyD67semrRY0d80qda3UArMAoM-UQxwyr7UATC_Ey3JWGVhA8fm2L-zoj-9z_i2LkQOfg2XRSaKVIMj0s2VSu4DbBz3032LpReI9VEmwONpuUwYDk_bT0QRVbum498zkbGF3y1hAtqmNuGxtwKaRbOB8ZvhLyhl-o8FS5PLkvxMnFt0n-MNGL8X4A6eP41WuRufJFbqxxF4JQXaSp972c9ByJJxI71hAUolpk3kmNr53wU2hjlGUhL8bM_czf4zQDkeUTqx2CjTTaJu6RDzf_P4sVdopq7jiUmIL61mu5-K3RIy1t1vA71hA8s-Ubik2BdHxxAaxB8LmKNwjTZH1vj3I5DFuSCrjy5bwTP1zW6uBvLancSUXgUyPwsgXjB2HvVVKNyL6pm406lhAIpt2dyBGkMXTYtQtbvtyu6JmpwiiorPr3dFoSuNPuXFXXBAtULMqnQBzjGhyFtpfsYW-tjVUm4F83tlACIi1NlhA46cL286Noh6e51sH93T4q7JTZWoAUjfAVdKWr6Vj9wdp5JmbDK093Ss7aOiEej7mDZL1A4W4_IAJ_irybtPykFhAbchQa0TcQMJ3K2c-Yj9ySA1xuP2Da5WVjm20_lspx151WgEhT3p4Nhsurt32eD3zcTeq-b8ZH0CbDH9YnV8tnVhA6rY7SnRrJ9oxdbTEs0DUg1GzkgpFckviNoYm3mvVRIJ3m32hmvtM0IrdvFvAsO-AF-CTpaNNmChbe2zHyHrDTFhA1pkyJe5PbGCNTxtLjcluxD6VafibP8_uefvNMz5MDmm0CkGEA-4xlPeb-FNS3Y0d2jmkpBTEJAVhwGMgwzcFP1hADyw3Al8Pp1LPg3RMNChHknWK3y8O-FODv10CWUF7Sq8qcB6YLMHx4Q9LZQIiEKIOLyqfQijUkGiybQkAXfr-r1hAEySbfhpIZNhJVna1jnlM9aobZozSuLQu1HuNBIdTuUQxbBCvccqNTS5HRjsCTy7vfDW9Vh44DuuIq75fQK-KnFhAU-OCDJCJisug4VK2Uje62Oupub4RkFND5WsuXFy9zpkhKODS42soJkXcRIFEiazkazRiixDGgiLuP6TJKnXeWFhAj0lfmDTi9x3Rva-MjmDE1K9MVMcw9JBMKFuDALEBiahn9bZIaw-GvnMCNX4DbBwQPoBLlV-UFNuO_ujODN3HIFhAugC7PID1wfezGmBkI_DgfAsEjZZkEDI9VTJ1O6ySLNI5cQWVijqEQ6CLjM9SQcdec8hEXzYKOwz7a6vLqYeMp1hAkqIhFxLG0x96pPJYCHBV59ygfd_N1Mb9PTm_A8kSLEK4XX9fa0A5s6_Q7k-TZGZnat7pwnfg98CM6_yLIJD6u1hAEi8_n0rILrbofQPT1BiDfS5hZO6ED3D3rFPJAmTv8CGUXZ7DgCYahRlMmfRYOly4E9khe6CoWQBrkYC82j6qMVhAEanuxNYRw6Wfj6EnsPflMm2TaQQg2TSrcX21VOCDi_Up4Hb2WCnHVmRTwLWcikmXeKxncGgP97MsWtK9_7e4q1hAYwke9lSh2LJqVyzzSgw9LAMgr7TRfE5qAmhMEvTw0ZepKvCHhqWZw4SNdrvD8RpThDWhkvyN05-t2RqcG5LVglhAxXu1nbdBb2kJlV3MP8zAcf1fejHupNUgohUQiK2GCSqMdE45u4y_zFvaqXfEuPilfe06uFCWucxRDx7iu4IikFhAOfRmyO60Ix3_YvxTKdX4HweARCwAtseT5uiDtMwjYNcXaZtweMgtoOylpPL-Li7Ff5s725pl-tRWWlqYUsPRpVhAIv3sq3MT70KzVNKCkS4ZU0IXvy-PYHO0_3HkS92dY58bo_IvCrWpWs0Trzcrg5iyNFg3laeyUNCvzFJclAy8ZFhAd6-TyLdqjZ9b6bZn-HWnnlFx_92j0UbJaeVfLSG5slS8nV8E_MopAhHLbPJwZmTX25CYnMBpStrEB7S2LX8UB1hAj5riczeQCOyz7ehzAXBszZf1Ug-ndWDm9tdNP_lwR5AFjcTLChAdQV-NHMiTHTu8wKLRLP7skfCZFvhmAsV5flhAiCAbXHRcnOOBrnzFGllI-VFsy040OncaSp02GqFBR5O2wO5rt2mujYqb67JJS8Ocf2frBzS2mRgfjREESLH79VhAyksVf42pitM9175WmCzTMEj6NHN9p9hGwGIWjCP0LyKd6tuM98K0Py4e6iDd5rRKQ49QQr0Ah9jXA12aiU8u81hAJjsI9VBVH0viZZQebygL65yYSNhFeGfmsm_49lj9p_y1FU9pqyE7j9dluSh4C94R2bXlGt2sdh4Jia5QoZnHLVhAgKOXpcUmJW3xGeQGxvs2MkUhJehOFeTK6m0PelW_xvfeLU_0Bm7zv3XGsyvLyZ7Qjjly3-6WGsxpMh0wlPm-ilhASMLePSRt5odUj652ToQvpPi2AS8PwK2fSXdsIhiEDA464EiLhwfdMpt42PyXoT7h4Mvnj_fJVVbdAhpMKeweCbAAWCB1mg_n4w1jgbH25r9rTxcWI0k_0BC5jMufF57mR-GJqAFYIMq_zHhwotianUhUFqQpwtvY-4Jbr_RPld9dpGzHIQPIAlggO3dbSB5U7SRYZ3dnyvI0U5fJK3N3xpPncjU7ycLjh6oDWCB7wxZRVbSFNEiyK9tcX7JqH8UG_lhK0LWRC65Q9yDSVwRYINmhMEb0OFc1IYfXDpwSO9SKBHZEL6YxLoyIB-jpkwHXBVgg7C4r8aaHZROnF8CahjGGqMROGoPPTIuzgdALUh53k4oGWCCoLggzV7Udq2mAflTQscsrj3PKjEk7uy3V_ZySXVEjuQdYIG0a4vbgemJiII7e79totGeBIITq6PgZDMTtgFty3y_eCFggWpPgJhinBWFLo0JONPxl9qmoUf8ifBahsDoWxw9thMgJWCCWIjxBHP6gGNvxHCG15T-0qdEKGARpc2JN2W_3AfwGFApYIBhqq9a6NzhPqhrnx3SX3yIzzDIIMINXzGsuWTTlEMQBC1ggItEnFxA22OjCdOP7IJrsjd3y6RNrB5NA_KyEwbVYChUMWCCReT2AUM5PHkMK2PnQk1vIoFO1MsEIjZJWyh1AWhnrlQ1YIAn5Dxg7j8CfWZkeL779RGRhsNzDzIZh22yJ7Br0C4nJDlggQfSQ9oXw6afGB3bmnuFQrbVRn1k0Efmp6w2yPsfkgrsPWCA00OuS1qHXDqoizc9cnF_RK4vTGglwP8l6J_8j64GyHYMYNhg3GDk"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:93ec795d-481a-4b28-b592-6d0a669f5c26",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:f9238da6-c92c-49b3-a5b1-9010e0c8e9c8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 695,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:93f79e13-c3f6-42e3-89b6-d517427dfae3",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 216,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-05T05:06:28Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAanHhcH9XXfu-KIP4jVr2G2X7DeUIFCrMdxqsVbSOUc4sQtNv2IKPMvSOl7606CZCTrUGH6Xuw8om3rC8bTLJnVgjgCQCALOvaofYIPjBqqJGEdwy0Q2vkWP4lJPOHX0irgwAFjOYIlhAPZz5H-8ZXzwmhwny9v0hrEtjv5i28T0g7sHVnyrsZj_rleHut4E0r5ywNzopE7fhWG0Tuc3wi6VMH19lCViZTVhAyOLw_crugBfPxP1VlYczlNn-Tq-qeTT3vuLw48DDFhVdee4zTCGab3cVteXAPlre2x47LUUMPgn2TxBctk84YlhA3EyrTuYCkQoRZ2zpf2g_xWGraVra8YwNeRqwvWMJ6MPODvBR4FrvJhZbX3d9SAcyaLmUcsBx_OFC-7a_6thA41hAVOWm0VG8VZOPEQYw-j5tDJzfVS2-UgOE5i8nlx74FA4bWlwmWNEQVIw_BlYJ88NcyJ8V7AZJPGZqHImDcPSjSVhAGrNzTD3_uyhYotpbW1PxUBDFZVmwNWWG8Pvk6j9etb5U_CNiCsG4w_t8KwyOd26SC-QcuvTltYKdfB08xVRWTVhA9LBGKCzVHNfNxWcnsZFIRlKUOwcoFRSwQDC2wDcNWaXXiLcAO6jtMXTv6ZDw-tc591xObmLc_DsCABvZ6r5bJFhASPjuGQa_VkV62KFvzdvzZwZO3Jfo0Deo2yaJv_MQmy9ataRboUguoklHXcAFVv4i_TYg1o9dwp-SUvnU23_VGFhAeT5lHSVjCb6CPSuBB-9MRaVLUZY0BDjYboVVKs-5uXtCF0TJL6I2Nd9qzvKk7-7IIcTcBcCnYAT57ow1xjdmyFhAl2VjEK9gUR6hQ3lGh3ChrJi6jqHXu_JPOVR-rSyAF5b2CJwkgJDS7JhX10kp7FQLTVAsdT47NZDv52pf7eE6Z1hA6VzGKljv6PABXE_hb8pomgZQHy2jta3O46JwRn_oluvcxo1wbO0HZG3oA-DkzEGszRtBrndSy-N8s4QI7nG1RlhAzZAAj8l5jgr36jpgTFrXkA9R9znGRmegn0ky0ddzxQF8YdK8zDy5EbkPUAQHcTaIewLwz7Lg3NwwiE5gqZQv81hA1XDFmMzRvVi2f_FYLE6tX9diC8zDzPpJQA96h8g3r1WSZ26_tjYGuabdIAzbpy3hOyu1okp7oUHMFapr1_jw-VhARNV0QGoqBvhLXYmWc-93-7VM6cZrucJyoU_Tsg1SMGyZwe3WJx8CaBv-2mUUnWih638SglSfw5XdXYI5Yvnr6VhAxfLnuVCXcfm1GxAs0kYkDBy8l4-nSStXqyNFsN6DCoqZgJE-Iq6J0qJsNSf9S4xDaXJ8H2SYA-B1DuKf9o6KgFhA_bYwpesGobW8VcORTqS2e4LFeP_5oJlLx23WMktIaKuO59N8AHY5PTFdFkdDY-f0M_1H9y3jr_r6oFib-s55flhAXp19Q5toY0hidIppUShyxOEUcNh17ynd4KteGKEQKJK5R50iWe51jkgDXAfqMNC-m_kMslh-NO61lEfwQf2-CVhA7fi7ftkUmQKS6kzP7khCnEQaw5aMndv__w0e-zmjSugSIBsZuH9DgeL2bsS0qAFt5BeGrGV2OGGdrPiiRSbyWVhAt9cJNAGdvRTEJax5tKooem26v7TaNiq8LQm1hglk_SPshPxkUZhf598y_5PSj2SQpxLxccy0EedzAhj8hSQ_jVhAA3lOAPYyd78GjNkjkRqVuucwyYZCh0mpm2Y-ji_FLHVTyDzMnVindVYEDkJy8r-l_pPOtisJ7JTJU__6PPZg9lhAoadbpC8vLY199OThuP1ecbnLvf4q-zcu_5NChZ2_4NzMMVGMHescw03ccxDAGdq_hsDjZGTS21viILtkl-k6bVhA8RzSyWnjxDeeC0mGC6VtFTHdUsr4BOQ_mZnQ_kv4KcWvIduFRjBLf7whyVnQM0HBKPQwEbZK9nny_QNEHmGjo1hAZQXotMlYzWuH3v7fSYVZSDs6MzRwY2VFqQ-n-6LSLGX4migVdKYVudiIVelZqZX6xzeP9TmEq0sAf4DzkcbI7VhAGH93vppZ7TXu9sHAqeEod32vFyTn8OV8hXK9zYveb0GagF6hq9lWRcd-hF2u44sufDzN7PnDIg7P3_HTcGa-Q1hA0t2IwhnNplsvL6v3CTiP7keICJF8CcvInKjbVOUn-RAaKXnGxASPKmg2ogp0MNQYNRcFcJ3VX2PEraaCigy1DFhA5ZJUwTOHeMw5v5iXphKu5tSXKyPdn9U0z5AbDIaSLMz4z-YXrAmviG7HX2tuyt15YGaDHg8tKvMWrNxautsvOVhArQOf0OsCyWDM_nGs1EMj7RUrQI9dC51GhTd1JYKPojkPUEi6jkJ4-WzkKxPYkkeoxfa5esLAsfS44XHKI96vVFhA2_xbuVRuIf0nK5mjU1luf3xU731Yix25phYZMt60oHhpgXwwIsJHu0Zw2N_Y0dCuaTw5OkV4uWWjn0oB-tATmFhAaBy4M2q_9-vM-gI1INjWRVMTHrEbqZH25d4l56knOleInR06UeYaggyAbokStzjhwIOJog91ZeBsx4SdwlX_BFhAYbaJd3TePXBak1vZnjwiGHfjgXEEKgHkuUalnIqdDKDrgGob7DUUgOthkpbkmOJ5VDqNVNK0jPIamfMVVEvciFhAZ0AGhf95y6GksoNmT2lziWkZa3I7SFTd5UcYXl-05J0bG9fBf3WFvCzYg66eUNx1hBRiDYPMjnbxdttVBxBVCVhAH7tppih8qxtyLctlIcMewHy_d-ohskEWGDt7VCzh3XpVVgkM0TQduLySSpe_Zk43Rc4PsXu8s86AH4Wns3h7pFhAh_Hb6SwHutTIeQ6TkUmEiGuJ3COMO-zJpwAknoN93lh239fvO8EyHfhTafhqfIduCJkyK8qKAGmZzk8pNndphVhA4LjPaRdQMlMM80E458GP4S8h57pyU0gLetp-g28Nw8ZwNfBFshfTbDzEU7K8VyUBQBwoHLRJUh17klWNn9DXLVhADNaC6GlNtvaiVgq2a3-IplekXK1S_D0-AH54n_fWlduVT73PrE4Wp-UPynWyVdrad0KERdt2HN_i2DdTeVEk4asAWCB6mA8ACbmdL38kt8K73N8IVKXlsEuEUy-pUzvay08-NgFYINYpla0Iph_vW2rEZ68aHOfFPuiT0Up9fxek8cEv2_DyAlggxSAYPxQMYUk2g3HuGgljVGTR9TX4vCOXhr-XroeqeXUDWCDnE51GOCGstC1ISNAwHakVzjWvh3JVNe6KkLAVu5tgzQRYIArgj_H_5K8v-PKSIlSH5GO5bLdC0henQUlORe0jW8MZBVggCnIh1I3cpst7rzWSsZYN_jFer3bWRVP64MLVDDgyT74GWCCRCvkR1UVWrQy0ajSBTDy7A_LRGCio6NmoT-J5zBfifAdYIKV2a2ib34i-y8yfZ0VRgifj7Kq2TfiIWKJ9Vu_ah-NSCFggpw-AOPUIILQmW7XFgod6La0OEKA8j3n49hUfCaAuUBAJWCDvKsdM4cqHi_7E2g8EdLYvCRh-vFC-A0MweEIql8rxMwpYIAyxtRiDditxCY73FWWDlbuP_KnEVcySFIyA4VJpJ9nJgxQVFw\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-05T05:06:28Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAanHhcH9XXfu-KIP4jVr2G2X7DeUIFCrMdxqsVbSOUc4sQtNv2IKPMvSOl7606CZCTrUGH6Xuw8om3rC8bTLJnVgjgCQCALOvaofYIPjBqqJGEdwy0Q2vkWP4lJPOHX0irgwAFjOYIlhAPZz5H-8ZXzwmhwny9v0hrEtjv5i28T0g7sHVnyrsZj_rleHut4E0r5ywNzopE7fhWG0Tuc3wi6VMH19lCViZTVhAyOLw_crugBfPxP1VlYczlNn-Tq-qeTT3vuLw48DDFhVdee4zTCGab3cVteXAPlre2x47LUUMPgn2TxBctk84YlhA3EyrTuYCkQoRZ2zpf2g_xWGraVra8YwNeRqwvWMJ6MPODvBR4FrvJhZbX3d9SAcyaLmUcsBx_OFC-7a_6thA41hAVOWm0VG8VZOPEQYw-j5tDJzfVS2-UgOE5i8nlx74FA4bWlwmWNEQVIw_BlYJ88NcyJ8V7AZJPGZqHImDcPSjSVhAGrNzTD3_uyhYotpbW1PxUBDFZVmwNWWG8Pvk6j9etb5U_CNiCsG4w_t8KwyOd26SC-QcuvTltYKdfB08xVRWTVhA9LBGKCzVHNfNxWcnsZFIRlKUOwcoFRSwQDC2wDcNWaXXiLcAO6jtMXTv6ZDw-tc591xObmLc_DsCABvZ6r5bJFhASPjuGQa_VkV62KFvzdvzZwZO3Jfo0Deo2yaJv_MQmy9ataRboUguoklHXcAFVv4i_TYg1o9dwp-SUvnU23_VGFhAeT5lHSVjCb6CPSuBB-9MRaVLUZY0BDjYboVVKs-5uXtCF0TJL6I2Nd9qzvKk7-7IIcTcBcCnYAT57ow1xjdmyFhAl2VjEK9gUR6hQ3lGh3ChrJi6jqHXu_JPOVR-rSyAF5b2CJwkgJDS7JhX10kp7FQLTVAsdT47NZDv52pf7eE6Z1hA6VzGKljv6PABXE_hb8pomgZQHy2jta3O46JwRn_oluvcxo1wbO0HZG3oA-DkzEGszRtBrndSy-N8s4QI7nG1RlhAzZAAj8l5jgr36jpgTFrXkA9R9znGRmegn0ky0ddzxQF8YdK8zDy5EbkPUAQHcTaIewLwz7Lg3NwwiE5gqZQv81hA1XDFmMzRvVi2f_FYLE6tX9diC8zDzPpJQA96h8g3r1WSZ26_tjYGuabdIAzbpy3hOyu1okp7oUHMFapr1_jw-VhARNV0QGoqBvhLXYmWc-93-7VM6cZrucJyoU_Tsg1SMGyZwe3WJx8CaBv-2mUUnWih638SglSfw5XdXYI5Yvnr6VhAxfLnuVCXcfm1GxAs0kYkDBy8l4-nSStXqyNFsN6DCoqZgJE-Iq6J0qJsNSf9S4xDaXJ8H2SYA-B1DuKf9o6KgFhA_bYwpesGobW8VcORTqS2e4LFeP_5oJlLx23WMktIaKuO59N8AHY5PTFdFkdDY-f0M_1H9y3jr_r6oFib-s55flhAXp19Q5toY0hidIppUShyxOEUcNh17ynd4KteGKEQKJK5R50iWe51jkgDXAfqMNC-m_kMslh-NO61lEfwQf2-CVhA7fi7ftkUmQKS6kzP7khCnEQaw5aMndv__w0e-zmjSugSIBsZuH9DgeL2bsS0qAFt5BeGrGV2OGGdrPiiRSbyWVhAt9cJNAGdvRTEJax5tKooem26v7TaNiq8LQm1hglk_SPshPxkUZhf598y_5PSj2SQpxLxccy0EedzAhj8hSQ_jVhAA3lOAPYyd78GjNkjkRqVuucwyYZCh0mpm2Y-ji_FLHVTyDzMnVindVYEDkJy8r-l_pPOtisJ7JTJU__6PPZg9lhAoadbpC8vLY199OThuP1ecbnLvf4q-zcu_5NChZ2_4NzMMVGMHescw03ccxDAGdq_hsDjZGTS21viILtkl-k6bVhA8RzSyWnjxDeeC0mGC6VtFTHdUsr4BOQ_mZnQ_kv4KcWvIduFRjBLf7whyVnQM0HBKPQwEbZK9nny_QNEHmGjo1hAZQXotMlYzWuH3v7fSYVZSDs6MzRwY2VFqQ-n-6LSLGX4migVdKYVudiIVelZqZX6xzeP9TmEq0sAf4DzkcbI7VhAGH93vppZ7TXu9sHAqeEod32vFyTn8OV8hXK9zYveb0GagF6hq9lWRcd-hF2u44sufDzN7PnDIg7P3_HTcGa-Q1hA0t2IwhnNplsvL6v3CTiP7keICJF8CcvInKjbVOUn-RAaKXnGxASPKmg2ogp0MNQYNRcFcJ3VX2PEraaCigy1DFhA5ZJUwTOHeMw5v5iXphKu5tSXKyPdn9U0z5AbDIaSLMz4z-YXrAmviG7HX2tuyt15YGaDHg8tKvMWrNxautsvOVhArQOf0OsCyWDM_nGs1EMj7RUrQI9dC51GhTd1JYKPojkPUEi6jkJ4-WzkKxPYkkeoxfa5esLAsfS44XHKI96vVFhA2_xbuVRuIf0nK5mjU1luf3xU731Yix25phYZMt60oHhpgXwwIsJHu0Zw2N_Y0dCuaTw5OkV4uWWjn0oB-tATmFhAaBy4M2q_9-vM-gI1INjWRVMTHrEbqZH25d4l56knOleInR06UeYaggyAbokStzjhwIOJog91ZeBsx4SdwlX_BFhAYbaJd3TePXBak1vZnjwiGHfjgXEEKgHkuUalnIqdDKDrgGob7DUUgOthkpbkmOJ5VDqNVNK0jPIamfMVVEvciFhAZ0AGhf95y6GksoNmT2lziWkZa3I7SFTd5UcYXl-05J0bG9fBf3WFvCzYg66eUNx1hBRiDYPMjnbxdttVBxBVCVhAH7tppih8qxtyLctlIcMewHy_d-ohskEWGDt7VCzh3XpVVgkM0TQduLySSpe_Zk43Rc4PsXu8s86AH4Wns3h7pFhAh_Hb6SwHutTIeQ6TkUmEiGuJ3COMO-zJpwAknoN93lh239fvO8EyHfhTafhqfIduCJkyK8qKAGmZzk8pNndphVhA4LjPaRdQMlMM80E458GP4S8h57pyU0gLetp-g28Nw8ZwNfBFshfTbDzEU7K8VyUBQBwoHLRJUh17klWNn9DXLVhADNaC6GlNtvaiVgq2a3-IplekXK1S_D0-AH54n_fWlduVT73PrE4Wp-UPynWyVdrad0KERdt2HN_i2DdTeVEk4asAWCB6mA8ACbmdL38kt8K73N8IVKXlsEuEUy-pUzvay08-NgFYINYpla0Iph_vW2rEZ68aHOfFPuiT0Up9fxek8cEv2_DyAlggxSAYPxQMYUk2g3HuGgljVGTR9TX4vCOXhr-XroeqeXUDWCDnE51GOCGstC1ISNAwHakVzjWvh3JVNe6KkLAVu5tgzQRYIArgj_H_5K8v-PKSIlSH5GO5bLdC0henQUlORe0jW8MZBVggCnIh1I3cpst7rzWSsZYN_jFer3bWRVP64MLVDDgyT74GWCCRCvkR1UVWrQy0ajSBTDy7A_LRGCio6NmoT-J5zBfifAdYIKV2a2ib34i-y8yfZ0VRgifj7Kq2TfiIWKJ9Vu_ah-NSCFggpw-AOPUIILQmW7XFgod6La0OEKA8j3n49hUfCaAuUBAJWCDvKsdM4cqHi_7E2g8EdLYvCRh-vFC-A0MweEIql8rxMwpYIAyxtRiDditxCY73FWWDlbuP_KnEVcySFIyA4VJpJ9nJgxQVFw"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:a3d96e13-f91a-409f-bfc6-d1b05c196f63",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:fa3fc35a-fc06-401c-8772-f26ee957c8b0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 465,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:cb0985c1-a79d-4297-b747-05ae4cfc137f",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2093,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:35693f1d-5d93-4687-8338-149fd4184159",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:f09149e5-018c-40f9-b647-435463785bca",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41343,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:0b2504ee-ed2f-459f-b407-96f5ef935a19",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:5c3a5e24-cfdb-4bbc-aae8-d2075d1866e0",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:b1343a44-9f1a-4035-91e0-70acaa111c15",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:cf16308c-b95c-4d11-bb3a-c7c0c363ea68",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:b851586b-8b9d-4baa-9beb-a5f4748688ea",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:10711ce5-727f-480e-b0ec-cbe6c03716a3",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41815,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:c5ffbdce-9174-4fc3-bd0f-7cafaa2a668d",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:8f03d28d-11ed-4a71-98db-1ee31b431207",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:0cfd7c34-4ad1-4d1a-adae-cca2f9e54e04",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "jU4Yh5mLFMQhZMtzmm89N",
              "ctx": null,
              "_testId": "urn:uuid:24979969-0c9b-4c98-9392-83458c09aa31",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "yTxdaVWUQ-u0INjY9tdBj",
              "ctx": null,
              "_testId": "urn:uuid:1678fcca-9b13-4a61-b640-2b7dd198a4f4",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39321,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "XzUv5yQsgUNG747kfw1z2",
              "ctx": null,
              "_testId": "urn:uuid:99dbc480-c741-4b4f-ba9a-9944a9bf3912",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41968,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 42083,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 512,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 42595,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 290,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 42885,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 307,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 43192,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 454,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 43646,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 363,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 44009,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 381,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 44390,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 367,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 44757,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 209,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "0vEx5EWufJ9rApqNr4yt4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 44966,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 211,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "5H40qbFZZekOAe5QovXZa",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:8469b029-b97e-4d7c-b25e-69cd12ee67fe",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:e1f38eae-f46b-4994-98e2-362809f1c98f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45177,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:b4a10240-69a5-4818-a8c7-7de963dee77c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 231,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:88679eb9-f6a8-40ef-92cb-1f50d4045856",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:37Z",
                          "proofValue": "u2V0BhVhAiadXqbsxyx9CxqwrRhgkmZGQHo9kvuR_liuoBvvl3KnZHGruTbfGIlBLUS-oyLZFrGT-MP6aDdTZWiJuQD2Y4lgjgCQDVKafjdpzs6iGkwc85KZbShoBtZ-0EYTaih5HXfzyr8OBWEAMGz00lei8VltEtUDnbInSR3LKrTAez6GIyOnTLsN00WVu-EUdHiDJ-mFW_FK1N3xe_SQltSbW_jHjKleD-ugPoIMAAQM"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:88679eb9-f6a8-40ef-92cb-1f50d4045856\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-05T05:06:37Z\",\"proofValue\":\"u2V0BhVhAiadXqbsxyx9CxqwrRhgkmZGQHo9kvuR_liuoBvvl3KnZHGruTbfGIlBLUS-oyLZFrGT-MP6aDdTZWiJuQD2Y4lgjgCQDVKafjdpzs6iGkwc85KZbShoBtZ-0EYTaih5HXfzyr8OBWEAMGz00lei8VltEtUDnbInSR3LKrTAez6GIyOnTLsN00WVu-EUdHiDJ-mFW_FK1N3xe_SQltSbW_jHjKleD-ugPoIMAAQM\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            }
                          ],
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-05T05:06:37Z",
                          "proofValue": "u2V0BhVhAiadXqbsxyx9CxqwrRhgkmZGQHo9kvuR_liuoBvvl3KnZHGruTbfGIlBLUS-oyLZFrGT-MP6aDdTZWiJuQD2Y4lgjgCQDVKafjdpzs6iGkwc85KZbShoBtZ-0EYTaih5HXfzyr8OBWEAMGz00lei8VltEtUDnbInSR3LKrTAez6GIyOnTLsN00WVu-EUdHiDJ-mFW_FK1N3xe_SQltSbW_jHjKleD-ugPoIMAAQM"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/multikey/v1",
                          "id": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "Multikey",
                          "controller": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "publicKeyMultibase": "zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:88679eb9-f6a8-40ef-92cb-1f50d4045856",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:115:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:7ef8dc44-2d41-42ac-ba4f-dd9ac06e8138",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:9a90db9c-241d-4d58-991d-6ccb1a210fca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45717,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:36b357da-51c5-4abc-8198-ebdce52c91b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:5b075358-b341-45ae-b174-c2c35fe51799",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45843,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:6da7413b-be72-45b5-aa70-1164f1355d9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 136,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:07466327-c6d3-4559-ad73-c05bd398a647",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "0vEx5EWufJ9rApqNr4yt4",
              "ctx": null,
              "_testId": "urn:uuid:547632fc-6428-4c47-86e2-5dc21cb27f6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-ecdsa-test-suite",
    "subtitle": "Interoperability test suite for ECDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c/vc-di-ecdsa-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-ecdsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Tyler Minard",
        "url": "https://github.com/tminard",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "Data Integrity ecdsa 2019 Interoperability Report 1.0",
  "stats": [
    "Tests passed 388/424 91%",
    "Tests failed 36/424 9%",
    "Failures 36",
    "Tests skipped 0",
    "Total tests 424"
  ]
}