{
  "matrices": [
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:6de94c87-8466-402c-858d-3e48db32abd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:e515cd06-2122-4be5-ab1d-7d3a95de263f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:31cb4d02-687e-452b-a656-194e224966f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:d2858ec2-36d2-4202-8baa-ad4f461cb378",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:d604ea3c-86fc-4381-8287-967811895f52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:dc63b757-8219-4f3e-9d0b-2510106acbb4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:fca944e5-2d3c-4264-bd05-e9e5f5846825",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:5c4e7943-3340-462c-890c-c54e8d5e6511",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:04c893dd-efde-47cb-ae58-c80d081c4308",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:726d966e-bdb6-45b7-8726-092dce28aad1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:e13638b5-47d7-40c3-ace8-dd04c607a05b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:f94dde49-1029-45fb-9271-2eed84294945",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:7fbce2cf-5d6a-4d65-a913-f0e8a1b48b34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:996c2bca-2a0d-454f-8432-ec5bfe721a22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:a9e5ca5c-021b-4051-b7c7-aef2630b428a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 439,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MMXhsEx7-wNgRqNv8Eo5s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:f32889f7-5c93-4ddf-80c3-9f83edcfe6fb"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:2fb9e41b-26f6-4642-8258-f544b7bf84f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:8acdfe22-d334-4eba-8cdb-8cda4d9bc3cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:cf03aa7f-3ebd-4862-8535-8a6883edb68a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:ea2c1b65-9c1c-441e-9fe6-5a24ec6a5498",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:cc555a45-7bca-4d4e-a07e-a58311d43ea2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:95242f01-f1ef-41dd-bb30-ea4f703a66d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:10fe74b1-6125-44ca-a2a2-9652dd7f2566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:d8dcf879-22b1-4470-8bdc-00af1f83419a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:cc1f666e-e94d-4895-9bac-d55f5471b747",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:0a2193be-286f-40a8-8390-f388a26191f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:4cd851af-c47f-4fc3-b151-b2cf445903c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:5ae83aa9-678f-46d6-93c4-14a98126a21d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:b9655e71-ca1c-4a61-b4df-c1ddd3c233c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:8423828d-5cba-4ea8-be75-580a1df527e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:3d389fde-ce24-4166-bdcb-7f5debdf61a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MMXhsEx7-wNgRqNv8Eo5s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:4652dd08-bf13-45ca-baea-f433d66f3b1a"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:2848618a-b8ad-48c6-a1d8-178e3b928544",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:6da128fa-615f-4559-a7b5-9f0e1d009661",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:0c2155ad-fbba-4933-95a7-0510b35b794e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:65a485b4-d20d-4f81-b0d3-297e60c69961",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:bc1010f7-dfc5-461f-804d-03941f155202",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:3df77f00-7c82-4cf5-ae99-994514c33ad4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:c6db2583-2ce7-41d3-bb55-93f8385585b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:317b0dc7-c8ce-4610-9714-cdb6bfe5df3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:c339597d-27ec-4cad-af64-813ab38c7f5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:eacf087a-5bb3-46d3-965b-ab703cc2d9e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:594d23af-1b35-438c-a766-2d2193cafc91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:906a3510-c339-4974-9217-ed9bfd2ec490",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:4593f4d5-235f-4dfd-b768-d6b43bb5b283",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:d28d58a5-d1b5-4784-86b8-a11eaa57213f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:240aa95c-1bce-488f-8841-79da26fa92f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 505,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MMXhsEx7-wNgRqNv8Eo5s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:137e0824-d491-4cbe-9ba1-713438a48d10"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:e9c34c98-7fe6-4159-aa75-a103c52ab7e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:6ad637d3-f406-4706-b26c-f64088a26ead",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:0306b8b6-fc1a-4842-ac01-3b028cb04a38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:51e9a3fa-029b-43e5-88d4-c4dff3f7f848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:08be107c-f180-4190-8451-15eb3ebbc073",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:14027048-ed40-4452-92ac-ec3b71becc97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:52be6b6f-d8ee-4480-beca-4bf6ca1ec846",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:5a3ec94f-479a-402c-9763-9f295d7058d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:825dbc8b-413e-46fb-bbe7-cbaacf443072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:36bddb71-134b-4b90-8809-6771415a356a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:ee1dff40-d781-410f-81c6-ddf5b531c2b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:1dca3959-7c71-4b17-9841-a03667bf12ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:ddcfd96c-8d4c-4ee9-b2f9-0316eb24a90b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:f0bbdfed-7fe9-4712-8350-aeaa182be156",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:8bf45a1c-7aec-4584-b796-8dad6b7eb5f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MMXhsEx7-wNgRqNv8Eo5s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:38bd1127-c69b-449d-b921-a0de70b62d1a"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:13c3f751-c1d3-4cb0-8ed5-0a758ec013ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:afbc0fb2-b197-4699-983b-f731e48a45c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:035d909f-2d9b-4b75-bb04-6bd405cc6591",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:a595c12c-8c2a-4f4b-bdaa-c94de7e16443",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:147:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:d63fa08d-b495-477c-a8ab-79f29859fe43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:4c110178-deca-4a72-b416-0e0661d1ed8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:4b006708-00fd-40bf-a20a-fcbc4d359137",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:fdae17c0-68d7-4cae-818c-ee365010f712",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:8bc4b68e-cf31-4841-b2bd-7101482da154",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:4fd35d78-bb54-44b2-b700-0a9a94586427",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:1cf18cfd-a120-4ea8-aadf-a2f9893be6f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:69164343-8191-48db-b474-5f3f2a96242d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:9f8d1f89-fa45-442a-bf4f-8403b42f9d43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:2f64b3fc-e8f6-4145-9184-f37161012249",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:27ad85ae-4ae4-4547-8e80-b6eea810fdfa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1769,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MMXhsEx7-wNgRqNv8Eo5s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:9c17ada0-f517-409a-bb57-1f485be62d0e"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:3f7128b4-13c8-4674-8d00-63e444292d72",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:ec3a9cd1-a599-4fa7-b14c-9a0b808dd1f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:6704e9e5-2d61-4a68-85c2-b6b261bfe957",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:cf986efe-62b0-454e-be79-66d03c48d8b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:da03ea67-d4a7-4859-a31c-f3c607fc260f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:2a8584ce-2825-410d-af54-8e20fc866926",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:65a482cd-f39f-42e5-9ff4-e1b57bff9c9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:ad1c2c3b-71b0-4912-9ccf-b687325cc043",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:30a580c1-420a-4e6a-bad2-21d8ae183a9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:f86f24ee-db6e-4995-baa1-432dec7e25e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:44c97e8d-0a32-4f3b-9bf2-036c5205d75f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:17567d5c-e4c1-4c25-bfff-1a5540499aa1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:a0f0556a-7a9c-4a9f-99f3-fdb4e11c511f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:4247fc25-3aa5-43fb-8a55-22483bb6b290",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:06e064b3-19ac-4044-a0e1-5243d5f62d42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 626,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MMXhsEx7-wNgRqNv8Eo5s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:7be746e8-bf2e-41d0-929a-b12c4e66def9"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:9ca05f51-d96b-4385-bf3d-5ef167099b0f",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:6de94c87-8466-402c-858d-3e48db32abd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:2fb9e41b-26f6-4642-8258-f544b7bf84f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:2848618a-b8ad-48c6-a1d8-178e3b928544",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:e9c34c98-7fe6-4159-aa75-a103c52ab7e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:13c3f751-c1d3-4cb0-8ed5-0a758ec013ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:3f7128b4-13c8-4674-8d00-63e444292d72",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:e515cd06-2122-4be5-ab1d-7d3a95de263f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:8acdfe22-d334-4eba-8cdb-8cda4d9bc3cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:6da128fa-615f-4559-a7b5-9f0e1d009661",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:6ad637d3-f406-4706-b26c-f64088a26ead",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:afbc0fb2-b197-4699-983b-f731e48a45c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:ec3a9cd1-a599-4fa7-b14c-9a0b808dd1f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:31cb4d02-687e-452b-a656-194e224966f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:cf03aa7f-3ebd-4862-8535-8a6883edb68a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:0c2155ad-fbba-4933-95a7-0510b35b794e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:0306b8b6-fc1a-4842-ac01-3b028cb04a38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:035d909f-2d9b-4b75-bb04-6bd405cc6591",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:6704e9e5-2d61-4a68-85c2-b6b261bfe957",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:d2858ec2-36d2-4202-8baa-ad4f461cb378",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:ea2c1b65-9c1c-441e-9fe6-5a24ec6a5498",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:65a485b4-d20d-4f81-b0d3-297e60c69961",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:51e9a3fa-029b-43e5-88d4-c4dff3f7f848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:a595c12c-8c2a-4f4b-bdaa-c94de7e16443",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:147:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:cf986efe-62b0-454e-be79-66d03c48d8b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:d604ea3c-86fc-4381-8287-967811895f52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:cc555a45-7bca-4d4e-a07e-a58311d43ea2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:bc1010f7-dfc5-461f-804d-03941f155202",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:08be107c-f180-4190-8451-15eb3ebbc073",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:d63fa08d-b495-477c-a8ab-79f29859fe43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:da03ea67-d4a7-4859-a31c-f3c607fc260f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:dc63b757-8219-4f3e-9d0b-2510106acbb4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:95242f01-f1ef-41dd-bb30-ea4f703a66d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:3df77f00-7c82-4cf5-ae99-994514c33ad4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:14027048-ed40-4452-92ac-ec3b71becc97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:4c110178-deca-4a72-b416-0e0661d1ed8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:2a8584ce-2825-410d-af54-8e20fc866926",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:fca944e5-2d3c-4264-bd05-e9e5f5846825",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:10fe74b1-6125-44ca-a2a2-9652dd7f2566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:c6db2583-2ce7-41d3-bb55-93f8385585b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:52be6b6f-d8ee-4480-beca-4bf6ca1ec846",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:4b006708-00fd-40bf-a20a-fcbc4d359137",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:65a482cd-f39f-42e5-9ff4-e1b57bff9c9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:5c4e7943-3340-462c-890c-c54e8d5e6511",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:d8dcf879-22b1-4470-8bdc-00af1f83419a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:317b0dc7-c8ce-4610-9714-cdb6bfe5df3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:5a3ec94f-479a-402c-9763-9f295d7058d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:fdae17c0-68d7-4cae-818c-ee365010f712",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:ad1c2c3b-71b0-4912-9ccf-b687325cc043",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:04c893dd-efde-47cb-ae58-c80d081c4308",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:cc1f666e-e94d-4895-9bac-d55f5471b747",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:c339597d-27ec-4cad-af64-813ab38c7f5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:825dbc8b-413e-46fb-bbe7-cbaacf443072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:8bc4b68e-cf31-4841-b2bd-7101482da154",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:30a580c1-420a-4e6a-bad2-21d8ae183a9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:726d966e-bdb6-45b7-8726-092dce28aad1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:0a2193be-286f-40a8-8390-f388a26191f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:eacf087a-5bb3-46d3-965b-ab703cc2d9e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:36bddb71-134b-4b90-8809-6771415a356a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:4fd35d78-bb54-44b2-b700-0a9a94586427",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:f86f24ee-db6e-4995-baa1-432dec7e25e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:e13638b5-47d7-40c3-ace8-dd04c607a05b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:4cd851af-c47f-4fc3-b151-b2cf445903c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:594d23af-1b35-438c-a766-2d2193cafc91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:ee1dff40-d781-410f-81c6-ddf5b531c2b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:1cf18cfd-a120-4ea8-aadf-a2f9893be6f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:44c97e8d-0a32-4f3b-9bf2-036c5205d75f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:f94dde49-1029-45fb-9271-2eed84294945",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:5ae83aa9-678f-46d6-93c4-14a98126a21d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:906a3510-c339-4974-9217-ed9bfd2ec490",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:1dca3959-7c71-4b17-9841-a03667bf12ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:69164343-8191-48db-b474-5f3f2a96242d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:17567d5c-e4c1-4c25-bfff-1a5540499aa1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:7fbce2cf-5d6a-4d65-a913-f0e8a1b48b34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:b9655e71-ca1c-4a61-b4df-c1ddd3c233c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:4593f4d5-235f-4dfd-b768-d6b43bb5b283",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:ddcfd96c-8d4c-4ee9-b2f9-0316eb24a90b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:9f8d1f89-fa45-442a-bf4f-8403b42f9d43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:a0f0556a-7a9c-4a9f-99f3-fdb4e11c511f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:996c2bca-2a0d-454f-8432-ec5bfe721a22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:8423828d-5cba-4ea8-be75-580a1df527e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:d28d58a5-d1b5-4784-86b8-a11eaa57213f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:f0bbdfed-7fe9-4712-8350-aeaa182be156",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:2f64b3fc-e8f6-4145-9184-f37161012249",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:4247fc25-3aa5-43fb-8a55-22483bb6b290",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "9-JMjEeP_Xelu8FDcSKI_",
              "ctx": null,
              "_testId": "urn:uuid:a9e5ca5c-021b-4051-b7c7-aef2630b428a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "nvKTABbdvgv7H01HXCvQb",
              "ctx": null,
              "_testId": "urn:uuid:3d389fde-ce24-4166-bdcb-7f5debdf61a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jDybWQ5iFfu4wzAb7RlBO",
              "ctx": null,
              "_testId": "urn:uuid:240aa95c-1bce-488f-8841-79da26fa92f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "8LJoM9SJufouL0xVmqCF4",
              "ctx": null,
              "_testId": "urn:uuid:8bf45a1c-7aec-4584-b796-8dad6b7eb5f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "7fE_O266539L6UG3tDiGN",
              "ctx": null,
              "_testId": "urn:uuid:27ad85ae-4ae4-4547-8e80-b6eea810fdfa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "v1UPPG7SkEHnYW6RliuNh",
              "ctx": null,
              "_testId": "urn:uuid:06e064b3-19ac-4044-a0e1-5243d5f62d42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:982f22aa-a247-45b8-a783-6ab078ad7672",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:abf94e60-3751-4a72-99de-c1ef612d6ece",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:cc9f9a1a-d7a1-4196-a549-3f28cf0dc5fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:ab63cb5e-4b8e-43ac-bdeb-5c925e737bf4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:95bb8031-bce5-43e0-bbd6-d241c28090a1\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-26T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:39Z\",\"proofValue\":\"zewSkr8bBT6aU9cW86tT9rzsjdxq72pCVYzbPDuZR1PeDxZ67xKpC29cVMcyaEGcTQmF6d9gz84LKiAi39rnT4ah\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:fd542016-7c15-4303-8e8f-6dee60f23aaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:be327b9f-4c78-4d7a-8309-07d8dd9218e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:36ca1cda-67ff-46e0-b934-e9b0c0b62f33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ni-Vb53gfIixC1IBsH14Y",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:e6e42ee7-c2c8-44b9-813e-be1b8c8896f0"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:a90074ef-a24b-4095-9478-fa930d54c9fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:705d125c-9609-4395-9a99-27067c536c56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:af579c33-dcdb-4c39-adc2-93e8ad281fcf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:700e55e5-af53-4fd6-af86-85eb78a7a3c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Invalid signature."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:372aa8ca-7880-401c-8ed8-765c0b2c6bf2\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-05-26T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:39Z\",\"proofValue\":\"zXE3i6PyyJqLF1vuiBLVNcseF4TeisgnYeonB9cgA4Kq2Rn6kPQDAAUx9wBkdJ5sGE4Z6JEgPNQmoKThB7BDj33HAbdajgF6XeHwFzA9oz46wEhYJ2J6fHjAPiDmSA7zpzQg\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:e3737901-b5f3-488f-87fb-66075ba9b912",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3049,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:2a8aa423-852a-4b03-aa87-dd869e9e8166",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:83f4377c-9e1f-4a57-9eff-786ae22fa6d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 461,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ni-Vb53gfIixC1IBsH14Y",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:914a2cbb-01e9-4bb8-b721-053d9562ecc7"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:27270a5d-ea5a-436d-beb1-9b1c00190737",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:7623814c-e046-4a5e-9075-5dff02187a0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:a27f8eb3-a6fb-4889-8130-5b23e17dc2b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:4a7d9eb5-49cf-4888-bdcd-131addda2d0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:098f5e39-f73e-4d06-8c4b-4c07af87646d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:ae5802c2-4dae-4723-a996-da9bfab55223",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:b5d31762-5ff8-4fd7-a53d-68943364906a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 274,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ni-Vb53gfIixC1IBsH14Y",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:87bef7b6-41ac-4725-921a-f5382cf870bd"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:a755fc90-b482-44d5-b647-fc28a01976cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:3ebc29d9-544b-45c1-b996-e86f181525f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:70128065-5611-4c42-bfd0-d33735039119",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:306c5291-46d1-41f4-8d5d-daf4f7ee2476",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:8b994d76-5eaf-40dc-847c-34e8790415b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:e75170b7-0f06-47b8-8f53-5cb023944f05",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:0ae0efff-c0dd-47db-b5c6-a72dba3269ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 301,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ni-Vb53gfIixC1IBsH14Y",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:ccdb4173-d3a3-4d5a-b426-c09d6b8d08fb"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:3a7e731c-e3c5-4a73-8f94-6f2ad37da26b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:ac7ab33c-ac4c-44cf-8aa7-24c4490e5dbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]",
                "showDiff": true,
                "actual": "[\n  \"ecdsa-2019\"\n]",
                "expected": "[\n  \"ecdsa-rdfc-2019\"\n  \"ecdsa-jcs-2019\"\n]",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:104:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:d265eac3-ab79-4133-bbf2-5943d6d8f5c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:119:48)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:395afb8b-e3ee-4205-88cd-8dee01f7abe0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"@protected\":true}],\"id\":\"urn:uuid:3af6c422-316a-44b4-a1bb-ca160cbdf027\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-26T05:05:40Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z23Zj4QiESFxfkHnHd4xusYBfVj2TrEhjwTPNLxGTNFfcPM1JfPNfW2a6xnNjcZdCMFH4Hk5PMFDhzE6xTV6Rmyvr\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-26T05:05:41Z\",\"cryptosuite\":\"ecdsa-2019\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:dc4ef78b-02c6-4b37-9c50-a235ef439f01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3673,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:fe9d2aef-5783-4ba2-8ac8-1adcd1b9bfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:6573a7ba-ac81-4eaa-a6e6-28403fc2dd1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ni-Vb53gfIixC1IBsH14Y",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:730041de-fd1d-4c87-bbe1-cf01196c4c7a"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:1ce30a58-6369-46d2-aef0-5ec27383574c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:0cd493ce-3647-4177-8b73-e6427e9fec85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:e84f2eb6-c83d-4320-bba8-775507422bb1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:b9fe9044-a321-4d5d-a1ee-adb75eb14d24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:121641b5-b252-4ee1-86d4-c4ed3342f3a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:2b1d7918-dcd2-47a6-87ab-dbe7a7ec1566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:3862e26d-5c51-4a68-bb67-052cbc3a94c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ni-Vb53gfIixC1IBsH14Y",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:69c692e7-df02-4503-96c7-a85b8cdfba13"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Hgjc3cgdUwz_R1U7iMk01",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:1b74eddb-4d5d-43bd-babd-4e31cf5d96bf",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "The (proof) type property MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:982f22aa-a247-45b8-a783-6ab078ad7672",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:a90074ef-a24b-4095-9478-fa930d54c9fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:27270a5d-ea5a-436d-beb1-9b1c00190737",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:a755fc90-b482-44d5-b647-fc28a01976cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:3a7e731c-e3c5-4a73-8f94-6f2ad37da26b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:1ce30a58-6369-46d2-aef0-5ec27383574c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:abf94e60-3751-4a72-99de-c1ef612d6ece",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:705d125c-9609-4395-9a99-27067c536c56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:7623814c-e046-4a5e-9075-5dff02187a0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:3ebc29d9-544b-45c1-b996-e86f181525f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:ac7ab33c-ac4c-44cf-8aa7-24c4490e5dbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]",
                "showDiff": true,
                "actual": "[\n  \"ecdsa-2019\"\n]",
                "expected": "[\n  \"ecdsa-rdfc-2019\"\n  \"ecdsa-jcs-2019\"\n]",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:104:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:0cd493ce-3647-4177-8b73-e6427e9fec85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:cc9f9a1a-d7a1-4196-a549-3f28cf0dc5fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:af579c33-dcdb-4c39-adc2-93e8ad281fcf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:a27f8eb3-a6fb-4889-8130-5b23e17dc2b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:70128065-5611-4c42-bfd0-d33735039119",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:d265eac3-ab79-4133-bbf2-5943d6d8f5c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:119:48)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:e84f2eb6-c83d-4320-bba8-775507422bb1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify with a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:ab63cb5e-4b8e-43ac-bdeb-5c925e737bf4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:95bb8031-bce5-43e0-bbd6-d241c28090a1\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-26T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:39Z\",\"proofValue\":\"zewSkr8bBT6aU9cW86tT9rzsjdxq72pCVYzbPDuZR1PeDxZ67xKpC29cVMcyaEGcTQmF6d9gz84LKiAi39rnT4ah\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:700e55e5-af53-4fd6-af86-85eb78a7a3c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Invalid signature."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:372aa8ca-7880-401c-8ed8-765c0b2c6bf2\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-05-26T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:39Z\",\"proofValue\":\"zXE3i6PyyJqLF1vuiBLVNcseF4TeisgnYeonB9cgA4Kq2Rn6kPQDAAUx9wBkdJ5sGE4Z6JEgPNQmoKThB7BDj33HAbdajgF6XeHwFzA9oz46wEhYJ2J6fHjAPiDmSA7zpzQg\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:4a7d9eb5-49cf-4888-bdcd-131addda2d0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:306c5291-46d1-41f4-8d5d-daf4f7ee2476",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:395afb8b-e3ee-4205-88cd-8dee01f7abe0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"@protected\":true}],\"id\":\"urn:uuid:3af6c422-316a-44b4-a1bb-ca160cbdf027\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-26T05:05:40Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z23Zj4QiESFxfkHnHd4xusYBfVj2TrEhjwTPNLxGTNFfcPM1JfPNfW2a6xnNjcZdCMFH4Hk5PMFDhzE6xTV6Rmyvr\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-26T05:05:41Z\",\"cryptosuite\":\"ecdsa-2019\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:b9fe9044-a321-4d5d-a1ee-adb75eb14d24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:fd542016-7c15-4303-8e8f-6dee60f23aaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:e3737901-b5f3-488f-87fb-66075ba9b912",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3049,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:098f5e39-f73e-4d06-8c4b-4c07af87646d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:8b994d76-5eaf-40dc-847c-34e8790415b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:dc4ef78b-02c6-4b37-9c50-a235ef439f01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3673,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:121641b5-b252-4ee1-86d4-c4ed3342f3a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:be327b9f-4c78-4d7a-8309-07d8dd9218e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:2a8aa423-852a-4b03-aa87-dd869e9e8166",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:ae5802c2-4dae-4723-a996-da9bfab55223",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:e75170b7-0f06-47b8-8f53-5cb023944f05",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:fe9d2aef-5783-4ba2-8ac8-1adcd1b9bfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:2b1d7918-dcd2-47a6-87ab-dbe7a7ec1566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "DSun-6sxXUAH6Mho07qll",
              "ctx": null,
              "_testId": "urn:uuid:36ca1cda-67ff-46e0-b934-e9b0c0b62f33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "pAq4zpWtohDjJFcroKLrZ",
              "ctx": null,
              "_testId": "urn:uuid:83f4377c-9e1f-4a57-9eff-786ae22fa6d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vZyqMX6_IKYktsdZpikmu",
              "ctx": null,
              "_testId": "urn:uuid:b5d31762-5ff8-4fd7-a53d-68943364906a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "J1-LDkQLZx_xflu3y_RZh",
              "ctx": null,
              "_testId": "urn:uuid:0ae0efff-c0dd-47db-b5c6-a72dba3269ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Yi-T28hqe4KPsWzkLDeRB",
              "ctx": null,
              "_testId": "urn:uuid:6573a7ba-ac81-4eaa-a6e6-28403fc2dd1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B_bwwWpoqk4qm_C7RLmue",
              "ctx": null,
              "_testId": "urn:uuid:3862e26d-5c51-4a68-bb67-052cbc3a94c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:1a9ac927-1823-4e62-b910-193e62748774",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:52c3c83b-2091-4fa6-97a2-e988cfa05934",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:20811f69-cf9e-4cef-84ed-5e0dc848a80b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:93fe06e8-cf80-4047-99ae-beede4240fc0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:2f6f8267-e4bc-455f-9d90-fb7cf378af33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:d36492e4-a17c-4c94-92d1-bc06d6a891fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:37aa090e-3ff5-45f6-9ed5-728bbaa7afb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xsMOK-4Py2RBin3OMf6_B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:8759a8b3-59c7-46a6-bae0-068dcbcbf5dc"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:bb04a7e2-9247-4d76-90a6-4d7c785275cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:a10e2341-3a1a-40f5-8674-288bfe1bea7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:23a23899-47b9-4dc2-be5d-07f9a7766ac9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:9717c02e-6830-4969-b820-dd6142ed0ec2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:bb450760-3be8-4061-9393-563447705c3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4074,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:f6ed53a8-8fe3-4f54-b2b1-baa2dd952a24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:6440763c-7c19-47a6-ab71-e9b0ee67d910",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xsMOK-4Py2RBin3OMf6_B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:2c28f7db-6da7-4ef9-984c-d6b6bac51d19"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Hgjc3cgdUwz_R1U7iMk01",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:6ad4fe33-221b-4454-895d-26e73939d9bc",
      "columns": [
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384"
      ],
      "rows": [
        {
          "id": "The (proof) type property MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:1a9ac927-1823-4e62-b910-193e62748774",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:bb04a7e2-9247-4d76-90a6-4d7c785275cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:52c3c83b-2091-4fa6-97a2-e988cfa05934",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:a10e2341-3a1a-40f5-8674-288bfe1bea7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:20811f69-cf9e-4cef-84ed-5e0dc848a80b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:23a23899-47b9-4dc2-be5d-07f9a7766ac9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify with a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:93fe06e8-cf80-4047-99ae-beede4240fc0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:9717c02e-6830-4969-b820-dd6142ed0ec2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:2f6f8267-e4bc-455f-9d90-fb7cf378af33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:bb450760-3be8-4061-9393-563447705c3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4074,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:d36492e4-a17c-4c94-92d1-bc06d6a891fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:f6ed53a8-8fe3-4f54-b2b1-baa2dd952a24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Uj1-2FzNh9aHiXXT7-op3",
              "ctx": null,
              "_testId": "urn:uuid:37aa090e-3ff5-45f6-9ed5-728bbaa7afb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "gvaFwL23IwNFn8KzO-hRN",
              "ctx": null,
              "_testId": "urn:uuid:6440763c-7c19-47a6-ab71-e9b0ee67d910",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:ac18005c-3353-4ea1-aa86-8b8c250e8996",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:32c465d3-825f-45cc-a96f-e7c791a5052d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:f8d9ebd5-1921-466f-ae3b-bada9f479c06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:fbfdb4b3-5e26-4787-9604-ffa7469a1f9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:3bc97fa4-81d6-419a-ab8b-9f94ee79deb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:a3fe84c4-e1aa-4cea-b3b3-30135a80959b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4358,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:e3723a23-ec03-407e-9315-433a50c2e453",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:88174c60-f605-475e-b8e1-ef08740e8d0f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:d38cacc0-549d-428e-b5ea-6bf6ca0cdd96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:10149f0b-b874-4be9-bd5d-40f891b134dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4554,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:1c5f336e-7440-4f5b-82dd-b051d209da8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:22301abe-1403-4165-8813-2eae93008184",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:059b2826-5a03-4747-b674-b530805d948d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:a505d816-2cc3-4206-b526-c31794114f55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:18a8aff2-6d30-4074-9ce3-4bbe0d9396dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bzHVolr-cweGV3vUSRmV7",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:388ed5ee-bfdc-4f67-8d11-76527c70756a"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:bb3ef6b4-1eb5-4bd9-95a1-06d9f79b04d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4942,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:05c9dfee-1eef-4fc9-b8c3-d27c67380a3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:f3430465-9005-450c-a9d0-6a8f95598d3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:ab82c804-36a6-4513-88e9-d4954f1bf7b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5236,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:c20ae141-d51a-45a5-8426-00e1653a31aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:67769571-fa94-4f30-9463-a76be3e39902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:8f4435ae-e000-4f43-b27e-a5a7238094c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:4f4fedac-e9d6-4f5c-a566-040a3675c49d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:50a743dd-fb83-4d48-a80c-c772c1b027f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:42 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '262bbc3622458f654b298e6f81005645' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:42 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '262bbc3622458f654b298e6f81005645' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:aa0e164a-ad2f-49cd-804e-62a32bb3fa41",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:d226eaeb-3c40-44fe-b5c0-820a1d7b74a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:0d8dfa5a-e8cb-49f2-bfb6-df50fabf587b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5658,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:43 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '1d60cc9b0041bd2fd46bdc9257ea4f27' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:43 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '1d60cc9b0041bd2fd46bdc9257ea4f27' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:a2dd89af-93ae-4531-8d57-379c5b0ac06c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:7c22622c-aac0-49a2-8ebd-b03947e583ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5769,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:adbc726b-1ccc-4a28-9ccb-5910e9dc61d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4941,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bzHVolr-cweGV3vUSRmV7",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:b960ad10-f84d-4400-9a81-acfbeb536fd0"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:bb5c7131-2153-43b6-9a08-1479ae9f5b20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:0c9015b5-eea2-49e4-9bb2-fe1ccc2ab717",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:42f5df71-46b8-4058-b0cf-87168dec6f84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:eaed1c4b-8962-4af9-9d94-6b3c1102a4ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:5b2bfbee-96a3-498e-b8ed-58b2a1c3f8bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:0ac820f8-d894-4f6d-8a6c-735d3162aff3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5968,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:da79a4d6-2b0a-4dc4-ba47-5ec9714d6e7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:eae8d37e-d353-4b7b-828f-6310c148467f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6012,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:49c56e62-66f0-49d6-865d-257ee0169463",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:906af195-751a-46f9-a1e4-8231b1689ae6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:7e90fa53-e65e-49f4-9f2e-e2e7812858de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:45fac57a-f3ab-43be-8afc-6169e3d66ab3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:d55f80e0-5545-4104-8107-5050b2ebec23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6132,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:59001ef9-e393-48a9-a1c2-ae1fe18dcb1e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:bddd3b6b-da77-4f5d-9182-e334c8ebbb46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bzHVolr-cweGV3vUSRmV7",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:1918963a-51e0-4280-b33a-ee20a21da461"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:b116d4e2-80a2-4532-aab8-9163aeaa24fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:e38fbae6-59eb-4660-aa4d-66b1acbf1268",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:2a696c18-318c-4f35-baca-d43d84f580cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:88fb0063-980c-4d4d-b981-a8bb09d533dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:be1b2f16-81b7-415c-ad23-9fc329b30e6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:a5e56305-d652-4131-a754-47844d8aefe1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:97d2d492-14fb-48fe-82a9-aaba15e5689e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:eacb70e7-9cf2-4cab-806f-68346797841d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:089275e9-6326-43c9-9566-3fbca2ade9be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:afc185f3-b628-4d8f-85e6-d74307c18abc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:d60e2f2b-104b-4502-9b0e-73177bd10de5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:4f27f4bd-a198-4990-b1f1-bb499ae365ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:08c685bf-3311-4d69-9754-4f2d57c6bea4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:d931a1b6-706b-47f1-9a0f-dc3100904efe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7456,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:16bbba14-f8fc-4011-8e35-4c980eb094f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "bzHVolr-cweGV3vUSRmV7",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:8e0f5ee8-5d28-4d2a-9513-c6b392604702"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:ad63c02a-7f63-4088-b518-68c876471739",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:ac18005c-3353-4ea1-aa86-8b8c250e8996",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:bb3ef6b4-1eb5-4bd9-95a1-06d9f79b04d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4942,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:bb5c7131-2153-43b6-9a08-1479ae9f5b20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:b116d4e2-80a2-4532-aab8-9163aeaa24fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:32c465d3-825f-45cc-a96f-e7c791a5052d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:05c9dfee-1eef-4fc9-b8c3-d27c67380a3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:0c9015b5-eea2-49e4-9bb2-fe1ccc2ab717",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:e38fbae6-59eb-4660-aa4d-66b1acbf1268",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:f8d9ebd5-1921-466f-ae3b-bada9f479c06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:f3430465-9005-450c-a9d0-6a8f95598d3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:42f5df71-46b8-4058-b0cf-87168dec6f84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:2a696c18-318c-4f35-baca-d43d84f580cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:fbfdb4b3-5e26-4787-9604-ffa7469a1f9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:ab82c804-36a6-4513-88e9-d4954f1bf7b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5236,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:eaed1c4b-8962-4af9-9d94-6b3c1102a4ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:88fb0063-980c-4d4d-b981-a8bb09d533dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:3bc97fa4-81d6-419a-ab8b-9f94ee79deb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:c20ae141-d51a-45a5-8426-00e1653a31aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:5b2bfbee-96a3-498e-b8ed-58b2a1c3f8bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:be1b2f16-81b7-415c-ad23-9fc329b30e6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:a3fe84c4-e1aa-4cea-b3b3-30135a80959b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4358,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:67769571-fa94-4f30-9463-a76be3e39902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:0ac820f8-d894-4f6d-8a6c-735d3162aff3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5968,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:a5e56305-d652-4131-a754-47844d8aefe1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:e3723a23-ec03-407e-9315-433a50c2e453",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:8f4435ae-e000-4f43-b27e-a5a7238094c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:da79a4d6-2b0a-4dc4-ba47-5ec9714d6e7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:97d2d492-14fb-48fe-82a9-aaba15e5689e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:88174c60-f605-475e-b8e1-ef08740e8d0f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:4f4fedac-e9d6-4f5c-a566-040a3675c49d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:eae8d37e-d353-4b7b-828f-6310c148467f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6012,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:eacb70e7-9cf2-4cab-806f-68346797841d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:d38cacc0-549d-428e-b5ea-6bf6ca0cdd96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:50a743dd-fb83-4d48-a80c-c772c1b027f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:42 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '262bbc3622458f654b298e6f81005645' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:42 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '262bbc3622458f654b298e6f81005645' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:49c56e62-66f0-49d6-865d-257ee0169463",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:089275e9-6326-43c9-9566-3fbca2ade9be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:10149f0b-b874-4be9-bd5d-40f891b134dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4554,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:aa0e164a-ad2f-49cd-804e-62a32bb3fa41",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:906af195-751a-46f9-a1e4-8231b1689ae6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:afc185f3-b628-4d8f-85e6-d74307c18abc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:1c5f336e-7440-4f5b-82dd-b051d209da8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:d226eaeb-3c40-44fe-b5c0-820a1d7b74a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:7e90fa53-e65e-49f4-9f2e-e2e7812858de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:d60e2f2b-104b-4502-9b0e-73177bd10de5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:22301abe-1403-4165-8813-2eae93008184",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:0d8dfa5a-e8cb-49f2-bfb6-df50fabf587b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5658,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:43 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '1d60cc9b0041bd2fd46bdc9257ea4f27' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:43 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '1d60cc9b0041bd2fd46bdc9257ea4f27' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:45fac57a-f3ab-43be-8afc-6169e3d66ab3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:4f27f4bd-a198-4990-b1f1-bb499ae365ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:059b2826-5a03-4747-b674-b530805d948d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:a2dd89af-93ae-4531-8d57-379c5b0ac06c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:d55f80e0-5545-4104-8107-5050b2ebec23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6132,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:08c685bf-3311-4d69-9754-4f2d57c6bea4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:a505d816-2cc3-4206-b526-c31794114f55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:7c22622c-aac0-49a2-8ebd-b03947e583ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5769,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:59001ef9-e393-48a9-a1c2-ae1fe18dcb1e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:d931a1b6-706b-47f1-9a0f-dc3100904efe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7456,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "t9sPxdZpVlmQ_dErP64W9",
              "ctx": null,
              "_testId": "urn:uuid:18a8aff2-6d30-4074-9ce3-4bbe0d9396dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Ech8MxZgsWEw_Kq3Bzimi",
              "ctx": null,
              "_testId": "urn:uuid:adbc726b-1ccc-4a28-9ccb-5910e9dc61d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "PpOPPZONhJmLCTqWxKMU9",
              "ctx": null,
              "_testId": "urn:uuid:bddd3b6b-da77-4f5d-9182-e334c8ebbb46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "giqjk3o99_Y84_Hsjv29L",
              "ctx": null,
              "_testId": "urn:uuid:16bbba14-f8fc-4011-8e35-4c980eb094f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 7651,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 84,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 7735,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 196,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 7931,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 119,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8050,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 187,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8237,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 103,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8340,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 195,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8535,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 82,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8616,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 103,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8719,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 99,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8819,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 76,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8894,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 309,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9203,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 97,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9301,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 33,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9334,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 70,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9405,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 29,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9434,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 32,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9465,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 111,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9577,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 111,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9687,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 111,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9pABMv6-PCrpac3ak3cwC",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 9799,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 109,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:191d651e-0287-4b97-b5db-c4751ff0af97",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:109bb333-b264-4b79-ba48-92c71f6bf496",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1238,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:44027bc7-066a-4b14-81e4-8414057b1c5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 238,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:f9424a7f-438d-4e32-a96e-0f19743bb083",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256",
                        "issuanceDate": "2024-05-26T05:05:45Z",
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:05:45Z",
                          "proofValue": "z5RHru3fymeqhBgvienrkb3NVDzQ1U4P4ja1NguhUUqMZCnZQrctkcBBkMr5TWLCpSAJwGhmUZCHEv8fBLg4Yz244"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:f9424a7f-438d-4e32-a96e-0f19743bb083\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-26T05:05:45Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:45Z\",\"proofValue\":\"z5RHru3fymeqhBgvienrkb3NVDzQ1U4P4ja1NguhUUqMZCnZQrctkcBBkMr5TWLCpSAJwGhmUZCHEv8fBLg4Yz244\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/data-integrity/v2",
                            "https://w3id.org/security/multikey/v1"
                          ],
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:05:45Z",
                          "proofValue": "z5RHru3fymeqhBgvienrkb3NVDzQ1U4P4ja1NguhUUqMZCnZQrctkcBBkMr5TWLCpSAJwGhmUZCHEv8fBLg4Yz244"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/multikey/v1",
                          "id": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "Multikey",
                          "controller": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "publicKeyMultibase": "zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:f9424a7f-438d-4e32-a96e-0f19743bb083",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:67ba6214-82ef-4c03-b41f-733cc86e8688",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:89c3155c-95bf-43de-bc37-74a54cda0e52\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-05-26T05:05:45Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:45Z\",\"proofValue\":\"z3RseKEsjugNgT8wKQDVUe4cFs82U5f2BvEzMxgCoubJGrAymj5jhabJhku2a9hi1e78XDQNCn6e9o4VaBxxsadwC\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:89c3155c-95bf-43de-bc37-74a54cda0e52",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256",
                        "issuanceDate": "2024-05-26T05:05:45Z",
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:05:45Z",
                          "proofValue": "z3RseKEsjugNgT8wKQDVUe4cFs82U5f2BvEzMxgCoubJGrAymj5jhabJhku2a9hi1e78XDQNCn6e9o4VaBxxsadwC"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:9103313d-0a25-411a-ba05-95c9f14435ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "apicatalog.com: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:5b3679f8-9fef-4c36-81db-429e0a09f8aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:81dce0de-17fc-4f24-9282-4281290c36cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11941,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:05134dc5-6bc0-4352-8e97-45b743e27f96",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384",
                        "issuanceDate": "2024-05-26T05:05:45Z",
                        "proof": {
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:05:45Z",
                          "proofValue": "zXkrznjyfetwAe9XfRpWsjqY9bHj2VwqSw3fPHaw2K76MJEKFmbf97JHLSQruwEFaTxu41NEnh2tKcL2AQjQHBYgF7XpCdjqsFkVwrT9qKaJa7vjSWjYTbPfLKX9jdhDmo4T"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:05134dc5-6bc0-4352-8e97-45b743e27f96\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-05-26T05:05:45Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:45Z\",\"proofValue\":\"zXkrznjyfetwAe9XfRpWsjqY9bHj2VwqSw3fPHaw2K76MJEKFmbf97JHLSQruwEFaTxu41NEnh2tKcL2AQjQHBYgF7XpCdjqsFkVwrT9qKaJa7vjSWjYTbPfLKX9jdhDmo4T\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/data-integrity/v2",
                            "https://w3id.org/security/multikey/v1"
                          ],
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:05:45Z",
                          "proofValue": "zXkrznjyfetwAe9XfRpWsjqY9bHj2VwqSw3fPHaw2K76MJEKFmbf97JHLSQruwEFaTxu41NEnh2tKcL2AQjQHBYgF7XpCdjqsFkVwrT9qKaJa7vjSWjYTbPfLKX9jdhDmo4T"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:291:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:05134dc5-6bc0-4352-8e97-45b743e27f96",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:305ca0f0-8b3e-4462-b107-aa82c2f22102",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 231,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:cc7e976e-f8b0-4358-9bdf-0432c3ad2d70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:5d765659-5612-4456-83e2-c1bdd65293c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:78d244c8-1abe-4e23-a23b-46b50ecf3f88\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ\",\"issuanceDate\":\"2024-05-26T05:05:46Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:46Z\",\"verificationMethod\":\"did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ#zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5qVs2ofQBMSuWYEi6WrDySAaPyXoMf3VjaGrrm3NnJEzCyDz3AEuDpthkeQqsZ9xHtkZCcri8Y3qcpVciYZApgY6\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:78d244c8-1abe-4e23-a23b-46b50ecf3f88",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ",
                        "issuanceDate": "2024-05-26T05:05:46Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:46Z",
                          "verificationMethod": "did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ#zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5qVs2ofQBMSuWYEi6WrDySAaPyXoMf3VjaGrrm3NnJEzCyDz3AEuDpthkeQqsZ9xHtkZCcri8Y3qcpVciYZApgY6"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:72e25afb-1ed0-4af8-8e3f-8577fd344208",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:644256ad-8eb3-46ad-af39-38d1b5a8adb2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:eec8879d-0cd8-4951-b2ed-0e51c4b20742\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q\",\"issuanceDate\":\"2024-05-26T05:05:46Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:46Z\",\"verificationMethod\":\"did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q#z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5NqvbFhXbzbAu3RnHBg3EHg8YFrYohuqRcGr89dmNt7xAoBSQuqJeqbqDcbiDxnVoLMa5BZirvrGFEsvvAKYRG5qtJESEt8dmv2HUXKjV2bsPjuNkMEDVHiajfwbJJmzAk8\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:eec8879d-0cd8-4951-b2ed-0e51c4b20742",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q",
                        "issuanceDate": "2024-05-26T05:05:46Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:46Z",
                          "verificationMethod": "did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q#z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5NqvbFhXbzbAu3RnHBg3EHg8YFrYohuqRcGr89dmNt7xAoBSQuqJeqbqDcbiDxnVoLMa5BZirvrGFEsvvAKYRG5qtJESEt8dmv2HUXKjV2bsPjuNkMEDVHiajfwbJJmzAk8"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:9caf7fae-bd12-4401-8d64-d40518e11c85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "SpruceID: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:9c4f3ccb-b9ab-4658-8b8c-9779ddced142",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:d3332c7f-87e1-4048-ad0d-a9c0449b03a7\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-26T05:05:46Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zHB6WsBtJA4y12kqFkfp3bg8a4LrmkyQ5pqHsmSwziqzd8n69CwP7ApNrGdWH8oxVVveSjJ3phmGdf2wjtznkrZv\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-26T05:05:46.661Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            },
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            }
                          }
                        ],
                        "id": "urn:uuid:d3332c7f-87e1-4048-ad0d-a9c0449b03a7",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-05-26T05:05:46Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zHB6WsBtJA4y12kqFkfp3bg8a4LrmkyQ5pqHsmSwziqzd8n69CwP7ApNrGdWH8oxVVveSjJ3phmGdf2wjtznkrZv",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-05-26T05:05:46.661Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:801c4e8c-21af-4e42-a78f-fcd25157c770",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:f96d0c68-46cc-4409-8eed-16681005a733",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:9829820d-d5a9-4c57-a3fb-14d75d72b662",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:09d65d0c-c238-4412-8160-d1267fed5b1e\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-05-26T05:05:46Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3spoDwyqsnmndQP9s49Q3MpcePYK2ejjh9gUM1NJLzYjrjXGWvqBL7GwfRoSvHLs2pKd3hsgZw2Uk1Cx4kz2vz5C\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-05-26T05:05:46.796Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            },
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            }
                          }
                        ],
                        "id": "urn:uuid:09d65d0c-c238-4412-8160-d1267fed5b1e",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-05-26T05:05:46Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3spoDwyqsnmndQP9s49Q3MpcePYK2ejjh9gUM1NJLzYjrjXGWvqBL7GwfRoSvHLs2pKd3hsgZw2Uk1Cx4kz2vz5C",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-05-26T05:05:46.796Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            }
          ]
        },
        {
          "id": "bovine: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:b53f7f2f-813e-4f79-a882-c245cfb33511",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:5bf3abba-00d7-408f-a8a7-73c19c3895c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13241,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:4145ca36-b5f5-4282-b5a1-3d24b597ef5e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"},\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"id\":\"urn:uuid:35b7c9db-2b69-4983-88c3-019fd3803a02\",\"issuanceDate\":\"2024-05-26T05:05:47Z\",\"issuer\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\",\"proof\":{\"created\":\"2024-05-26T05:05:47Z\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z31DXBK54pJesXvbuuQtb9g716wZvnXEmtBxgTzqWbKM3HS9y4ytWws2Lb6TRGUa5eBydhAekD9ewL4i4chcbQLJG\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\"},\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:35b7c9db-2b69-4983-88c3-019fd3803a02",
                        "issuanceDate": "2024-05-26T05:05:47Z",
                        "issuer": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr",
                        "proof": {
                          "created": "2024-05-26T05:05:47Z",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z31DXBK54pJesXvbuuQtb9g716wZvnXEmtBxgTzqWbKM3HS9y4ytWws2Lb6TRGUa5eBydhAekD9ewL4i4chcbQLJG",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "9pABMv6-PCrpac3ak3cwC",
              "ctx": null,
              "_testId": "urn:uuid:5c79c829-086f-4de9-aada-bc6e408a8956",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:22f2c1d4-3944-4c27-9404-feba6ddbf52c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:08ca954d-5e60-4c8b-ab4f-a0b739994ccc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:0736da54-2508-4794-a9ef-4e682f801e75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:98d72686-3bd0-428a-afc1-e1360cb7076b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:fc8bebb5-08a6-4c0d-89a2-5cb00118ea2d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:06c6f89a-0705-41cb-b2df-4545b200df10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:26d20c4a-c04a-443f-97b2-2e0e9897c67e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:ae072075-3124-41b9-be31-7eab712d06d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:3e15f3ec-3616-4a32-a313-2df5d91da677",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:58717a7f-dfdd-4f83-b51c-ccd4188cb1a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:4bbe7d4d-189b-479b-8c86-13a105d612d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:3021482e-aebb-4386-a805-fe2502e98b95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:ecab2a6d-0ac2-4176-8c18-094d225086dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:f191b886-6257-4934-8d34-65115ce574a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:dc346203-ee5c-4d57-9619-6e68316c7a70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1103,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "30TIRf4XrOoRwh-Floiqc",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:910e8f81-5de6-4855-9994-4e267ab35080"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:76c79983-a00e-4b04-b5c8-be8ded592877",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:0ba55d49-d3f5-4ec9-ba36-74e3dadf969d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:b1256eef-f64c-45a9-9606-6c40745ee069",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:6abb4076-61ea-4263-a1d6-6435651717d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:fed6c890-7fcc-4ead-b38d-0a35ad9c0c8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:167abf85-1760-4868-9518-71b3d3ee8b99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:e69c4d0f-b98f-4f88-90c2-99666e541fa8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:7a2c5f35-97ca-483c-a6c1-7034e74d4fb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:a2417d55-e7a6-4ec3-9c73-1f3fb37b2e13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:f38bed3b-dd28-4ec5-940a-d130e69b282d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:5dd879ce-eb09-4622-83a3-505c8ab0573c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:8115f369-b3bb-4af5-ba9c-faee67030925",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:57f0f4d5-0e44-42c6-be96-c359e13c174e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:a4fad23c-b231-4e45-9897-55e2f889781c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:a11bb6db-9b00-4eb2-a86e-94e6bc59d318",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 526,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "30TIRf4XrOoRwh-Floiqc",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:f0665df4-1e3e-4803-a53f-c7c5fceed72e"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:8523e9c0-8137-48a4-8a26-1e2a57669815",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:1c45dfc3-2bbb-48bf-9eda-32bb2c2b21a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:1cb04f60-9b43-4f6f-bb13-69d40d2138e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:e907e48f-532e-41ca-bda0-9b6507115a70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:56363b6e-af44-4781-8d67-6665de5d1742",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:8b2ffb4f-4681-4427-b818-93d45ee899d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:05e6eb68-9f36-4863-8ec4-e8407420de30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:0603b455-68f8-47f8-9e12-d2f35baca8af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:8cb5c6eb-f618-425a-89f5-b46f5f6f3cf3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:6b359400-fdac-4edc-a0f6-8618e1d83eba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:b3a47b49-a922-46e6-92c0-a1d36471ed25",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:1fab9cc3-d992-43f6-a445-abd6377219d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:85552ec5-8150-4c02-a980-0994958d4881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:6504ff10-db41-48de-a8c1-1073c83298a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:734df119-4643-4044-b275-330ee0f38500",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15062,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 357,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "30TIRf4XrOoRwh-Floiqc",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:a30d88c2-6486-40e8-95c3-b39265e4197d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:077e5ed6-75b4-40a4-a577-5c911d20a19d",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:22f2c1d4-3944-4c27-9404-feba6ddbf52c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:76c79983-a00e-4b04-b5c8-be8ded592877",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:8523e9c0-8137-48a4-8a26-1e2a57669815",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:08ca954d-5e60-4c8b-ab4f-a0b739994ccc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:0ba55d49-d3f5-4ec9-ba36-74e3dadf969d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:1c45dfc3-2bbb-48bf-9eda-32bb2c2b21a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:0736da54-2508-4794-a9ef-4e682f801e75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:b1256eef-f64c-45a9-9606-6c40745ee069",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:1cb04f60-9b43-4f6f-bb13-69d40d2138e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:98d72686-3bd0-428a-afc1-e1360cb7076b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:6abb4076-61ea-4263-a1d6-6435651717d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:e907e48f-532e-41ca-bda0-9b6507115a70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:fc8bebb5-08a6-4c0d-89a2-5cb00118ea2d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:fed6c890-7fcc-4ead-b38d-0a35ad9c0c8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:56363b6e-af44-4781-8d67-6665de5d1742",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:06c6f89a-0705-41cb-b2df-4545b200df10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:167abf85-1760-4868-9518-71b3d3ee8b99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:8b2ffb4f-4681-4427-b818-93d45ee899d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:26d20c4a-c04a-443f-97b2-2e0e9897c67e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:e69c4d0f-b98f-4f88-90c2-99666e541fa8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:05e6eb68-9f36-4863-8ec4-e8407420de30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:ae072075-3124-41b9-be31-7eab712d06d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:7a2c5f35-97ca-483c-a6c1-7034e74d4fb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:0603b455-68f8-47f8-9e12-d2f35baca8af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:3e15f3ec-3616-4a32-a313-2df5d91da677",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:a2417d55-e7a6-4ec3-9c73-1f3fb37b2e13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:8cb5c6eb-f618-425a-89f5-b46f5f6f3cf3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:58717a7f-dfdd-4f83-b51c-ccd4188cb1a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:f38bed3b-dd28-4ec5-940a-d130e69b282d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:6b359400-fdac-4edc-a0f6-8618e1d83eba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:4bbe7d4d-189b-479b-8c86-13a105d612d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:5dd879ce-eb09-4622-83a3-505c8ab0573c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:b3a47b49-a922-46e6-92c0-a1d36471ed25",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:3021482e-aebb-4386-a805-fe2502e98b95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:8115f369-b3bb-4af5-ba9c-faee67030925",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:1fab9cc3-d992-43f6-a445-abd6377219d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:ecab2a6d-0ac2-4176-8c18-094d225086dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:57f0f4d5-0e44-42c6-be96-c359e13c174e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:85552ec5-8150-4c02-a980-0994958d4881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:f191b886-6257-4934-8d34-65115ce574a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:a4fad23c-b231-4e45-9897-55e2f889781c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:6504ff10-db41-48de-a8c1-1073c83298a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "uGO4MHODqNrLizZ9fEh94",
              "ctx": null,
              "_testId": "urn:uuid:dc346203-ee5c-4d57-9619-6e68316c7a70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "aDZucTFwGPoBE_YXsV1S6",
              "ctx": null,
              "_testId": "urn:uuid:a11bb6db-9b00-4eb2-a86e-94e6bc59d318",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "ZAaT77GC0IC1rqE1R2-fk",
              "ctx": null,
              "_testId": "urn:uuid:734df119-4643-4044-b275-330ee0f38500",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers 1.1)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "2BUkfSPbf3jMB6Flit29R",
              "ctx": null,
              "_testId": "urn:uuid:a8d645fe-f87d-40bd-b725-714cefd856e7",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15423,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "2BUkfSPbf3jMB6Flit29R",
              "ctx": null,
              "_testId": "urn:uuid:983e1448-0cd3-4080-9ed1-d54aa80f0928",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2BUkfSPbf3jMB6Flit29R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:250faef9-cec3-4e85-98b8-4578658439d3"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SZQoMKN6IB4UYrlXgipfw",
              "ctx": null,
              "_testId": "urn:uuid:febdc6d9-4003-4ee5-b691-6e4c4679d375",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-05-26T05:05:37Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zYkAJjWkV4P1ofXyk68j4CxUSS2WgCxLk29MFxsGtv1wg9o7ZkXuyWrK9h3H7DYqNGaQFUhTZLNY1KaUet2JEc4Yv4USmroUxsPpTeKq9JSvAY8VAwQ2iQcfZwzAMkkwprKN\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-05-26T05:05:37Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zYkAJjWkV4P1ofXyk68j4CxUSS2WgCxLk29MFxsGtv1wg9o7ZkXuyWrK9h3H7DYqNGaQFUhTZLNY1KaUet2JEc4Yv4USmroUxsPpTeKq9JSvAY8VAwQ2iQcfZwzAMkkwprKN"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SZQoMKN6IB4UYrlXgipfw",
              "ctx": null,
              "_testId": "urn:uuid:a31d3322-b0d9-48e8-86b7-096be0630691",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SZQoMKN6IB4UYrlXgipfw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:68e56276-cb67-4c2b-a790-a7ee2e68ce64"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "LjpAWbygXALi8vV61zC21",
              "ctx": null,
              "_testId": "urn:uuid:afb778fe-ba2f-43ba-a596-3d39e0479a10",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "LjpAWbygXALi8vV61zC21",
              "ctx": null,
              "_testId": "urn:uuid:f6c5f168-a80b-47c6-82a4-0a4562bf2c0c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16017,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LjpAWbygXALi8vV61zC21",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:ca918a2f-bc7f-480f-9efc-b31e808ada8c"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "NVbii6jrIViFgDUCicZFw",
              "ctx": null,
              "_testId": "urn:uuid:db154659-227e-4071-aadb-449922427851",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "NVbii6jrIViFgDUCicZFw",
              "ctx": null,
              "_testId": "urn:uuid:1cf059dc-6d83-4578-ae66-b12c3cf8d5a8",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NVbii6jrIViFgDUCicZFw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:6ea95fbb-dd32-44ce-b097-1782adccde59"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "P9qm4LfSwPzZojCQ7D8EU",
              "ctx": null,
              "_testId": "urn:uuid:9f4cce51-a601-4830-a623-df0f084ead15",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16155,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-05-26T05:05:37Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zurLiucyGShfiBomonLgXPcMUxypxsj6AnZeAZJuCPci3B3sCP15AG3GradKtFGxbuYniShHgjYoTfpQQddoaz91\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-05-26T05:05:37Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zurLiucyGShfiBomonLgXPcMUxypxsj6AnZeAZJuCPci3B3sCP15AG3GradKtFGxbuYniShHgjYoTfpQQddoaz91"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "P9qm4LfSwPzZojCQ7D8EU",
              "ctx": null,
              "_testId": "urn:uuid:40ac636e-6c48-41f3-9326-992c6e87a08c",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "P9qm4LfSwPzZojCQ7D8EU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:6dbe744a-1c71-4b9b-a909-70e61950f5ac"
        },
        {
          "title": "SpruceID: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "_qoqAKJe5GL5M_V0m_k_r",
              "ctx": null,
              "_testId": "urn:uuid:2007bebd-1e84-4d39-a5ad-638f19243bb8",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "_qoqAKJe5GL5M_V0m_k_r",
              "ctx": null,
              "_testId": "urn:uuid:754dd88f-e85b-4fff-a159-f868db5d8d2c",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_qoqAKJe5GL5M_V0m_k_r",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:6e228bd2-db20-436f-957e-bcd636c70fb0"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "S0u6t6SGCrZ8PUa-NrKLv",
              "ctx": null,
              "_testId": "urn:uuid:134eceb9-5f00-43f7-b8ef-ea8d3a19f2bb",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "S0u6t6SGCrZ8PUa-NrKLv",
              "ctx": null,
              "_testId": "urn:uuid:15320662-65cc-4b0c-9fa3-84aea13b25c7",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "S0u6t6SGCrZ8PUa-NrKLv",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:2f6880cb-79c3-4a96-93b3-0f7c938ea2bf"
        },
        {
          "title": "bovine: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "-0uDNDALNbWky-WlZABEc",
              "ctx": null,
              "_testId": "urn:uuid:40c9c03b-1043-49f0-9246-d4fbb37a28ad",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "-0uDNDALNbWky-WlZABEc",
              "ctx": null,
              "_testId": "urn:uuid:6a87160b-fb97-4cb7-b02f-890e0727ab42",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-0uDNDALNbWky-WlZABEc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "joF-Ef8q68BYOOTqPBlmb",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:ce27dfd6-5a8a-48b4-8070-f8f46b91ce21"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:63b78e8a-6eda-4b89-b091-3ea9f360d23c",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "SpruceID: P-384",
        "bovine: P-256",
        "bovine: P-384"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "2BUkfSPbf3jMB6Flit29R",
              "ctx": null,
              "_testId": "urn:uuid:a8d645fe-f87d-40bd-b725-714cefd856e7",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15423,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SZQoMKN6IB4UYrlXgipfw",
              "ctx": null,
              "_testId": "urn:uuid:febdc6d9-4003-4ee5-b691-6e4c4679d375",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-05-26T05:05:37Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zYkAJjWkV4P1ofXyk68j4CxUSS2WgCxLk29MFxsGtv1wg9o7ZkXuyWrK9h3H7DYqNGaQFUhTZLNY1KaUet2JEc4Yv4USmroUxsPpTeKq9JSvAY8VAwQ2iQcfZwzAMkkwprKN\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-05-26T05:05:37Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zYkAJjWkV4P1ofXyk68j4CxUSS2WgCxLk29MFxsGtv1wg9o7ZkXuyWrK9h3H7DYqNGaQFUhTZLNY1KaUet2JEc4Yv4USmroUxsPpTeKq9JSvAY8VAwQ2iQcfZwzAMkkwprKN"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "LjpAWbygXALi8vV61zC21",
              "ctx": null,
              "_testId": "urn:uuid:afb778fe-ba2f-43ba-a596-3d39e0479a10",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "NVbii6jrIViFgDUCicZFw",
              "ctx": null,
              "_testId": "urn:uuid:db154659-227e-4071-aadb-449922427851",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "P9qm4LfSwPzZojCQ7D8EU",
              "ctx": null,
              "_testId": "urn:uuid:9f4cce51-a601-4830-a623-df0f084ead15",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16155,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-05-26T05:05:37Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zurLiucyGShfiBomonLgXPcMUxypxsj6AnZeAZJuCPci3B3sCP15AG3GradKtFGxbuYniShHgjYoTfpQQddoaz91\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-05-26T05:05:37Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zurLiucyGShfiBomonLgXPcMUxypxsj6AnZeAZJuCPci3B3sCP15AG3GradKtFGxbuYniShHgjYoTfpQQddoaz91"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "_qoqAKJe5GL5M_V0m_k_r",
              "ctx": null,
              "_testId": "urn:uuid:2007bebd-1e84-4d39-a5ad-638f19243bb8",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "S0u6t6SGCrZ8PUa-NrKLv",
              "ctx": null,
              "_testId": "urn:uuid:134eceb9-5f00-43f7-b8ef-ea8d3a19f2bb",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "-0uDNDALNbWky-WlZABEc",
              "ctx": null,
              "_testId": "urn:uuid:40c9c03b-1043-49f0-9246-d4fbb37a28ad",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "2BUkfSPbf3jMB6Flit29R",
              "ctx": null,
              "_testId": "urn:uuid:983e1448-0cd3-4080-9ed1-d54aa80f0928",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SZQoMKN6IB4UYrlXgipfw",
              "ctx": null,
              "_testId": "urn:uuid:a31d3322-b0d9-48e8-86b7-096be0630691",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "LjpAWbygXALi8vV61zC21",
              "ctx": null,
              "_testId": "urn:uuid:f6c5f168-a80b-47c6-82a4-0a4562bf2c0c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16017,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "NVbii6jrIViFgDUCicZFw",
              "ctx": null,
              "_testId": "urn:uuid:1cf059dc-6d83-4578-ae66-b12c3cf8d5a8",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "P9qm4LfSwPzZojCQ7D8EU",
              "ctx": null,
              "_testId": "urn:uuid:40ac636e-6c48-41f3-9326-992c6e87a08c",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "_qoqAKJe5GL5M_V0m_k_r",
              "ctx": null,
              "_testId": "urn:uuid:754dd88f-e85b-4fff-a159-f868db5d8d2c",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "S0u6t6SGCrZ8PUa-NrKLv",
              "ctx": null,
              "_testId": "urn:uuid:15320662-65cc-4b0c-9fa3-84aea13b25c7",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "-0uDNDALNbWky-WlZABEc",
              "ctx": null,
              "_testId": "urn:uuid:6a87160b-fb97-4cb7-b02f-890e0727ab42",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers 2.0)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "1MA18Q15OBfBJSadE1lHM",
              "ctx": null,
              "_testId": "urn:uuid:c426ab7f-eefd-4910-ac1e-374f5a1f7ffd",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "1MA18Q15OBfBJSadE1lHM",
              "ctx": null,
              "_testId": "urn:uuid:91df7ecb-8906-42ec-a4e0-61a1a6d76bd4",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1MA18Q15OBfBJSadE1lHM",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:49e89cc7-5eb0-41d6-b880-297006055fdc"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "rZpNbyxIDAyLU6BtBxzzO",
              "ctx": null,
              "_testId": "urn:uuid:0a129638-b310-4142-be58-f807e61c54cf",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 212,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zNaWqxuNhydzUfgtpy3E9gGWXg28HJ18nq2WDU32DBXonVRjZRP2XkpbyTTjKKhHWBdHrCFfostT2A43trZ355K7eRnETwk8sasmE3a5DvZuPdYWTmySdwfrVg1AhR4wuuEx\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zNaWqxuNhydzUfgtpy3E9gGWXg28HJ18nq2WDU32DBXonVRjZRP2XkpbyTTjKKhHWBdHrCFfostT2A43trZ355K7eRnETwk8sasmE3a5DvZuPdYWTmySdwfrVg1AhR4wuuEx"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "rZpNbyxIDAyLU6BtBxzzO",
              "ctx": null,
              "_testId": "urn:uuid:04660d4d-6c75-4393-a8d3-2d3f9f545efc",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rZpNbyxIDAyLU6BtBxzzO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:dcaf0d51-0381-4c0f-8c37-d8a3aca88742"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "TPcnGHG9dx5voZpHf6D5T",
              "ctx": null,
              "_testId": "urn:uuid:075883c4-e877-46b5-bf37-f07cd3b87fc4",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "TPcnGHG9dx5voZpHf6D5T",
              "ctx": null,
              "_testId": "urn:uuid:4014f783-b389-4c03-801b-ad97490abd89",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TPcnGHG9dx5voZpHf6D5T",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:688681cd-00d8-4303-8817-fd6e9a61c0c1"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "171P6xyUfGDENbJ7cHF9u",
              "ctx": null,
              "_testId": "urn:uuid:836a463b-1592-4279-8c57-b70d51123b57",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "171P6xyUfGDENbJ7cHF9u",
              "ctx": null,
              "_testId": "urn:uuid:d8fe5703-df54-490b-9300-38d57eb71991",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17076,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "171P6xyUfGDENbJ7cHF9u",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:bb882da0-b0fa-4f7c-b2c3-0629f328adf3"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "BmyaHTIw96DXIhnJn2QIG",
              "ctx": null,
              "_testId": "urn:uuid:f8f804c6-ab0f-467d-bf11-b9b4a729f6fc",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zTvcr5Hront5ZtWHyaJS1aqcggVqLgNhVqQniLzkPY8fxXWwQ2oPcXnP5QFhKswc48PkjJgDGQfK7gcZFjiKovVT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zTvcr5Hront5ZtWHyaJS1aqcggVqLgNhVqQniLzkPY8fxXWwQ2oPcXnP5QFhKswc48PkjJgDGQfK7gcZFjiKovVT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "BmyaHTIw96DXIhnJn2QIG",
              "ctx": null,
              "_testId": "urn:uuid:37304470-20d2-43aa-b875-b06e41c9b874",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BmyaHTIw96DXIhnJn2QIG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:83706d63-2fc0-4975-bcc1-6f0f0ab4d5ec"
        },
        {
          "title": "SpruceID: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "4NaKmcp3n1SiU_TWefOFv",
              "ctx": null,
              "_testId": "urn:uuid:bd7686f4-fafe-45b5-8df7-8719b8aa44e8",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "4NaKmcp3n1SiU_TWefOFv",
              "ctx": null,
              "_testId": "urn:uuid:7ef4fee4-10f5-411d-8728-0e958c15a51d",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4NaKmcp3n1SiU_TWefOFv",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:aa670856-40f6-4ab8-87d4-e54a22984a73"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "VppwQzKa77GJrMj46Bhu8",
              "ctx": null,
              "_testId": "urn:uuid:47ceb420-f83a-4a92-8bd0-041f36fcbc89",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "VppwQzKa77GJrMj46Bhu8",
              "ctx": null,
              "_testId": "urn:uuid:95f838aa-fa01-4c2c-95d0-5e64a0371b0c",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17270,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "VppwQzKa77GJrMj46Bhu8",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:cd6e9c2f-0554-472d-8566-61fd46c5586e"
        },
        {
          "title": "bovine: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "k4a2xKO85XCBD8qZXN3oL",
              "ctx": null,
              "_testId": "urn:uuid:e51e755b-fa18-4daf-aaed-8ca19a32a558",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "k4a2xKO85XCBD8qZXN3oL",
              "ctx": null,
              "_testId": "urn:uuid:45deddb0-4092-45e1-a1e2-3dccb37f4e22",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "k4a2xKO85XCBD8qZXN3oL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QyJifAbRsDqVOnGcBfToy",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:42bc2367-6611-40ae-9b50-a6454f8d3669"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:ab9fbe41-a37a-4cbb-af43-d057e12ee959",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "SpruceID: P-384",
        "bovine: P-256",
        "bovine: P-384"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "1MA18Q15OBfBJSadE1lHM",
              "ctx": null,
              "_testId": "urn:uuid:c426ab7f-eefd-4910-ac1e-374f5a1f7ffd",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "rZpNbyxIDAyLU6BtBxzzO",
              "ctx": null,
              "_testId": "urn:uuid:0a129638-b310-4142-be58-f807e61c54cf",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 212,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zNaWqxuNhydzUfgtpy3E9gGWXg28HJ18nq2WDU32DBXonVRjZRP2XkpbyTTjKKhHWBdHrCFfostT2A43trZ355K7eRnETwk8sasmE3a5DvZuPdYWTmySdwfrVg1AhR4wuuEx\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zNaWqxuNhydzUfgtpy3E9gGWXg28HJ18nq2WDU32DBXonVRjZRP2XkpbyTTjKKhHWBdHrCFfostT2A43trZ355K7eRnETwk8sasmE3a5DvZuPdYWTmySdwfrVg1AhR4wuuEx"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "TPcnGHG9dx5voZpHf6D5T",
              "ctx": null,
              "_testId": "urn:uuid:075883c4-e877-46b5-bf37-f07cd3b87fc4",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "171P6xyUfGDENbJ7cHF9u",
              "ctx": null,
              "_testId": "urn:uuid:836a463b-1592-4279-8c57-b70d51123b57",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "BmyaHTIw96DXIhnJn2QIG",
              "ctx": null,
              "_testId": "urn:uuid:f8f804c6-ab0f-467d-bf11-b9b4a729f6fc",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:37Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zTvcr5Hront5ZtWHyaJS1aqcggVqLgNhVqQniLzkPY8fxXWwQ2oPcXnP5QFhKswc48PkjJgDGQfK7gcZFjiKovVT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:37Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zTvcr5Hront5ZtWHyaJS1aqcggVqLgNhVqQniLzkPY8fxXWwQ2oPcXnP5QFhKswc48PkjJgDGQfK7gcZFjiKovVT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "4NaKmcp3n1SiU_TWefOFv",
              "ctx": null,
              "_testId": "urn:uuid:bd7686f4-fafe-45b5-8df7-8719b8aa44e8",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "VppwQzKa77GJrMj46Bhu8",
              "ctx": null,
              "_testId": "urn:uuid:47ceb420-f83a-4a92-8bd0-041f36fcbc89",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "k4a2xKO85XCBD8qZXN3oL",
              "ctx": null,
              "_testId": "urn:uuid:e51e755b-fa18-4daf-aaed-8ca19a32a558",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "1MA18Q15OBfBJSadE1lHM",
              "ctx": null,
              "_testId": "urn:uuid:91df7ecb-8906-42ec-a4e0-61a1a6d76bd4",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "rZpNbyxIDAyLU6BtBxzzO",
              "ctx": null,
              "_testId": "urn:uuid:04660d4d-6c75-4393-a8d3-2d3f9f545efc",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "TPcnGHG9dx5voZpHf6D5T",
              "ctx": null,
              "_testId": "urn:uuid:4014f783-b389-4c03-801b-ad97490abd89",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "171P6xyUfGDENbJ7cHF9u",
              "ctx": null,
              "_testId": "urn:uuid:d8fe5703-df54-490b-9300-38d57eb71991",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17076,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "BmyaHTIw96DXIhnJn2QIG",
              "ctx": null,
              "_testId": "urn:uuid:37304470-20d2-43aa-b875-b06e41c9b874",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "4NaKmcp3n1SiU_TWefOFv",
              "ctx": null,
              "_testId": "urn:uuid:7ef4fee4-10f5-411d-8728-0e958c15a51d",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "VppwQzKa77GJrMj46Bhu8",
              "ctx": null,
              "_testId": "urn:uuid:95f838aa-fa01-4c2c-95d0-5e64a0371b0c",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17270,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "k4a2xKO85XCBD8qZXN3oL",
              "ctx": null,
              "_testId": "urn:uuid:45deddb0-4092-45e1-a1e2-3dccb37f4e22",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:d88d7a22-8d2c-4f0f-9a96-a115d0fbfb12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:6fd97ac9-234c-4ebe-aace-249379b5e65d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:a0678fbd-855b-461a-b642-6c1a312ab02f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:01631e0c-a8a6-4bfe-9c80-bf91c90067a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17543,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:ab9cc179-95ae-43d9-83ea-922ace46cc98\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"issuanceDate\":\"2024-05-26T05:05:54Z\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:54Z\",\"proofValue\":\"u2V0BhVhA_-mtnj2RaP3gC3UkLWGQLEUnS5DLwL2GymlGF1-vPhIN6H-mOfX86Nhd4Q2_-uFsNVtK0T7rTIpz55aRxuiXVlgjgCQDakae8euIiQ472t7V9NHMTYIIny98HZ0qYZibY9O_LCSBWEAPZC57_Ya03N_QM_WRMEbkNo2qIvfFDuGuCA97U2ujHS4UTeqEyKyaua17gcBA477nxtg0kWp5DCrV9cLM0h1UoIQAAQME\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js:150:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:23cc56cc-7d98-44b9-b627-0d7005620f3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:52270425-020d-4105-9c00-520cf2ca9fde",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:feedd94f-b6e2-4bce-a04b-c53bfeae8040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "EUw95CwhVIxB02eLLJhZe",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:4d477528-fa38-4eb2-806d-0e48d654e969"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:743581a3-2e51-4b9c-b7d7-8a55254118ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:b364f73e-8182-422f-9e37-e467f759f2ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:f6969aea-295c-46ed-b636-74b0da95e506",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:9dd63464-1f2b-4977-9192-304a876a4648",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:196abd8c-6b3f-4510-9cd9-33859d00521e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:db9da99a-e82e-454c-a6cd-67cb3b9760e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:17bfef14-8f04-4687-84db-981e00ffe6bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "EUw95CwhVIxB02eLLJhZe",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:28be04c1-755a-4e28-94f7-15bd47bd2b87"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:bd712f2f-cb77-4357-b69a-ca924297aea3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:24723141-e7b8-4664-b447-298e41b6b798",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:02d63639-b71a-439a-843a-a643202a839d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:a73c73b1-89e8-4a62-8afa-66067b14e625",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:26146c1c-ab0f-4b17-8c28-d2517b3a1607",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18012,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:ffe86999-a55b-49f7-bb17-4595510181ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:edb87590-7df8-4c63-b1d0-5d43e08a0ba3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "EUw95CwhVIxB02eLLJhZe",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:3334a855-b9ef-45c3-a521-3166fa4689fd"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "J0RsCH99XoSgIEUmV4Xdh",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:8c7260e6-4828-4a32-b20b-01257f3bd99a",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:d88d7a22-8d2c-4f0f-9a96-a115d0fbfb12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:743581a3-2e51-4b9c-b7d7-8a55254118ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:bd712f2f-cb77-4357-b69a-ca924297aea3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:6fd97ac9-234c-4ebe-aace-249379b5e65d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:b364f73e-8182-422f-9e37-e467f759f2ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:24723141-e7b8-4664-b447-298e41b6b798",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:a0678fbd-855b-461a-b642-6c1a312ab02f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:f6969aea-295c-46ed-b636-74b0da95e506",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:02d63639-b71a-439a-843a-a643202a839d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:01631e0c-a8a6-4bfe-9c80-bf91c90067a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17543,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:ab9cc179-95ae-43d9-83ea-922ace46cc98\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"issuanceDate\":\"2024-05-26T05:05:54Z\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:05:54Z\",\"proofValue\":\"u2V0BhVhA_-mtnj2RaP3gC3UkLWGQLEUnS5DLwL2GymlGF1-vPhIN6H-mOfX86Nhd4Q2_-uFsNVtK0T7rTIpz55aRxuiXVlgjgCQDakae8euIiQ472t7V9NHMTYIIny98HZ0qYZibY9O_LCSBWEAPZC57_Ya03N_QM_WRMEbkNo2qIvfFDuGuCA97U2ujHS4UTeqEyKyaua17gcBA477nxtg0kWp5DCrV9cLM0h1UoIQAAQME\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js:150:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:9dd63464-1f2b-4977-9192-304a876a4648",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:a73c73b1-89e8-4a62-8afa-66067b14e625",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:23cc56cc-7d98-44b9-b627-0d7005620f3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:196abd8c-6b3f-4510-9cd9-33859d00521e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:26146c1c-ab0f-4b17-8c28-d2517b3a1607",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18012,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:52270425-020d-4105-9c00-520cf2ca9fde",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:db9da99a-e82e-454c-a6cd-67cb3b9760e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:ffe86999-a55b-49f7-bb17-4595510181ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "SakHWgalQIv0m_7TBm8pB",
              "ctx": null,
              "_testId": "urn:uuid:feedd94f-b6e2-4bce-a04b-c53bfeae8040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "pzF05R69-K7l7nLGnsiuf",
              "ctx": null,
              "_testId": "urn:uuid:17bfef14-8f04-4687-84db-981e00ffe6bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "IioIrEfquy1xI35_ijaj1",
              "ctx": null,
              "_testId": "urn:uuid:edb87590-7df8-4c63-b1d0-5d43e08a0ba3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:4d5e53e7-d0f7-40a3-8b96-53cc37fee645",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:d09e90c5-1d1b-4f4a-a490-e8f5e279e1e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:1a982dca-dcc0-46b4-bb2e-9188fd5ca7cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:329442e7-c27e-4ad0-aabc-f47572f13c2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:6a5aa31f-ef62-417b-a90f-1f9434af5883",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:1635267b-0eaf-48fb-8830-bfc4135b907a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:76b784e3-ca2a-4cf3-9086-f8473102e5b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ricmDONulLOk4eOYSX8TZ",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:a5d319d8-3190-4489-815b-dde3788ff6ea"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "J0RsCH99XoSgIEUmV4Xdh",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:c6b2739a-8dae-4c45-9114-139c675ef0f4",
      "columns": [
        "Digital Bazaar: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:4d5e53e7-d0f7-40a3-8b96-53cc37fee645",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:d09e90c5-1d1b-4f4a-a490-e8f5e279e1e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:1a982dca-dcc0-46b4-bb2e-9188fd5ca7cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:329442e7-c27e-4ad0-aabc-f47572f13c2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:6a5aa31f-ef62-417b-a90f-1f9434af5883",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:1635267b-0eaf-48fb-8830-bfc4135b907a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "h_YzvtYrIjfF1uYn3bR5P",
              "ctx": null,
              "_testId": "urn:uuid:76b784e3-ca2a-4cf3-9086-f8473102e5b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:842f223d-b1f0-4d95-8314-f6656e10d218",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:44e10fdd-2a10-4e64-9832-e9e7960c7a9e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:4546a45c-c580-45ce-b410-e1417d6726b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:627de837-f5c6-4666-b85f-ad21c8a97a26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18279,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:49c4c383-514c-4546-9e0f-c9e6b6b5a47a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18321,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:0deea0da-b4c3-4589-8557-97d29cc71e92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:fc7acdce-e943-4afd-8ba8-2f5bee729a9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:46f2d05c-3bf8-4a02-94a1-47793773974d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:c326785e-e72f-4966-8053-23ce9560dfdf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18545,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:5debbd9f-dc72-4350-8f0b-7258fe0a570e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:31623352-c102-455d-b90f-e080e0b6d8f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18642,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:0e768569-e474-4bcf-8a7f-237feb052a2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18699,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:016725f2-49a6-4649-8ef3-d579e0d92fa9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:5287b450-1024-4e03-8b7e-af59e0341161",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:79555d9c-7e2a-46ab-80a6-dbaa69e811e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKLWJgeZizdwFcKOKvjf8",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:b1349789-4d6d-4c01-9e96-ce1901f2a9ce"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:4152d38b-063f-461e-b036-bd6b37b16ee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:2d78f58d-226e-4590-b7e6-d69d8e6fb1ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:fcd1b045-d2de-4f2f-8533-a6628b94d020",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:d7b0517d-92c9-456f-b893-97c9d916a58f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:e411cf72-dace-4c59-8a13-64ab29510c1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:8477ffcc-ff56-4cbb-9543-1a721868f737",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:497722a7-52c6-4ff8-bf47-f4527a9716dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:cbcda0ab-15db-43ca-af63-1a8fece478bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:008f714e-933b-4d3e-a050-2aff7087a7fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19283,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'f5bc0a0a7da7d70911ec43f476e173e5' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'f5bc0a0a7da7d70911ec43f476e173e5' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:9f5824bd-4721-4a16-9ef0-1664192a2e0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:a5564d38-8ead-43eb-95b1-3ce914c164e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19394,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:b809914c-135c-458a-8bd9-132b30c98f6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19445,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'c0407f312769e52456b1667ceb1fec76' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'c0407f312769e52456b1667ceb1fec76' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:00762545-4ddd-4bfb-b1e0-dcd8456fcdf7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:e5e329c7-e56e-4528-be7d-a003c37d86fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:24be6498-2d4e-4a5a-b07b-88ae7dffbd03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKLWJgeZizdwFcKOKvjf8",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:561c28c1-7231-4cca-befb-e9a9e8e212b1"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:a8b2327a-be75-4247-aba7-f810d1b96e85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:f1c62445-8e00-4903-9f15-a94217c64c35",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:2cb60e28-0436-4a57-819c-070bdc7d8a12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:435b9533-5dbf-465e-8cf7-fd65e114b08e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:13406c29-3a7c-4697-a6d4-7a5e54d57ad4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:8edd23ac-904f-42af-b54e-417428073533",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:5fed0b0b-ea81-4d1d-8929-46fc58039b1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:265a8ce2-078e-4a72-a5b4-bc1fccc8b040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:d79dbf87-e8a4-4f11-9257-8c4fba182e37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:864c279c-9ade-4cb8-8347-edaa53cef3ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:cf230d20-3792-400d-9506-dec18bb80914",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:155e2fb3-d746-4b6e-8c51-e0cc8ddd6d13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:6aa4ccec-abc2-4380-98d8-ff6282aa3718",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:a55344f9-0935-4462-af13-f3038e4a99ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:fdef2ff7-a2cc-47bd-925c-506ff1eef6b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fKLWJgeZizdwFcKOKvjf8",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:6e7a38cf-962c-4bae-8afc-f4f8a4c1df6c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:1771fd6d-062a-432a-9f38-922dc2a9832b",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:842f223d-b1f0-4d95-8314-f6656e10d218",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:4152d38b-063f-461e-b036-bd6b37b16ee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:a8b2327a-be75-4247-aba7-f810d1b96e85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:44e10fdd-2a10-4e64-9832-e9e7960c7a9e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:2d78f58d-226e-4590-b7e6-d69d8e6fb1ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:f1c62445-8e00-4903-9f15-a94217c64c35",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:4546a45c-c580-45ce-b410-e1417d6726b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:fcd1b045-d2de-4f2f-8533-a6628b94d020",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:2cb60e28-0436-4a57-819c-070bdc7d8a12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:627de837-f5c6-4666-b85f-ad21c8a97a26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18279,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:d7b0517d-92c9-456f-b893-97c9d916a58f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:435b9533-5dbf-465e-8cf7-fd65e114b08e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:49c4c383-514c-4546-9e0f-c9e6b6b5a47a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18321,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:e411cf72-dace-4c59-8a13-64ab29510c1b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:13406c29-3a7c-4697-a6d4-7a5e54d57ad4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:0deea0da-b4c3-4589-8557-97d29cc71e92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:8477ffcc-ff56-4cbb-9543-1a721868f737",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:8edd23ac-904f-42af-b54e-417428073533",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:fc7acdce-e943-4afd-8ba8-2f5bee729a9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:497722a7-52c6-4ff8-bf47-f4527a9716dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:5fed0b0b-ea81-4d1d-8929-46fc58039b1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:46f2d05c-3bf8-4a02-94a1-47793773974d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:cbcda0ab-15db-43ca-af63-1a8fece478bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:265a8ce2-078e-4a72-a5b4-bc1fccc8b040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:c326785e-e72f-4966-8053-23ce9560dfdf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18545,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:008f714e-933b-4d3e-a050-2aff7087a7fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19283,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'f5bc0a0a7da7d70911ec43f476e173e5' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3ac-WdrrKEj49sJKdgz9zYZ0swFjJes\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'f5bc0a0a7da7d70911ec43f476e173e5' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:d79dbf87-e8a4-4f11-9257-8c4fba182e37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:5debbd9f-dc72-4350-8f0b-7258fe0a570e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:9f5824bd-4721-4a16-9ef0-1664192a2e0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:864c279c-9ade-4cb8-8347-edaa53cef3ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:31623352-c102-455d-b90f-e080e0b6d8f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18642,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:a5564d38-8ead-43eb-95b1-3ce914c164e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19394,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:cf230d20-3792-400d-9506-dec18bb80914",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:0e768569-e474-4bcf-8a7f-237feb052a2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18699,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:b809914c-135c-458a-8bd9-132b30c98f6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19445,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'c0407f312769e52456b1667ceb1fec76' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 26 May 2024 05:05:56 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'c0407f312769e52456b1667ceb1fec76' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:155e2fb3-d746-4b6e-8c51-e0cc8ddd6d13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:016725f2-49a6-4649-8ef3-d579e0d92fa9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:00762545-4ddd-4bfb-b1e0-dcd8456fcdf7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:6aa4ccec-abc2-4380-98d8-ff6282aa3718",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:5287b450-1024-4e03-8b7e-af59e0341161",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:e5e329c7-e56e-4528-be7d-a003c37d86fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:a55344f9-0935-4462-af13-f3038e4a99ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iLgdbEUrYPTdevTXI14lJ",
              "ctx": null,
              "_testId": "urn:uuid:79555d9c-7e2a-46ab-80a6-dbaa69e811e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "pXWe2VgiLky-XfnbxI7PV",
              "ctx": null,
              "_testId": "urn:uuid:24be6498-2d4e-4a5a-b07b-88ae7dffbd03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "LNaSWOpOLDYnFmpW5A7eo",
              "ctx": null,
              "_testId": "urn:uuid:fdef2ff7-a2cc-47bd-925c-506ff1eef6b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers 1.1)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:6c81b078-c2e4-4e47-8a8c-a9372cbee3af",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:787dccdf-9eea-4746-964f-a04b15ca37c5",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 807,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:7dfa7d10-5abb-4b76-badf-7d4f181cbbc2",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 689,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:f144c800-3331-428b-98cf-ee503adf6993",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22731,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 309,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-26T05:05:58Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:58Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhA__Fet2bj2B8mW1wYX5jj58AelHOV4WggVSeetd5sIiBcD_5yTZwmd-xqT9cFQlP2d7rvI8axsQqxcKFPUcke1lgjgCQC3B6lvQOhTg5UwwEX7BGUR3o6hM9RkSawdqQPAoXL69CYN1hApW6zWSC3zfU9KibSD8Qe9k9jjeDQPLxJ9wB-VqxN7SZcxS2xBSk10dmZUbZFWj8YnCXkeg6tSICCF5euHApe51hAKP4InWEhwX1T0oIQwVn8E6hgQEZeCAHNQZyLMixyUysQegk4ce_Qxiy5PAYQzMAEC2dsiRCcUnmghfZjqw33lFhAyz8XhmQCjn8Xj3cpz_oX-rAfEXDPhPQ8ZsPlwtIlk7bb6B22-CXegB5sIuOxFHpfUkjqt3iA5lXllb2fUP0UqVhA0KWfdVownuqjuZihOyaQlMfC5r2FawaLo67TALOfQddhXQ6BkouHyt8k5cOBOe2v4pTwvFNsW6QRCit2ndgVklhAgUjxSOB_nTRyEx_DJGCOVyOiEmpKThq4c5DjczatcA_cKlrdHOiyEk88vWE-HFW0mnY5X5H2NtuXtiRrJFetSFhAHXAHdBGVlDBWWR_WFTQA6uM0JEJsl__iu2liv8HZSMrOGHKAsHNEOP0QxBBLxLCySwrZgMsqpgVm6Zpc4nqqbVhAN9AXqWi2F3MzIADRFRaMAu-UhQpLD06baa4h97TsIjzI1i90IN_4XVrCqsN_3EmF_EU4VDi9DpjS23E1QC3L3VhAruLOS0Jm5f6X73QtLfas5PyzLoJoWNQzPYj8JUTFEvC8rc93ncrK6ojbp23DykTLLVaQ7Ma5IF029owO3CiBplhA8U1ypoaarGkJi2dJwufrgVodDDyW-KQ8hKlg-FLhBqvqBhkbEBCiL3HTdnam3MktRN9ZQq9IHDjGJkLTLLVjfVhAZIw1B2YA2e51cLZOdzOf8SgTqy0BL3gI3VRSB75svmavT8WzR5e40TIRJjsopF_B7q4TOf72iActu-OBveRVklhAdvkip0esJyQ5H9h97X--y2cA0VaV1F3prcDnN4Vx8_6nlQlffcbf_a7korWrVtdh9FACV_iHOKjqVZ9gkovMtlhA3rDyZ_2biq3KH13bOI1nfeXn5V5Gsc6_8u5Ihe_0OgKp2evN3fU8Ce3bKv7HKRFGgNsu9WITPjbc_C_WKyJ_j1hANkpUpfzBfA4dLdmrOYK4Te7fg7xDIPe1LoN5XVSZWlQSiuaUW6KfTnXSMa_33hEm-Wgvi0oAE-sS2S5FASear1hAVA2X21aXSgjRU5d-R8qXznB901wKgi4hB7totAMtRtrl_E3GR9PmhNkeyruTTk2GHWtatNvOFXY1_UyrHOiq_VhAJ6B6AeBBaZ9qsOq6kb1BVO4iUu2iU35UCOP5f39KjxkOia_4kFO5fwgQ_X8948kR-eCXr03zzRxTD5GquOL8WFhAHBbsjfswnLZVGKHoM7HXdzQ1lyZekbGTg8evmaIRL6f7rIVpoHtx-xFRP8AtlAWZLY59WXyY6A6NcHfsoQ0WU1hAmuYQMIoF6txKWYkRqiHJdm-j3DqWwj3VRacPkw6YdYm6wobAHwJY2PfvI858mKWUG_JXN0GAt0HxucR7FkueqVhA1W9Vp423MaDxbSkX-OxdG9xF40pV1naCRUeMzQmYQvuhp15lquMCf2CPbddtVOcDNF2KJpAtZCWaAi4fFWhnnFhAt3ec83fqoJpVaWt-M-MevPFtM8zMjLrIf0_bqFi3m5D7CS-Q3_hr_m2qMQ102t_tn2Z_EXsJatS7O-NehyeRe1hAKlZ5Hk_csjQLXLjk0AX9gNhNeThE2bd4_dZqwZ6MuEn-Vu38SxzCa80UOmBznVQGs9zpfzxlSIyTcXSd7h4uKVhAhh0SBDaFowwA-3agGoIt-6yxv2XWSY0uDOhIjMQS7JJUyBYSM48uK6uq2uRz5TIaLRlKfctc2gzWcpYg5fJKClhA4vNkpkmEJq1egymsc-Lesc5vikrRnz7ewDV-gkkkOpnn_A_IFNSo7xffjfgk31xi1JbD7c9e8kqEHYWfjWEKWVhAT3Z8y8VxVIUnQvEuXy70de4ZDy173M8tbxAam9ZkXKOdBFvS6h-rOoPfSByOEp1L1J2yszqfIqG-_8NZpcN0jlhABdr8CjWFobKDosjX8yqTt9p2FaXB2jfTyAYqwzI9NUdZkHd-tj0XdAw1lQd0uNTzUJ6cYhWmDpRay2nVBkNSHVhAT3n-GpVH6xb9Oa05sc5W406MnQSlpa1w3zTegr2Wvw5H2FheLMo1sUovhSL5FetKPubqPN0abVnbdYsbpa_bQlhAa_gJ76MtNOxxl9euGfsNCnIqjNcTXp5X_52qNZ1f5xkpMYn73L5Co7D_RZhh8g6VPsv5Iq_J4fTWXRNksRy1AFhARvWc3E_yvUKmfL3WFLbuqcvHBp2YY0Vyk2L8RbmbNXDuk1_wCKFu2rXM9I4TM8L0xFaASDr9nI6_6GsFzfHULlhAoldMDbvJyliKm2Xo3X8XhQnM8oRnYO-hHTeqs6LkAadUxsNybVUOzMIErpwthggsoRYRacG1xVut7-EkU5g7VVhAnz_kHzHQrJnDiXhe-hWGQCWM8tYovsBgpE6cA7aCPIa0p9iEGTvLzBP5fNO9haYOBxKOhnen2Q97_3bWLVUn51hAlO7y_r9etOlc7xcpYrdkF4QcywLhHEQSUixMEWLWlIX1Wzh3oW07gX1ytD6-zF3SF5YD61ApzZYp6i8jpEmColhAYhAPDrEoaunVCQeD27PNw1hE0u2CVvvurf4rl6KTn2eTpNv2ZOYEwDUexY_Tl8UEEvGKzB3sa_pbFLj6GCPGVlhAsGXvTIqu0B50W7oatBH99K4Xmx0kS5XS3fWsOIvgQ0lhUo0jAeJq4WA5ZO-L14crJLjDpt1eIw6ectUmPbjq71hAxG9mkTgWvYFDoXJ2dhU0500H8oWLhu-h5u25qKr38FFZ6sSWv6eygDmXz_f-uu5tAjtlGudXEe5yme0BogNNqVhAKa9s2nNN10nC2FNxPEKL8l7_vR_x2pCAkAdJnJx5rJa2hP7Aeh46FD7wwfMkcyHMBQ14rxnQqv5vohi7v4M85FhAK_06pAk7uuvTq1go1kJQEoGNiDyqq85R3DU5jl27E85LLJuOnRlphtsjN6-6Ivs8Bi6VUfOJUQNli6igLHb0yVhAQ7ael1ywi2fu3258UW3d0b7arg5WJkxs2fiepTZKDljY_nOWBH9KpQiGXMr6AfQR4FB7ic6NR6cSGfb8Ow9fAFhAbwNPEA85uA_F9zGURSzuDolAUI-VdMimmRYxcTdu8vFb_X9nAOZvvO1m_XI8EElML2YYztillaN3IHTvPmLlxVhAraOzcFfExezk5Tfa3VjDsvdbnEUw-8RBAyoRaevHAj5tnabkCe6wgRxKRFzwoCDJLA-vWXOdVpG_nPtQAqdJSVhA2TQ_q5cVFHDFHTq2tWZj412a3_HPqqXbe4TpXgcNRSCqahPT3ddHWmhmfutR27jGKcWz_ijIGNmtvXRdLN3bk1hAo7NWwXdYSVnDWFCkgJzMhmRAwNZOgOZO-dijPtH1Ee88LrOt5qB_-EPJbDgXHEMm0245JbuYJThsQrCKy972E1hA0hU-MgYcja07Sr8ar8bH_9JOw1JsEIbtBpKCQXYsqbDdQB-YUrNmw-9gYN7wEQ4KT9gjzY60GS-rY1ISUwpHtFhAUfBihHOQw3KJIRb4Wba0gZ3sf9N9v0m05gQ9tfYZ4yi3fcrxrFIHvIKQodUYs0o7ppnJzPkqVs_YaOnHA0QH3lhATAKne0O4TymFJRKh6OnWvJkBR6GJMt0P9UCxb5uYRpmcA8EtDjwst2j6qWJ1VUVh17D6RPJEKAl9mRd-6Pzo7FhA-eVgk6iSqF7OI-Kr085jiM5ZC-0a2M7JdkOTv8aIuwmJSvaZbFZG5fYHllYncd5ktDZsu0v-GLC6TjiTRDUilVhAS54C2eKYA6ydg_iq55EcRps0z4w2u59m_o5uot0WknJl8A6jQdqggh-vrWcS9wsQ9PFqVK7RvDkZ3YfEH9KAnlhAWjMO4l99MR__nk-vx0f_QNr4_sd-91wfLi3ZmKxQsLDdjpE81-jG-ZUUIjfVL5FN9f3t_7CSy27FUVg-Cr8OxFhAZevZpQs1eyd4DEsDh_084C0vyPhx9nyT06xNnl5IEMv0FZ18nRuZPTE6nu1YKKhf-nONyZH0QIcfCqt9AKMbnFhANg3E5WeeLC3yHWOcJf7FOag0SkUakTvrYBOaMTWUPBeYzYLSvky7QQzUozY5m1KUDszitjCQjpMOwOWBJqFtRFhAsYWnh4veEbZs7k9bt0IlPZ9fjbwJ041RKVan1ZRLxgr_Ce0Eb_CJf_KSmB4NsH667fNv3OFtO5mL4-qM8hABxVhAiBu0njK8YaONAffkXuO8duuZL097HUneJK3TGQmvD4EtFa759pBm3hs8nEzZcz_rbVOSs8I-MBgrbmBLi1zNolhA-qiw3Q-1xoYI38Wx92-PRegv-omIQ6FftB3__U3zGrcdxR4hIU3e4WUico9GrQ613dQdzNQoR1D20gNugcDJL1hAMKX-OA261GBq0Td2bRGy5fNhnJ8qQ8xeDivoaO88jIDrXYQAdCUO-2xaHYytedZ2KL9pv8bSqKBB1sLe7XkSSlhAm3r9WjmVmDn-amBQmR0OrHjFMBXiwNhBKCoscRRJg25owMfM15lnw23uMtV5RGUdXdK4xwQwbrQ4pFfnvTZaqlhAiAhK4aKAE1ZLTTg7iY_Vu7Y3w002FGaR9b2ta1Gx_kMAX-iLwVqvkMGlgpE5Rkm38VXdo_N7_73vcnE6JPgP8VhATMFAVRtkPBwj-1lUfTzRNygQw-pr4GLP8QSq8S6K3GFR0S8ro7CKgXJEFP8aZ0hcLBHd-9fk0xhXSkvTOEKdULAAWCDXWpWUvsekT2OZEZsHB16Ma2NLz5aIDIc41JKGcVI55QFYINsvKWccLoH7MA9Ys8cA6XkboWl4dJPiv5nLxRDx16SRAlggXigIOz-apVDzKNOjxq--2VCMMJmJ9ChtffwL_wVCFaEDWCDIw9_XGDujpu8ZI9jKxTvOLyWY4Il-NROEPNkW89l-IgRYIIfXgD15ny3D_fAszcYk3mwemqmqUl_LirjPABhkuM3UBVggCbyKR1mQEk4Hev_JHFd14oSq_FiQ4o8gdZVakMughrMGWCBki838Q3foBDBGiEfmmdwrA0V_ZS87LAZ_FOBpkohVCQdYIMumUEYz5uQG_BRg3ikVMg-7mdgzbxw66vo0XkcEw6vICFggtWKgag68_56b2Vm5vZq_GGfLz052q6CEzxsRgDI1QYoJWCDFzhwNurH4PZam4dJuPEPe2LgzhhH3TVW6o87Nee3cSgpYIA20ZyBhb0fqMY9aInWa73OtbWRe1h9qmJWFQByLuM1YC1ggG_TBiQJqfe3Jgl1rYAGEDFfElDhUKTcZN6y8u3QprPwMWCB7wSJRUzhARoVG7mHQZMimbNWRy09fUC_PKy-0H-FJ7w1YIMKMr6ytbcvs7--kiZeI5_yStn-TDvK2zXVrraRwYyaWDlggJeK_7L-f7dwSadMz4wk7lbJVxRC_xrtrHQAWjO8zV84PWCC73Dwc3i16nyun4v6Y-CAFeO56UIo4EIYMc7kmB5AMrYQYIhgjGCUYJg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-26T05:05:58Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:58Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhA__Fet2bj2B8mW1wYX5jj58AelHOV4WggVSeetd5sIiBcD_5yTZwmd-xqT9cFQlP2d7rvI8axsQqxcKFPUcke1lgjgCQC3B6lvQOhTg5UwwEX7BGUR3o6hM9RkSawdqQPAoXL69CYN1hApW6zWSC3zfU9KibSD8Qe9k9jjeDQPLxJ9wB-VqxN7SZcxS2xBSk10dmZUbZFWj8YnCXkeg6tSICCF5euHApe51hAKP4InWEhwX1T0oIQwVn8E6hgQEZeCAHNQZyLMixyUysQegk4ce_Qxiy5PAYQzMAEC2dsiRCcUnmghfZjqw33lFhAyz8XhmQCjn8Xj3cpz_oX-rAfEXDPhPQ8ZsPlwtIlk7bb6B22-CXegB5sIuOxFHpfUkjqt3iA5lXllb2fUP0UqVhA0KWfdVownuqjuZihOyaQlMfC5r2FawaLo67TALOfQddhXQ6BkouHyt8k5cOBOe2v4pTwvFNsW6QRCit2ndgVklhAgUjxSOB_nTRyEx_DJGCOVyOiEmpKThq4c5DjczatcA_cKlrdHOiyEk88vWE-HFW0mnY5X5H2NtuXtiRrJFetSFhAHXAHdBGVlDBWWR_WFTQA6uM0JEJsl__iu2liv8HZSMrOGHKAsHNEOP0QxBBLxLCySwrZgMsqpgVm6Zpc4nqqbVhAN9AXqWi2F3MzIADRFRaMAu-UhQpLD06baa4h97TsIjzI1i90IN_4XVrCqsN_3EmF_EU4VDi9DpjS23E1QC3L3VhAruLOS0Jm5f6X73QtLfas5PyzLoJoWNQzPYj8JUTFEvC8rc93ncrK6ojbp23DykTLLVaQ7Ma5IF029owO3CiBplhA8U1ypoaarGkJi2dJwufrgVodDDyW-KQ8hKlg-FLhBqvqBhkbEBCiL3HTdnam3MktRN9ZQq9IHDjGJkLTLLVjfVhAZIw1B2YA2e51cLZOdzOf8SgTqy0BL3gI3VRSB75svmavT8WzR5e40TIRJjsopF_B7q4TOf72iActu-OBveRVklhAdvkip0esJyQ5H9h97X--y2cA0VaV1F3prcDnN4Vx8_6nlQlffcbf_a7korWrVtdh9FACV_iHOKjqVZ9gkovMtlhA3rDyZ_2biq3KH13bOI1nfeXn5V5Gsc6_8u5Ihe_0OgKp2evN3fU8Ce3bKv7HKRFGgNsu9WITPjbc_C_WKyJ_j1hANkpUpfzBfA4dLdmrOYK4Te7fg7xDIPe1LoN5XVSZWlQSiuaUW6KfTnXSMa_33hEm-Wgvi0oAE-sS2S5FASear1hAVA2X21aXSgjRU5d-R8qXznB901wKgi4hB7totAMtRtrl_E3GR9PmhNkeyruTTk2GHWtatNvOFXY1_UyrHOiq_VhAJ6B6AeBBaZ9qsOq6kb1BVO4iUu2iU35UCOP5f39KjxkOia_4kFO5fwgQ_X8948kR-eCXr03zzRxTD5GquOL8WFhAHBbsjfswnLZVGKHoM7HXdzQ1lyZekbGTg8evmaIRL6f7rIVpoHtx-xFRP8AtlAWZLY59WXyY6A6NcHfsoQ0WU1hAmuYQMIoF6txKWYkRqiHJdm-j3DqWwj3VRacPkw6YdYm6wobAHwJY2PfvI858mKWUG_JXN0GAt0HxucR7FkueqVhA1W9Vp423MaDxbSkX-OxdG9xF40pV1naCRUeMzQmYQvuhp15lquMCf2CPbddtVOcDNF2KJpAtZCWaAi4fFWhnnFhAt3ec83fqoJpVaWt-M-MevPFtM8zMjLrIf0_bqFi3m5D7CS-Q3_hr_m2qMQ102t_tn2Z_EXsJatS7O-NehyeRe1hAKlZ5Hk_csjQLXLjk0AX9gNhNeThE2bd4_dZqwZ6MuEn-Vu38SxzCa80UOmBznVQGs9zpfzxlSIyTcXSd7h4uKVhAhh0SBDaFowwA-3agGoIt-6yxv2XWSY0uDOhIjMQS7JJUyBYSM48uK6uq2uRz5TIaLRlKfctc2gzWcpYg5fJKClhA4vNkpkmEJq1egymsc-Lesc5vikrRnz7ewDV-gkkkOpnn_A_IFNSo7xffjfgk31xi1JbD7c9e8kqEHYWfjWEKWVhAT3Z8y8VxVIUnQvEuXy70de4ZDy173M8tbxAam9ZkXKOdBFvS6h-rOoPfSByOEp1L1J2yszqfIqG-_8NZpcN0jlhABdr8CjWFobKDosjX8yqTt9p2FaXB2jfTyAYqwzI9NUdZkHd-tj0XdAw1lQd0uNTzUJ6cYhWmDpRay2nVBkNSHVhAT3n-GpVH6xb9Oa05sc5W406MnQSlpa1w3zTegr2Wvw5H2FheLMo1sUovhSL5FetKPubqPN0abVnbdYsbpa_bQlhAa_gJ76MtNOxxl9euGfsNCnIqjNcTXp5X_52qNZ1f5xkpMYn73L5Co7D_RZhh8g6VPsv5Iq_J4fTWXRNksRy1AFhARvWc3E_yvUKmfL3WFLbuqcvHBp2YY0Vyk2L8RbmbNXDuk1_wCKFu2rXM9I4TM8L0xFaASDr9nI6_6GsFzfHULlhAoldMDbvJyliKm2Xo3X8XhQnM8oRnYO-hHTeqs6LkAadUxsNybVUOzMIErpwthggsoRYRacG1xVut7-EkU5g7VVhAnz_kHzHQrJnDiXhe-hWGQCWM8tYovsBgpE6cA7aCPIa0p9iEGTvLzBP5fNO9haYOBxKOhnen2Q97_3bWLVUn51hAlO7y_r9etOlc7xcpYrdkF4QcywLhHEQSUixMEWLWlIX1Wzh3oW07gX1ytD6-zF3SF5YD61ApzZYp6i8jpEmColhAYhAPDrEoaunVCQeD27PNw1hE0u2CVvvurf4rl6KTn2eTpNv2ZOYEwDUexY_Tl8UEEvGKzB3sa_pbFLj6GCPGVlhAsGXvTIqu0B50W7oatBH99K4Xmx0kS5XS3fWsOIvgQ0lhUo0jAeJq4WA5ZO-L14crJLjDpt1eIw6ectUmPbjq71hAxG9mkTgWvYFDoXJ2dhU0500H8oWLhu-h5u25qKr38FFZ6sSWv6eygDmXz_f-uu5tAjtlGudXEe5yme0BogNNqVhAKa9s2nNN10nC2FNxPEKL8l7_vR_x2pCAkAdJnJx5rJa2hP7Aeh46FD7wwfMkcyHMBQ14rxnQqv5vohi7v4M85FhAK_06pAk7uuvTq1go1kJQEoGNiDyqq85R3DU5jl27E85LLJuOnRlphtsjN6-6Ivs8Bi6VUfOJUQNli6igLHb0yVhAQ7ael1ywi2fu3258UW3d0b7arg5WJkxs2fiepTZKDljY_nOWBH9KpQiGXMr6AfQR4FB7ic6NR6cSGfb8Ow9fAFhAbwNPEA85uA_F9zGURSzuDolAUI-VdMimmRYxcTdu8vFb_X9nAOZvvO1m_XI8EElML2YYztillaN3IHTvPmLlxVhAraOzcFfExezk5Tfa3VjDsvdbnEUw-8RBAyoRaevHAj5tnabkCe6wgRxKRFzwoCDJLA-vWXOdVpG_nPtQAqdJSVhA2TQ_q5cVFHDFHTq2tWZj412a3_HPqqXbe4TpXgcNRSCqahPT3ddHWmhmfutR27jGKcWz_ijIGNmtvXRdLN3bk1hAo7NWwXdYSVnDWFCkgJzMhmRAwNZOgOZO-dijPtH1Ee88LrOt5qB_-EPJbDgXHEMm0245JbuYJThsQrCKy972E1hA0hU-MgYcja07Sr8ar8bH_9JOw1JsEIbtBpKCQXYsqbDdQB-YUrNmw-9gYN7wEQ4KT9gjzY60GS-rY1ISUwpHtFhAUfBihHOQw3KJIRb4Wba0gZ3sf9N9v0m05gQ9tfYZ4yi3fcrxrFIHvIKQodUYs0o7ppnJzPkqVs_YaOnHA0QH3lhATAKne0O4TymFJRKh6OnWvJkBR6GJMt0P9UCxb5uYRpmcA8EtDjwst2j6qWJ1VUVh17D6RPJEKAl9mRd-6Pzo7FhA-eVgk6iSqF7OI-Kr085jiM5ZC-0a2M7JdkOTv8aIuwmJSvaZbFZG5fYHllYncd5ktDZsu0v-GLC6TjiTRDUilVhAS54C2eKYA6ydg_iq55EcRps0z4w2u59m_o5uot0WknJl8A6jQdqggh-vrWcS9wsQ9PFqVK7RvDkZ3YfEH9KAnlhAWjMO4l99MR__nk-vx0f_QNr4_sd-91wfLi3ZmKxQsLDdjpE81-jG-ZUUIjfVL5FN9f3t_7CSy27FUVg-Cr8OxFhAZevZpQs1eyd4DEsDh_084C0vyPhx9nyT06xNnl5IEMv0FZ18nRuZPTE6nu1YKKhf-nONyZH0QIcfCqt9AKMbnFhANg3E5WeeLC3yHWOcJf7FOag0SkUakTvrYBOaMTWUPBeYzYLSvky7QQzUozY5m1KUDszitjCQjpMOwOWBJqFtRFhAsYWnh4veEbZs7k9bt0IlPZ9fjbwJ041RKVan1ZRLxgr_Ce0Eb_CJf_KSmB4NsH667fNv3OFtO5mL4-qM8hABxVhAiBu0njK8YaONAffkXuO8duuZL097HUneJK3TGQmvD4EtFa759pBm3hs8nEzZcz_rbVOSs8I-MBgrbmBLi1zNolhA-qiw3Q-1xoYI38Wx92-PRegv-omIQ6FftB3__U3zGrcdxR4hIU3e4WUico9GrQ613dQdzNQoR1D20gNugcDJL1hAMKX-OA261GBq0Td2bRGy5fNhnJ8qQ8xeDivoaO88jIDrXYQAdCUO-2xaHYytedZ2KL9pv8bSqKBB1sLe7XkSSlhAm3r9WjmVmDn-amBQmR0OrHjFMBXiwNhBKCoscRRJg25owMfM15lnw23uMtV5RGUdXdK4xwQwbrQ4pFfnvTZaqlhAiAhK4aKAE1ZLTTg7iY_Vu7Y3w002FGaR9b2ta1Gx_kMAX-iLwVqvkMGlgpE5Rkm38VXdo_N7_73vcnE6JPgP8VhATMFAVRtkPBwj-1lUfTzRNygQw-pr4GLP8QSq8S6K3GFR0S8ro7CKgXJEFP8aZ0hcLBHd-9fk0xhXSkvTOEKdULAAWCDXWpWUvsekT2OZEZsHB16Ma2NLz5aIDIc41JKGcVI55QFYINsvKWccLoH7MA9Ys8cA6XkboWl4dJPiv5nLxRDx16SRAlggXigIOz-apVDzKNOjxq--2VCMMJmJ9ChtffwL_wVCFaEDWCDIw9_XGDujpu8ZI9jKxTvOLyWY4Il-NROEPNkW89l-IgRYIIfXgD15ny3D_fAszcYk3mwemqmqUl_LirjPABhkuM3UBVggCbyKR1mQEk4Hev_JHFd14oSq_FiQ4o8gdZVakMughrMGWCBki838Q3foBDBGiEfmmdwrA0V_ZS87LAZ_FOBpkohVCQdYIMumUEYz5uQG_BRg3ikVMg-7mdgzbxw66vo0XkcEw6vICFggtWKgag68_56b2Vm5vZq_GGfLz052q6CEzxsRgDI1QYoJWCDFzhwNurH4PZam4dJuPEPe2LgzhhH3TVW6o87Nee3cSgpYIA20ZyBhb0fqMY9aInWa73OtbWRe1h9qmJWFQByLuM1YC1ggG_TBiQJqfe3Jgl1rYAGEDFfElDhUKTcZN6y8u3QprPwMWCB7wSJRUzhARoVG7mHQZMimbNWRy09fUC_PKy-0H-FJ7w1YIMKMr6ytbcvs7--kiZeI5_yStn-TDvK2zXVrraRwYyaWDlggJeK_7L-f7dwSadMz4wk7lbJVxRC_xrtrHQAWjO8zV84PWCC73Dwc3i16nyun4v6Y-CAFeO56UIo4EIYMc7kmB5AMrYQYIhgjGCUYJg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:c4aa05a4-7b94-4a48-9be6-5630730714d2",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-26T05:05:58Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:58Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAR4ln-Fa3Dz6li4sjpAproNOBhBMp4hAD3Lqk4cHhE-gFm-VsFYsywGhh6RoBTOaP0VrUSRQrFb2CCQ8ZJB11PVgjgCQCaq7onVFbVlK2QPs2CylpsoshAcH5neCV-xtQgNZVlJqYIlhAUXCq5HSBSDgxp30eHI4StSEq8cqMroeM4IR967ZnbmEiLoe1lB7zQ5fMOGQaHE7aQdDbS7wc4ohJaT_2gsF2qlhA3Sdk-8DsoLYHhuCirNPqzRqN4fCcxrnK5rJiioLI3Bs9Vc3TBeaCKwSj2M6xu4ngU7klvqe40ns6qxGCzVU2xFhA7jfQe8t1aVx3d9spo2NTLck_vp4OS4vpek1GUO7_-tne05PzswA1RpvRT2B5Sys67hKk0fkbE_YYbDaz8-Xn1FhAVTafZ1N7VtobG3OB1mcfgbEjHLWOpWZVVqA_3ugQuSCO5XFSFQFGrlpItdOmfNqRWqfqnIA6fbdthSK15r0DZ1hAofn-Nu2h2EsNbtzkc_5tZszAOw1ZYr2yifUy_nJZJX9y4A7dxx249XWZhTGE2o3x5jZDp5PMrXCfnYM161bhblhAEuHDiEZVHBChc4Ifa64_GfOCGW0LycdpNq9CTmo40zAWJlmdCA883m4-M8DYZNspCVI7H40Nbso_r-3iq8ngPFhAv82SFxj2tG7f4_nW4bOenyqI2JK7EJqMGvIrRH1f0jn6lfaf1uTwcL99y-qAENTDIT28i1VVVU6GfJv5YqfJ51hAnR-6Ylc6Pq_9jZ2bhTG2lhTA3w9yvUl6ORcVerlHNVndvhgHZl5gZ4GZPaixJYgGMDxwBVPNED5S1NgXCB4WalhAQ0wusTx6PFDtIO_6QHUXyBIep2DWWHeeMbuoU-nGhqZo5mLM166jgAmSQUIchZ8nsxL0ZjylcBtbHa0LfEJKLVhA78J4E_sUKjLEmBRk61zbaVMgF_NJHy-wSZYvLMHrtVKXfiS5bm9rC1oEAM1u87axgZY7rYx2Xs2w1XGACQKqWlhAok_HpwgwB9alvys5YpiP3HgCQQjCRaSb5BqzYe7e4NaDZDElYV5haLYCz9gHy8dZRiahpXPXvhfYc9aTkPah3lhAI8ZwOEyxMKwZlQ04aF1rIOlhyRIzlMlbR5vqhSa9DX85SXzmE3wIKCmKWq0K2lWZDNAAj6mMusfrgpnjVbpCvVhADGvbY_9gKsmY76WJgVLD8c2vlFcaceETVEe9okbNuiHUaMtixQQwXoBDkjRJk943jmaTMzH6bsUJ9NZYKBJk_1hAFGtZUACh93Huk5xxbuPHvRhR0HamuT6nsAkebFWHocnFYIG5IvcHrRVrVhliYM4DAjKnnUDQPCevCRp73zNCE1hA7fEJsAJLal8ncPyc1RFRiHw2x5cooTdX5rOzRCLeuPxjMoEe7P4lc1-I2yc9QWH5hrMQdkwkJBBMjP4tpbp9G1hA34F4KBRO872Nw8dfoNss5Q1UELa-tg5nU855j6ta401cLq1emnkx7rLblRIWP1_wHtw2qmHRo2e7O0bH93f8BVhA-rybcP3RBHIjhBQBCeufSaZQQnsuv83yMnlgCQ1DQXz6fN9P1Vk88jiIGnepEId90wSBCf9BDIIQ_63vuAW6DVhA--oMpMk666W0hcpIFrwY5eCXunpFTcbLVZZ00px8MFs7U_rbod0kzo_A6v-zsnbae-yoUQGFRPMaThSubLk2qFhAxQPc4BbSOhiosvQ7nOqpeo5oZWaCRR3_4uiiD6i9x-kJWxz7DvmATIHfzkctfUeEx92QeEAgcoYgWppMdi9pgVhACbfT9hqj0LiPpiM8sr6t_H1jBzYqpcWbtXaB75SQyfRcEWxxsWM1pnDS80ZuRTH4IpV6Eyr3CmjKFaT9To1bx1hA-nJcQk2ADFghyX7ab2i6T3IFx7FYx5a9hxzbrHPBxgQck9ukq73L7xSQa-eyeHM-iC48eEcQ7YIkcam6zeLzO1hA0tIhbJ94_R_O5uFnEJLJ-Ip2pZr0ZDaILvGjBiSyPOurrek62twEofbK5LpcItbPCJ2otSssHKA-XS_yvyuBNFhA_82FRBidVq0irpbwuP-kOeTZf48XhzwYJUUStHJLbK3iQlWNwKeWxVQkBt2pVkpB32odJa5MXqmRKMDdTQLYQFhA-T1hXnHI1ciKnR0HZe--kcICOXAJmAyckoQl6xfv6ZxsElSml7nwC3e5FmojHjeK-qX4juKzK-_C3E_MfK-JyVhA3mPoC0CMWw61iSJ1j2Ygot50W68HzOr7Afn7WglEibA4kVHB_vHpBTHVx8M3e79wpoILiwVEtt8Raqu8X19OMlhA75HVhxkaU0yoLoIQJOjffzVs5KIIuARtQMqYAXvWjLK9UDX-srKntrP63eNtPEWT-iwQCwaFPNN-syHihbNQLlhAeaKU2blvPMEbmYbaNQ3kFHpL8HC46g9kqIjgAIzKd6GBrkSEe1i-UJJlvW_KpwMN6d27QN1ynTf19j8WKm4UX1hAVyCBjrpKUCc-OGtCIybj7i7T5xlev7KgUzVfHt_02Zp4D8dG1zjvNPCOospCx7pGVrTSIRSFKjI-XoljIaaFEFhA-g0UOLk2_RMLai2PlKCGzqON-VS6inMnawWrTn_bC1QX0WwZQDaBEstGn9RSYsGI1otK-8TzOVxe1MGgBSUs5FhA0GrrTGfrMi4nceyVH8GSWRqbWo8wJ6nAAO_7GxygnL9lBIYjKqr9aB8axWR6Xm2Mf2R0Lr2RZEOYXfbTnTfkolhA_uaS3Uw1bXY5Hm6MHK9OJRLuX5BrsHnjXOFPx_8xFaf_gLg68fvIDriyDHawzZ56lGUq66hNKfg7iaAv_VzrZ1hAVS9bJndb2CwI9VVAI-ym07t8wl_ntm7uKMOGV3w99ZchVkjHpVS96HC_eZkaY4OZuStAjdGKJBbQ73bbzCSe81hATNhDCgM9X5jHtFg6YnsAFFpp5ZJezCgeXZD3YiysC0hpJsh_1l1UfW5rsm8_TZvBuiZiGKzKhCqwedKd0-I1eFhAl3xLIPHJqmxdXuWhHREBC_Ta07PWNKTuHK9pmtkwWQyCBY2ARCXHcKeySWwtHqHKL7lNniY9Iemjt2pSFXoG5asAWCB2vJrzGoVp3Ii_AZNW2VEr40le47pR4_ErdfplU5pZNgFYICAs3EZouvMRSVjFrc-TnCmipatNJxAT1SCnOgNg6gyEAlggQcd8Bxv9WBwhiyacXBXlSdPPKXSQBHgE0f-wtCO9A9EDWCAmHEkDyN2ujibnlYCOPsSwpIj8t-wXM6GdWDJO_JtmQwRYIBYSm6cuP7Dr6qpSLSiO65Ww1gwU14ChpT6lyXgggG1_BVggYydGjPMFFCGTw0t2lvN812w7vhmd5ZuzSabJs8G142MGWCDb90PRFXhIQFw5XX5xiPU9sgZbxoJUHL605_KyL7rB5QdYII7-5Nvaff_rHb4Ragh4OvTCSdvl0EuSQzZebHtYrSWKCFggO6MeNRE80qLChtG7uEkvCilqvVlyt7Yih8J4x0rENnQJWCAQjYqxeWsPByf67tssv0BYbdidxgaLicJPMuVJXba7cwpYIM5zfckoXX_WwjVN2EwUox4Ckkimqn5L1KVBEJzPQBF6hBITFRY\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-26T05:05:58Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:58Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAR4ln-Fa3Dz6li4sjpAproNOBhBMp4hAD3Lqk4cHhE-gFm-VsFYsywGhh6RoBTOaP0VrUSRQrFb2CCQ8ZJB11PVgjgCQCaq7onVFbVlK2QPs2CylpsoshAcH5neCV-xtQgNZVlJqYIlhAUXCq5HSBSDgxp30eHI4StSEq8cqMroeM4IR967ZnbmEiLoe1lB7zQ5fMOGQaHE7aQdDbS7wc4ohJaT_2gsF2qlhA3Sdk-8DsoLYHhuCirNPqzRqN4fCcxrnK5rJiioLI3Bs9Vc3TBeaCKwSj2M6xu4ngU7klvqe40ns6qxGCzVU2xFhA7jfQe8t1aVx3d9spo2NTLck_vp4OS4vpek1GUO7_-tne05PzswA1RpvRT2B5Sys67hKk0fkbE_YYbDaz8-Xn1FhAVTafZ1N7VtobG3OB1mcfgbEjHLWOpWZVVqA_3ugQuSCO5XFSFQFGrlpItdOmfNqRWqfqnIA6fbdthSK15r0DZ1hAofn-Nu2h2EsNbtzkc_5tZszAOw1ZYr2yifUy_nJZJX9y4A7dxx249XWZhTGE2o3x5jZDp5PMrXCfnYM161bhblhAEuHDiEZVHBChc4Ifa64_GfOCGW0LycdpNq9CTmo40zAWJlmdCA883m4-M8DYZNspCVI7H40Nbso_r-3iq8ngPFhAv82SFxj2tG7f4_nW4bOenyqI2JK7EJqMGvIrRH1f0jn6lfaf1uTwcL99y-qAENTDIT28i1VVVU6GfJv5YqfJ51hAnR-6Ylc6Pq_9jZ2bhTG2lhTA3w9yvUl6ORcVerlHNVndvhgHZl5gZ4GZPaixJYgGMDxwBVPNED5S1NgXCB4WalhAQ0wusTx6PFDtIO_6QHUXyBIep2DWWHeeMbuoU-nGhqZo5mLM166jgAmSQUIchZ8nsxL0ZjylcBtbHa0LfEJKLVhA78J4E_sUKjLEmBRk61zbaVMgF_NJHy-wSZYvLMHrtVKXfiS5bm9rC1oEAM1u87axgZY7rYx2Xs2w1XGACQKqWlhAok_HpwgwB9alvys5YpiP3HgCQQjCRaSb5BqzYe7e4NaDZDElYV5haLYCz9gHy8dZRiahpXPXvhfYc9aTkPah3lhAI8ZwOEyxMKwZlQ04aF1rIOlhyRIzlMlbR5vqhSa9DX85SXzmE3wIKCmKWq0K2lWZDNAAj6mMusfrgpnjVbpCvVhADGvbY_9gKsmY76WJgVLD8c2vlFcaceETVEe9okbNuiHUaMtixQQwXoBDkjRJk943jmaTMzH6bsUJ9NZYKBJk_1hAFGtZUACh93Huk5xxbuPHvRhR0HamuT6nsAkebFWHocnFYIG5IvcHrRVrVhliYM4DAjKnnUDQPCevCRp73zNCE1hA7fEJsAJLal8ncPyc1RFRiHw2x5cooTdX5rOzRCLeuPxjMoEe7P4lc1-I2yc9QWH5hrMQdkwkJBBMjP4tpbp9G1hA34F4KBRO872Nw8dfoNss5Q1UELa-tg5nU855j6ta401cLq1emnkx7rLblRIWP1_wHtw2qmHRo2e7O0bH93f8BVhA-rybcP3RBHIjhBQBCeufSaZQQnsuv83yMnlgCQ1DQXz6fN9P1Vk88jiIGnepEId90wSBCf9BDIIQ_63vuAW6DVhA--oMpMk666W0hcpIFrwY5eCXunpFTcbLVZZ00px8MFs7U_rbod0kzo_A6v-zsnbae-yoUQGFRPMaThSubLk2qFhAxQPc4BbSOhiosvQ7nOqpeo5oZWaCRR3_4uiiD6i9x-kJWxz7DvmATIHfzkctfUeEx92QeEAgcoYgWppMdi9pgVhACbfT9hqj0LiPpiM8sr6t_H1jBzYqpcWbtXaB75SQyfRcEWxxsWM1pnDS80ZuRTH4IpV6Eyr3CmjKFaT9To1bx1hA-nJcQk2ADFghyX7ab2i6T3IFx7FYx5a9hxzbrHPBxgQck9ukq73L7xSQa-eyeHM-iC48eEcQ7YIkcam6zeLzO1hA0tIhbJ94_R_O5uFnEJLJ-Ip2pZr0ZDaILvGjBiSyPOurrek62twEofbK5LpcItbPCJ2otSssHKA-XS_yvyuBNFhA_82FRBidVq0irpbwuP-kOeTZf48XhzwYJUUStHJLbK3iQlWNwKeWxVQkBt2pVkpB32odJa5MXqmRKMDdTQLYQFhA-T1hXnHI1ciKnR0HZe--kcICOXAJmAyckoQl6xfv6ZxsElSml7nwC3e5FmojHjeK-qX4juKzK-_C3E_MfK-JyVhA3mPoC0CMWw61iSJ1j2Ygot50W68HzOr7Afn7WglEibA4kVHB_vHpBTHVx8M3e79wpoILiwVEtt8Raqu8X19OMlhA75HVhxkaU0yoLoIQJOjffzVs5KIIuARtQMqYAXvWjLK9UDX-srKntrP63eNtPEWT-iwQCwaFPNN-syHihbNQLlhAeaKU2blvPMEbmYbaNQ3kFHpL8HC46g9kqIjgAIzKd6GBrkSEe1i-UJJlvW_KpwMN6d27QN1ynTf19j8WKm4UX1hAVyCBjrpKUCc-OGtCIybj7i7T5xlev7KgUzVfHt_02Zp4D8dG1zjvNPCOospCx7pGVrTSIRSFKjI-XoljIaaFEFhA-g0UOLk2_RMLai2PlKCGzqON-VS6inMnawWrTn_bC1QX0WwZQDaBEstGn9RSYsGI1otK-8TzOVxe1MGgBSUs5FhA0GrrTGfrMi4nceyVH8GSWRqbWo8wJ6nAAO_7GxygnL9lBIYjKqr9aB8axWR6Xm2Mf2R0Lr2RZEOYXfbTnTfkolhA_uaS3Uw1bXY5Hm6MHK9OJRLuX5BrsHnjXOFPx_8xFaf_gLg68fvIDriyDHawzZ56lGUq66hNKfg7iaAv_VzrZ1hAVS9bJndb2CwI9VVAI-ym07t8wl_ntm7uKMOGV3w99ZchVkjHpVS96HC_eZkaY4OZuStAjdGKJBbQ73bbzCSe81hATNhDCgM9X5jHtFg6YnsAFFpp5ZJezCgeXZD3YiysC0hpJsh_1l1UfW5rsm8_TZvBuiZiGKzKhCqwedKd0-I1eFhAl3xLIPHJqmxdXuWhHREBC_Ta07PWNKTuHK9pmtkwWQyCBY2ARCXHcKeySWwtHqHKL7lNniY9Iemjt2pSFXoG5asAWCB2vJrzGoVp3Ii_AZNW2VEr40le47pR4_ErdfplU5pZNgFYICAs3EZouvMRSVjFrc-TnCmipatNJxAT1SCnOgNg6gyEAlggQcd8Bxv9WBwhiyacXBXlSdPPKXSQBHgE0f-wtCO9A9EDWCAmHEkDyN2ujibnlYCOPsSwpIj8t-wXM6GdWDJO_JtmQwRYIBYSm6cuP7Dr6qpSLSiO65Ww1gwU14ChpT6lyXgggG1_BVggYydGjPMFFCGTw0t2lvN812w7vhmd5ZuzSabJs8G142MGWCDb90PRFXhIQFw5XX5xiPU9sgZbxoJUHL605_KyL7rB5QdYII7-5Nvaff_rHb4Ragh4OvTCSdvl0EuSQzZebHtYrSWKCFggO6MeNRE80qLChtG7uEkvCilqvVlyt7Yih8J4x0rENnQJWCAQjYqxeWsPByf67tssv0BYbdidxgaLicJPMuVJXba7cwpYIM5zfckoXX_WwjVN2EwUox4Ckkimqn5L1KVBEJzPQBF6hBITFRY"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:163a0f1f-7e8b-4d15-b877-c7fa93a006cb",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23251,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2887,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:3095b140-1886-4488-9598-030f2eb9be24",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:0bd2b159-7a97-49e4-9c7e-a11ab716a29b",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:e742a3b3-ddff-4b25-b1c1-baa289e93733",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:b1e596d2-1265-43b6-af23-3bb1f5ad1b59",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 347,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "kjuOtFSG7JN9FOdo0KdKz",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:b221a8dc-dc80-4e01-80f0-5308b7b8d503"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:48c3396f-4ceb-4bc2-8aec-6893be78e93e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:9336b972-70ec-4bd2-9785-0e46e06c53ba",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:e8c413ac-271e-4463-899d-2789fec874bb",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:ee0155b4-952f-44d6-9fc6-9479305f4b43",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:13a8159b-8f17-4b6f-8362-b9c4217b8d1e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:f05e2365-061b-4026-9d6e-212d7000b5af",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:2f7925f3-eef9-4b2a-b58b-37a1f122bf7b",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:d1d4d3ab-7a38-4de4-9b5d-4864578cd133",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:0bad39ec-7b28-4645-863f-171fb3604d8a",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:da6f1a96-a425-406b-9094-b0544add12fd",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "kjuOtFSG7JN9FOdo0KdKz",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:63d763b8-603e-4867-a04a-b8b86a077a6f"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:214fd779-b56e-429a-854a-c5be90902701",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:a0d52fa0-b7fe-4fef-97cb-38a2ff6d2411",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28143,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:6b66f166-6694-48fd-9ea8-1f948fd4fe50",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:25488a7f-204a-42fa-93dc-539ddfd3b71a",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 899,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:a8081e09-dd69-44be-9f8e-3c9b188505e0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 583,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:5a245d8d-24d9-4f97-ad2d-50582cc1870a",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 463,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:4a2df18b-a595-4b4b-af03-57bce18f6d4e",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:8dcad2c1-ae07-44f5-9d23-3e72d9beb5c8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30508,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:eff5eb98-8030-49b0-ba2b-5b34c01ae0ae",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:c42a9fb7-6266-4e16-8fcd-ddf7f9e48ecb",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 257,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "kjuOtFSG7JN9FOdo0KdKz",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:fb5b5c2b-948a-4c8d-a141-f2b7fc284cae"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:38fe34be-a289-4389-a278-0b23ff1a514f",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:6c81b078-c2e4-4e47-8a8c-a9372cbee3af",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:48c3396f-4ceb-4bc2-8aec-6893be78e93e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:214fd779-b56e-429a-854a-c5be90902701",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:787dccdf-9eea-4746-964f-a04b15ca37c5",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 807,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:9336b972-70ec-4bd2-9785-0e46e06c53ba",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:a0d52fa0-b7fe-4fef-97cb-38a2ff6d2411",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28143,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:7dfa7d10-5abb-4b76-badf-7d4f181cbbc2",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 689,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:e8c413ac-271e-4463-899d-2789fec874bb",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:6b66f166-6694-48fd-9ea8-1f948fd4fe50",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:f144c800-3331-428b-98cf-ee503adf6993",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22731,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 309,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-26T05:05:58Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:58Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhA__Fet2bj2B8mW1wYX5jj58AelHOV4WggVSeetd5sIiBcD_5yTZwmd-xqT9cFQlP2d7rvI8axsQqxcKFPUcke1lgjgCQC3B6lvQOhTg5UwwEX7BGUR3o6hM9RkSawdqQPAoXL69CYN1hApW6zWSC3zfU9KibSD8Qe9k9jjeDQPLxJ9wB-VqxN7SZcxS2xBSk10dmZUbZFWj8YnCXkeg6tSICCF5euHApe51hAKP4InWEhwX1T0oIQwVn8E6hgQEZeCAHNQZyLMixyUysQegk4ce_Qxiy5PAYQzMAEC2dsiRCcUnmghfZjqw33lFhAyz8XhmQCjn8Xj3cpz_oX-rAfEXDPhPQ8ZsPlwtIlk7bb6B22-CXegB5sIuOxFHpfUkjqt3iA5lXllb2fUP0UqVhA0KWfdVownuqjuZihOyaQlMfC5r2FawaLo67TALOfQddhXQ6BkouHyt8k5cOBOe2v4pTwvFNsW6QRCit2ndgVklhAgUjxSOB_nTRyEx_DJGCOVyOiEmpKThq4c5DjczatcA_cKlrdHOiyEk88vWE-HFW0mnY5X5H2NtuXtiRrJFetSFhAHXAHdBGVlDBWWR_WFTQA6uM0JEJsl__iu2liv8HZSMrOGHKAsHNEOP0QxBBLxLCySwrZgMsqpgVm6Zpc4nqqbVhAN9AXqWi2F3MzIADRFRaMAu-UhQpLD06baa4h97TsIjzI1i90IN_4XVrCqsN_3EmF_EU4VDi9DpjS23E1QC3L3VhAruLOS0Jm5f6X73QtLfas5PyzLoJoWNQzPYj8JUTFEvC8rc93ncrK6ojbp23DykTLLVaQ7Ma5IF029owO3CiBplhA8U1ypoaarGkJi2dJwufrgVodDDyW-KQ8hKlg-FLhBqvqBhkbEBCiL3HTdnam3MktRN9ZQq9IHDjGJkLTLLVjfVhAZIw1B2YA2e51cLZOdzOf8SgTqy0BL3gI3VRSB75svmavT8WzR5e40TIRJjsopF_B7q4TOf72iActu-OBveRVklhAdvkip0esJyQ5H9h97X--y2cA0VaV1F3prcDnN4Vx8_6nlQlffcbf_a7korWrVtdh9FACV_iHOKjqVZ9gkovMtlhA3rDyZ_2biq3KH13bOI1nfeXn5V5Gsc6_8u5Ihe_0OgKp2evN3fU8Ce3bKv7HKRFGgNsu9WITPjbc_C_WKyJ_j1hANkpUpfzBfA4dLdmrOYK4Te7fg7xDIPe1LoN5XVSZWlQSiuaUW6KfTnXSMa_33hEm-Wgvi0oAE-sS2S5FASear1hAVA2X21aXSgjRU5d-R8qXznB901wKgi4hB7totAMtRtrl_E3GR9PmhNkeyruTTk2GHWtatNvOFXY1_UyrHOiq_VhAJ6B6AeBBaZ9qsOq6kb1BVO4iUu2iU35UCOP5f39KjxkOia_4kFO5fwgQ_X8948kR-eCXr03zzRxTD5GquOL8WFhAHBbsjfswnLZVGKHoM7HXdzQ1lyZekbGTg8evmaIRL6f7rIVpoHtx-xFRP8AtlAWZLY59WXyY6A6NcHfsoQ0WU1hAmuYQMIoF6txKWYkRqiHJdm-j3DqWwj3VRacPkw6YdYm6wobAHwJY2PfvI858mKWUG_JXN0GAt0HxucR7FkueqVhA1W9Vp423MaDxbSkX-OxdG9xF40pV1naCRUeMzQmYQvuhp15lquMCf2CPbddtVOcDNF2KJpAtZCWaAi4fFWhnnFhAt3ec83fqoJpVaWt-M-MevPFtM8zMjLrIf0_bqFi3m5D7CS-Q3_hr_m2qMQ102t_tn2Z_EXsJatS7O-NehyeRe1hAKlZ5Hk_csjQLXLjk0AX9gNhNeThE2bd4_dZqwZ6MuEn-Vu38SxzCa80UOmBznVQGs9zpfzxlSIyTcXSd7h4uKVhAhh0SBDaFowwA-3agGoIt-6yxv2XWSY0uDOhIjMQS7JJUyBYSM48uK6uq2uRz5TIaLRlKfctc2gzWcpYg5fJKClhA4vNkpkmEJq1egymsc-Lesc5vikrRnz7ewDV-gkkkOpnn_A_IFNSo7xffjfgk31xi1JbD7c9e8kqEHYWfjWEKWVhAT3Z8y8VxVIUnQvEuXy70de4ZDy173M8tbxAam9ZkXKOdBFvS6h-rOoPfSByOEp1L1J2yszqfIqG-_8NZpcN0jlhABdr8CjWFobKDosjX8yqTt9p2FaXB2jfTyAYqwzI9NUdZkHd-tj0XdAw1lQd0uNTzUJ6cYhWmDpRay2nVBkNSHVhAT3n-GpVH6xb9Oa05sc5W406MnQSlpa1w3zTegr2Wvw5H2FheLMo1sUovhSL5FetKPubqPN0abVnbdYsbpa_bQlhAa_gJ76MtNOxxl9euGfsNCnIqjNcTXp5X_52qNZ1f5xkpMYn73L5Co7D_RZhh8g6VPsv5Iq_J4fTWXRNksRy1AFhARvWc3E_yvUKmfL3WFLbuqcvHBp2YY0Vyk2L8RbmbNXDuk1_wCKFu2rXM9I4TM8L0xFaASDr9nI6_6GsFzfHULlhAoldMDbvJyliKm2Xo3X8XhQnM8oRnYO-hHTeqs6LkAadUxsNybVUOzMIErpwthggsoRYRacG1xVut7-EkU5g7VVhAnz_kHzHQrJnDiXhe-hWGQCWM8tYovsBgpE6cA7aCPIa0p9iEGTvLzBP5fNO9haYOBxKOhnen2Q97_3bWLVUn51hAlO7y_r9etOlc7xcpYrdkF4QcywLhHEQSUixMEWLWlIX1Wzh3oW07gX1ytD6-zF3SF5YD61ApzZYp6i8jpEmColhAYhAPDrEoaunVCQeD27PNw1hE0u2CVvvurf4rl6KTn2eTpNv2ZOYEwDUexY_Tl8UEEvGKzB3sa_pbFLj6GCPGVlhAsGXvTIqu0B50W7oatBH99K4Xmx0kS5XS3fWsOIvgQ0lhUo0jAeJq4WA5ZO-L14crJLjDpt1eIw6ectUmPbjq71hAxG9mkTgWvYFDoXJ2dhU0500H8oWLhu-h5u25qKr38FFZ6sSWv6eygDmXz_f-uu5tAjtlGudXEe5yme0BogNNqVhAKa9s2nNN10nC2FNxPEKL8l7_vR_x2pCAkAdJnJx5rJa2hP7Aeh46FD7wwfMkcyHMBQ14rxnQqv5vohi7v4M85FhAK_06pAk7uuvTq1go1kJQEoGNiDyqq85R3DU5jl27E85LLJuOnRlphtsjN6-6Ivs8Bi6VUfOJUQNli6igLHb0yVhAQ7ael1ywi2fu3258UW3d0b7arg5WJkxs2fiepTZKDljY_nOWBH9KpQiGXMr6AfQR4FB7ic6NR6cSGfb8Ow9fAFhAbwNPEA85uA_F9zGURSzuDolAUI-VdMimmRYxcTdu8vFb_X9nAOZvvO1m_XI8EElML2YYztillaN3IHTvPmLlxVhAraOzcFfExezk5Tfa3VjDsvdbnEUw-8RBAyoRaevHAj5tnabkCe6wgRxKRFzwoCDJLA-vWXOdVpG_nPtQAqdJSVhA2TQ_q5cVFHDFHTq2tWZj412a3_HPqqXbe4TpXgcNRSCqahPT3ddHWmhmfutR27jGKcWz_ijIGNmtvXRdLN3bk1hAo7NWwXdYSVnDWFCkgJzMhmRAwNZOgOZO-dijPtH1Ee88LrOt5qB_-EPJbDgXHEMm0245JbuYJThsQrCKy972E1hA0hU-MgYcja07Sr8ar8bH_9JOw1JsEIbtBpKCQXYsqbDdQB-YUrNmw-9gYN7wEQ4KT9gjzY60GS-rY1ISUwpHtFhAUfBihHOQw3KJIRb4Wba0gZ3sf9N9v0m05gQ9tfYZ4yi3fcrxrFIHvIKQodUYs0o7ppnJzPkqVs_YaOnHA0QH3lhATAKne0O4TymFJRKh6OnWvJkBR6GJMt0P9UCxb5uYRpmcA8EtDjwst2j6qWJ1VUVh17D6RPJEKAl9mRd-6Pzo7FhA-eVgk6iSqF7OI-Kr085jiM5ZC-0a2M7JdkOTv8aIuwmJSvaZbFZG5fYHllYncd5ktDZsu0v-GLC6TjiTRDUilVhAS54C2eKYA6ydg_iq55EcRps0z4w2u59m_o5uot0WknJl8A6jQdqggh-vrWcS9wsQ9PFqVK7RvDkZ3YfEH9KAnlhAWjMO4l99MR__nk-vx0f_QNr4_sd-91wfLi3ZmKxQsLDdjpE81-jG-ZUUIjfVL5FN9f3t_7CSy27FUVg-Cr8OxFhAZevZpQs1eyd4DEsDh_084C0vyPhx9nyT06xNnl5IEMv0FZ18nRuZPTE6nu1YKKhf-nONyZH0QIcfCqt9AKMbnFhANg3E5WeeLC3yHWOcJf7FOag0SkUakTvrYBOaMTWUPBeYzYLSvky7QQzUozY5m1KUDszitjCQjpMOwOWBJqFtRFhAsYWnh4veEbZs7k9bt0IlPZ9fjbwJ041RKVan1ZRLxgr_Ce0Eb_CJf_KSmB4NsH667fNv3OFtO5mL4-qM8hABxVhAiBu0njK8YaONAffkXuO8duuZL097HUneJK3TGQmvD4EtFa759pBm3hs8nEzZcz_rbVOSs8I-MBgrbmBLi1zNolhA-qiw3Q-1xoYI38Wx92-PRegv-omIQ6FftB3__U3zGrcdxR4hIU3e4WUico9GrQ613dQdzNQoR1D20gNugcDJL1hAMKX-OA261GBq0Td2bRGy5fNhnJ8qQ8xeDivoaO88jIDrXYQAdCUO-2xaHYytedZ2KL9pv8bSqKBB1sLe7XkSSlhAm3r9WjmVmDn-amBQmR0OrHjFMBXiwNhBKCoscRRJg25owMfM15lnw23uMtV5RGUdXdK4xwQwbrQ4pFfnvTZaqlhAiAhK4aKAE1ZLTTg7iY_Vu7Y3w002FGaR9b2ta1Gx_kMAX-iLwVqvkMGlgpE5Rkm38VXdo_N7_73vcnE6JPgP8VhATMFAVRtkPBwj-1lUfTzRNygQw-pr4GLP8QSq8S6K3GFR0S8ro7CKgXJEFP8aZ0hcLBHd-9fk0xhXSkvTOEKdULAAWCDXWpWUvsekT2OZEZsHB16Ma2NLz5aIDIc41JKGcVI55QFYINsvKWccLoH7MA9Ys8cA6XkboWl4dJPiv5nLxRDx16SRAlggXigIOz-apVDzKNOjxq--2VCMMJmJ9ChtffwL_wVCFaEDWCDIw9_XGDujpu8ZI9jKxTvOLyWY4Il-NROEPNkW89l-IgRYIIfXgD15ny3D_fAszcYk3mwemqmqUl_LirjPABhkuM3UBVggCbyKR1mQEk4Hev_JHFd14oSq_FiQ4o8gdZVakMughrMGWCBki838Q3foBDBGiEfmmdwrA0V_ZS87LAZ_FOBpkohVCQdYIMumUEYz5uQG_BRg3ikVMg-7mdgzbxw66vo0XkcEw6vICFggtWKgag68_56b2Vm5vZq_GGfLz052q6CEzxsRgDI1QYoJWCDFzhwNurH4PZam4dJuPEPe2LgzhhH3TVW6o87Nee3cSgpYIA20ZyBhb0fqMY9aInWa73OtbWRe1h9qmJWFQByLuM1YC1ggG_TBiQJqfe3Jgl1rYAGEDFfElDhUKTcZN6y8u3QprPwMWCB7wSJRUzhARoVG7mHQZMimbNWRy09fUC_PKy-0H-FJ7w1YIMKMr6ytbcvs7--kiZeI5_yStn-TDvK2zXVrraRwYyaWDlggJeK_7L-f7dwSadMz4wk7lbJVxRC_xrtrHQAWjO8zV84PWCC73Dwc3i16nyun4v6Y-CAFeO56UIo4EIYMc7kmB5AMrYQYIhgjGCUYJg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-26T05:05:58Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:58Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhA__Fet2bj2B8mW1wYX5jj58AelHOV4WggVSeetd5sIiBcD_5yTZwmd-xqT9cFQlP2d7rvI8axsQqxcKFPUcke1lgjgCQC3B6lvQOhTg5UwwEX7BGUR3o6hM9RkSawdqQPAoXL69CYN1hApW6zWSC3zfU9KibSD8Qe9k9jjeDQPLxJ9wB-VqxN7SZcxS2xBSk10dmZUbZFWj8YnCXkeg6tSICCF5euHApe51hAKP4InWEhwX1T0oIQwVn8E6hgQEZeCAHNQZyLMixyUysQegk4ce_Qxiy5PAYQzMAEC2dsiRCcUnmghfZjqw33lFhAyz8XhmQCjn8Xj3cpz_oX-rAfEXDPhPQ8ZsPlwtIlk7bb6B22-CXegB5sIuOxFHpfUkjqt3iA5lXllb2fUP0UqVhA0KWfdVownuqjuZihOyaQlMfC5r2FawaLo67TALOfQddhXQ6BkouHyt8k5cOBOe2v4pTwvFNsW6QRCit2ndgVklhAgUjxSOB_nTRyEx_DJGCOVyOiEmpKThq4c5DjczatcA_cKlrdHOiyEk88vWE-HFW0mnY5X5H2NtuXtiRrJFetSFhAHXAHdBGVlDBWWR_WFTQA6uM0JEJsl__iu2liv8HZSMrOGHKAsHNEOP0QxBBLxLCySwrZgMsqpgVm6Zpc4nqqbVhAN9AXqWi2F3MzIADRFRaMAu-UhQpLD06baa4h97TsIjzI1i90IN_4XVrCqsN_3EmF_EU4VDi9DpjS23E1QC3L3VhAruLOS0Jm5f6X73QtLfas5PyzLoJoWNQzPYj8JUTFEvC8rc93ncrK6ojbp23DykTLLVaQ7Ma5IF029owO3CiBplhA8U1ypoaarGkJi2dJwufrgVodDDyW-KQ8hKlg-FLhBqvqBhkbEBCiL3HTdnam3MktRN9ZQq9IHDjGJkLTLLVjfVhAZIw1B2YA2e51cLZOdzOf8SgTqy0BL3gI3VRSB75svmavT8WzR5e40TIRJjsopF_B7q4TOf72iActu-OBveRVklhAdvkip0esJyQ5H9h97X--y2cA0VaV1F3prcDnN4Vx8_6nlQlffcbf_a7korWrVtdh9FACV_iHOKjqVZ9gkovMtlhA3rDyZ_2biq3KH13bOI1nfeXn5V5Gsc6_8u5Ihe_0OgKp2evN3fU8Ce3bKv7HKRFGgNsu9WITPjbc_C_WKyJ_j1hANkpUpfzBfA4dLdmrOYK4Te7fg7xDIPe1LoN5XVSZWlQSiuaUW6KfTnXSMa_33hEm-Wgvi0oAE-sS2S5FASear1hAVA2X21aXSgjRU5d-R8qXznB901wKgi4hB7totAMtRtrl_E3GR9PmhNkeyruTTk2GHWtatNvOFXY1_UyrHOiq_VhAJ6B6AeBBaZ9qsOq6kb1BVO4iUu2iU35UCOP5f39KjxkOia_4kFO5fwgQ_X8948kR-eCXr03zzRxTD5GquOL8WFhAHBbsjfswnLZVGKHoM7HXdzQ1lyZekbGTg8evmaIRL6f7rIVpoHtx-xFRP8AtlAWZLY59WXyY6A6NcHfsoQ0WU1hAmuYQMIoF6txKWYkRqiHJdm-j3DqWwj3VRacPkw6YdYm6wobAHwJY2PfvI858mKWUG_JXN0GAt0HxucR7FkueqVhA1W9Vp423MaDxbSkX-OxdG9xF40pV1naCRUeMzQmYQvuhp15lquMCf2CPbddtVOcDNF2KJpAtZCWaAi4fFWhnnFhAt3ec83fqoJpVaWt-M-MevPFtM8zMjLrIf0_bqFi3m5D7CS-Q3_hr_m2qMQ102t_tn2Z_EXsJatS7O-NehyeRe1hAKlZ5Hk_csjQLXLjk0AX9gNhNeThE2bd4_dZqwZ6MuEn-Vu38SxzCa80UOmBznVQGs9zpfzxlSIyTcXSd7h4uKVhAhh0SBDaFowwA-3agGoIt-6yxv2XWSY0uDOhIjMQS7JJUyBYSM48uK6uq2uRz5TIaLRlKfctc2gzWcpYg5fJKClhA4vNkpkmEJq1egymsc-Lesc5vikrRnz7ewDV-gkkkOpnn_A_IFNSo7xffjfgk31xi1JbD7c9e8kqEHYWfjWEKWVhAT3Z8y8VxVIUnQvEuXy70de4ZDy173M8tbxAam9ZkXKOdBFvS6h-rOoPfSByOEp1L1J2yszqfIqG-_8NZpcN0jlhABdr8CjWFobKDosjX8yqTt9p2FaXB2jfTyAYqwzI9NUdZkHd-tj0XdAw1lQd0uNTzUJ6cYhWmDpRay2nVBkNSHVhAT3n-GpVH6xb9Oa05sc5W406MnQSlpa1w3zTegr2Wvw5H2FheLMo1sUovhSL5FetKPubqPN0abVnbdYsbpa_bQlhAa_gJ76MtNOxxl9euGfsNCnIqjNcTXp5X_52qNZ1f5xkpMYn73L5Co7D_RZhh8g6VPsv5Iq_J4fTWXRNksRy1AFhARvWc3E_yvUKmfL3WFLbuqcvHBp2YY0Vyk2L8RbmbNXDuk1_wCKFu2rXM9I4TM8L0xFaASDr9nI6_6GsFzfHULlhAoldMDbvJyliKm2Xo3X8XhQnM8oRnYO-hHTeqs6LkAadUxsNybVUOzMIErpwthggsoRYRacG1xVut7-EkU5g7VVhAnz_kHzHQrJnDiXhe-hWGQCWM8tYovsBgpE6cA7aCPIa0p9iEGTvLzBP5fNO9haYOBxKOhnen2Q97_3bWLVUn51hAlO7y_r9etOlc7xcpYrdkF4QcywLhHEQSUixMEWLWlIX1Wzh3oW07gX1ytD6-zF3SF5YD61ApzZYp6i8jpEmColhAYhAPDrEoaunVCQeD27PNw1hE0u2CVvvurf4rl6KTn2eTpNv2ZOYEwDUexY_Tl8UEEvGKzB3sa_pbFLj6GCPGVlhAsGXvTIqu0B50W7oatBH99K4Xmx0kS5XS3fWsOIvgQ0lhUo0jAeJq4WA5ZO-L14crJLjDpt1eIw6ectUmPbjq71hAxG9mkTgWvYFDoXJ2dhU0500H8oWLhu-h5u25qKr38FFZ6sSWv6eygDmXz_f-uu5tAjtlGudXEe5yme0BogNNqVhAKa9s2nNN10nC2FNxPEKL8l7_vR_x2pCAkAdJnJx5rJa2hP7Aeh46FD7wwfMkcyHMBQ14rxnQqv5vohi7v4M85FhAK_06pAk7uuvTq1go1kJQEoGNiDyqq85R3DU5jl27E85LLJuOnRlphtsjN6-6Ivs8Bi6VUfOJUQNli6igLHb0yVhAQ7ael1ywi2fu3258UW3d0b7arg5WJkxs2fiepTZKDljY_nOWBH9KpQiGXMr6AfQR4FB7ic6NR6cSGfb8Ow9fAFhAbwNPEA85uA_F9zGURSzuDolAUI-VdMimmRYxcTdu8vFb_X9nAOZvvO1m_XI8EElML2YYztillaN3IHTvPmLlxVhAraOzcFfExezk5Tfa3VjDsvdbnEUw-8RBAyoRaevHAj5tnabkCe6wgRxKRFzwoCDJLA-vWXOdVpG_nPtQAqdJSVhA2TQ_q5cVFHDFHTq2tWZj412a3_HPqqXbe4TpXgcNRSCqahPT3ddHWmhmfutR27jGKcWz_ijIGNmtvXRdLN3bk1hAo7NWwXdYSVnDWFCkgJzMhmRAwNZOgOZO-dijPtH1Ee88LrOt5qB_-EPJbDgXHEMm0245JbuYJThsQrCKy972E1hA0hU-MgYcja07Sr8ar8bH_9JOw1JsEIbtBpKCQXYsqbDdQB-YUrNmw-9gYN7wEQ4KT9gjzY60GS-rY1ISUwpHtFhAUfBihHOQw3KJIRb4Wba0gZ3sf9N9v0m05gQ9tfYZ4yi3fcrxrFIHvIKQodUYs0o7ppnJzPkqVs_YaOnHA0QH3lhATAKne0O4TymFJRKh6OnWvJkBR6GJMt0P9UCxb5uYRpmcA8EtDjwst2j6qWJ1VUVh17D6RPJEKAl9mRd-6Pzo7FhA-eVgk6iSqF7OI-Kr085jiM5ZC-0a2M7JdkOTv8aIuwmJSvaZbFZG5fYHllYncd5ktDZsu0v-GLC6TjiTRDUilVhAS54C2eKYA6ydg_iq55EcRps0z4w2u59m_o5uot0WknJl8A6jQdqggh-vrWcS9wsQ9PFqVK7RvDkZ3YfEH9KAnlhAWjMO4l99MR__nk-vx0f_QNr4_sd-91wfLi3ZmKxQsLDdjpE81-jG-ZUUIjfVL5FN9f3t_7CSy27FUVg-Cr8OxFhAZevZpQs1eyd4DEsDh_084C0vyPhx9nyT06xNnl5IEMv0FZ18nRuZPTE6nu1YKKhf-nONyZH0QIcfCqt9AKMbnFhANg3E5WeeLC3yHWOcJf7FOag0SkUakTvrYBOaMTWUPBeYzYLSvky7QQzUozY5m1KUDszitjCQjpMOwOWBJqFtRFhAsYWnh4veEbZs7k9bt0IlPZ9fjbwJ041RKVan1ZRLxgr_Ce0Eb_CJf_KSmB4NsH667fNv3OFtO5mL4-qM8hABxVhAiBu0njK8YaONAffkXuO8duuZL097HUneJK3TGQmvD4EtFa759pBm3hs8nEzZcz_rbVOSs8I-MBgrbmBLi1zNolhA-qiw3Q-1xoYI38Wx92-PRegv-omIQ6FftB3__U3zGrcdxR4hIU3e4WUico9GrQ613dQdzNQoR1D20gNugcDJL1hAMKX-OA261GBq0Td2bRGy5fNhnJ8qQ8xeDivoaO88jIDrXYQAdCUO-2xaHYytedZ2KL9pv8bSqKBB1sLe7XkSSlhAm3r9WjmVmDn-amBQmR0OrHjFMBXiwNhBKCoscRRJg25owMfM15lnw23uMtV5RGUdXdK4xwQwbrQ4pFfnvTZaqlhAiAhK4aKAE1ZLTTg7iY_Vu7Y3w002FGaR9b2ta1Gx_kMAX-iLwVqvkMGlgpE5Rkm38VXdo_N7_73vcnE6JPgP8VhATMFAVRtkPBwj-1lUfTzRNygQw-pr4GLP8QSq8S6K3GFR0S8ro7CKgXJEFP8aZ0hcLBHd-9fk0xhXSkvTOEKdULAAWCDXWpWUvsekT2OZEZsHB16Ma2NLz5aIDIc41JKGcVI55QFYINsvKWccLoH7MA9Ys8cA6XkboWl4dJPiv5nLxRDx16SRAlggXigIOz-apVDzKNOjxq--2VCMMJmJ9ChtffwL_wVCFaEDWCDIw9_XGDujpu8ZI9jKxTvOLyWY4Il-NROEPNkW89l-IgRYIIfXgD15ny3D_fAszcYk3mwemqmqUl_LirjPABhkuM3UBVggCbyKR1mQEk4Hev_JHFd14oSq_FiQ4o8gdZVakMughrMGWCBki838Q3foBDBGiEfmmdwrA0V_ZS87LAZ_FOBpkohVCQdYIMumUEYz5uQG_BRg3ikVMg-7mdgzbxw66vo0XkcEw6vICFggtWKgag68_56b2Vm5vZq_GGfLz052q6CEzxsRgDI1QYoJWCDFzhwNurH4PZam4dJuPEPe2LgzhhH3TVW6o87Nee3cSgpYIA20ZyBhb0fqMY9aInWa73OtbWRe1h9qmJWFQByLuM1YC1ggG_TBiQJqfe3Jgl1rYAGEDFfElDhUKTcZN6y8u3QprPwMWCB7wSJRUzhARoVG7mHQZMimbNWRy09fUC_PKy-0H-FJ7w1YIMKMr6ytbcvs7--kiZeI5_yStn-TDvK2zXVrraRwYyaWDlggJeK_7L-f7dwSadMz4wk7lbJVxRC_xrtrHQAWjO8zV84PWCC73Dwc3i16nyun4v6Y-CAFeO56UIo4EIYMc7kmB5AMrYQYIhgjGCUYJg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:ee0155b4-952f-44d6-9fc6-9479305f4b43",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:25488a7f-204a-42fa-93dc-539ddfd3b71a",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 899,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:c4aa05a4-7b94-4a48-9be6-5630730714d2",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-05-26T05:05:58Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:05:58Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAR4ln-Fa3Dz6li4sjpAproNOBhBMp4hAD3Lqk4cHhE-gFm-VsFYsywGhh6RoBTOaP0VrUSRQrFb2CCQ8ZJB11PVgjgCQCaq7onVFbVlK2QPs2CylpsoshAcH5neCV-xtQgNZVlJqYIlhAUXCq5HSBSDgxp30eHI4StSEq8cqMroeM4IR967ZnbmEiLoe1lB7zQ5fMOGQaHE7aQdDbS7wc4ohJaT_2gsF2qlhA3Sdk-8DsoLYHhuCirNPqzRqN4fCcxrnK5rJiioLI3Bs9Vc3TBeaCKwSj2M6xu4ngU7klvqe40ns6qxGCzVU2xFhA7jfQe8t1aVx3d9spo2NTLck_vp4OS4vpek1GUO7_-tne05PzswA1RpvRT2B5Sys67hKk0fkbE_YYbDaz8-Xn1FhAVTafZ1N7VtobG3OB1mcfgbEjHLWOpWZVVqA_3ugQuSCO5XFSFQFGrlpItdOmfNqRWqfqnIA6fbdthSK15r0DZ1hAofn-Nu2h2EsNbtzkc_5tZszAOw1ZYr2yifUy_nJZJX9y4A7dxx249XWZhTGE2o3x5jZDp5PMrXCfnYM161bhblhAEuHDiEZVHBChc4Ifa64_GfOCGW0LycdpNq9CTmo40zAWJlmdCA883m4-M8DYZNspCVI7H40Nbso_r-3iq8ngPFhAv82SFxj2tG7f4_nW4bOenyqI2JK7EJqMGvIrRH1f0jn6lfaf1uTwcL99y-qAENTDIT28i1VVVU6GfJv5YqfJ51hAnR-6Ylc6Pq_9jZ2bhTG2lhTA3w9yvUl6ORcVerlHNVndvhgHZl5gZ4GZPaixJYgGMDxwBVPNED5S1NgXCB4WalhAQ0wusTx6PFDtIO_6QHUXyBIep2DWWHeeMbuoU-nGhqZo5mLM166jgAmSQUIchZ8nsxL0ZjylcBtbHa0LfEJKLVhA78J4E_sUKjLEmBRk61zbaVMgF_NJHy-wSZYvLMHrtVKXfiS5bm9rC1oEAM1u87axgZY7rYx2Xs2w1XGACQKqWlhAok_HpwgwB9alvys5YpiP3HgCQQjCRaSb5BqzYe7e4NaDZDElYV5haLYCz9gHy8dZRiahpXPXvhfYc9aTkPah3lhAI8ZwOEyxMKwZlQ04aF1rIOlhyRIzlMlbR5vqhSa9DX85SXzmE3wIKCmKWq0K2lWZDNAAj6mMusfrgpnjVbpCvVhADGvbY_9gKsmY76WJgVLD8c2vlFcaceETVEe9okbNuiHUaMtixQQwXoBDkjRJk943jmaTMzH6bsUJ9NZYKBJk_1hAFGtZUACh93Huk5xxbuPHvRhR0HamuT6nsAkebFWHocnFYIG5IvcHrRVrVhliYM4DAjKnnUDQPCevCRp73zNCE1hA7fEJsAJLal8ncPyc1RFRiHw2x5cooTdX5rOzRCLeuPxjMoEe7P4lc1-I2yc9QWH5hrMQdkwkJBBMjP4tpbp9G1hA34F4KBRO872Nw8dfoNss5Q1UELa-tg5nU855j6ta401cLq1emnkx7rLblRIWP1_wHtw2qmHRo2e7O0bH93f8BVhA-rybcP3RBHIjhBQBCeufSaZQQnsuv83yMnlgCQ1DQXz6fN9P1Vk88jiIGnepEId90wSBCf9BDIIQ_63vuAW6DVhA--oMpMk666W0hcpIFrwY5eCXunpFTcbLVZZ00px8MFs7U_rbod0kzo_A6v-zsnbae-yoUQGFRPMaThSubLk2qFhAxQPc4BbSOhiosvQ7nOqpeo5oZWaCRR3_4uiiD6i9x-kJWxz7DvmATIHfzkctfUeEx92QeEAgcoYgWppMdi9pgVhACbfT9hqj0LiPpiM8sr6t_H1jBzYqpcWbtXaB75SQyfRcEWxxsWM1pnDS80ZuRTH4IpV6Eyr3CmjKFaT9To1bx1hA-nJcQk2ADFghyX7ab2i6T3IFx7FYx5a9hxzbrHPBxgQck9ukq73L7xSQa-eyeHM-iC48eEcQ7YIkcam6zeLzO1hA0tIhbJ94_R_O5uFnEJLJ-Ip2pZr0ZDaILvGjBiSyPOurrek62twEofbK5LpcItbPCJ2otSssHKA-XS_yvyuBNFhA_82FRBidVq0irpbwuP-kOeTZf48XhzwYJUUStHJLbK3iQlWNwKeWxVQkBt2pVkpB32odJa5MXqmRKMDdTQLYQFhA-T1hXnHI1ciKnR0HZe--kcICOXAJmAyckoQl6xfv6ZxsElSml7nwC3e5FmojHjeK-qX4juKzK-_C3E_MfK-JyVhA3mPoC0CMWw61iSJ1j2Ygot50W68HzOr7Afn7WglEibA4kVHB_vHpBTHVx8M3e79wpoILiwVEtt8Raqu8X19OMlhA75HVhxkaU0yoLoIQJOjffzVs5KIIuARtQMqYAXvWjLK9UDX-srKntrP63eNtPEWT-iwQCwaFPNN-syHihbNQLlhAeaKU2blvPMEbmYbaNQ3kFHpL8HC46g9kqIjgAIzKd6GBrkSEe1i-UJJlvW_KpwMN6d27QN1ynTf19j8WKm4UX1hAVyCBjrpKUCc-OGtCIybj7i7T5xlev7KgUzVfHt_02Zp4D8dG1zjvNPCOospCx7pGVrTSIRSFKjI-XoljIaaFEFhA-g0UOLk2_RMLai2PlKCGzqON-VS6inMnawWrTn_bC1QX0WwZQDaBEstGn9RSYsGI1otK-8TzOVxe1MGgBSUs5FhA0GrrTGfrMi4nceyVH8GSWRqbWo8wJ6nAAO_7GxygnL9lBIYjKqr9aB8axWR6Xm2Mf2R0Lr2RZEOYXfbTnTfkolhA_uaS3Uw1bXY5Hm6MHK9OJRLuX5BrsHnjXOFPx_8xFaf_gLg68fvIDriyDHawzZ56lGUq66hNKfg7iaAv_VzrZ1hAVS9bJndb2CwI9VVAI-ym07t8wl_ntm7uKMOGV3w99ZchVkjHpVS96HC_eZkaY4OZuStAjdGKJBbQ73bbzCSe81hATNhDCgM9X5jHtFg6YnsAFFpp5ZJezCgeXZD3YiysC0hpJsh_1l1UfW5rsm8_TZvBuiZiGKzKhCqwedKd0-I1eFhAl3xLIPHJqmxdXuWhHREBC_Ta07PWNKTuHK9pmtkwWQyCBY2ARCXHcKeySWwtHqHKL7lNniY9Iemjt2pSFXoG5asAWCB2vJrzGoVp3Ii_AZNW2VEr40le47pR4_ErdfplU5pZNgFYICAs3EZouvMRSVjFrc-TnCmipatNJxAT1SCnOgNg6gyEAlggQcd8Bxv9WBwhiyacXBXlSdPPKXSQBHgE0f-wtCO9A9EDWCAmHEkDyN2ujibnlYCOPsSwpIj8t-wXM6GdWDJO_JtmQwRYIBYSm6cuP7Dr6qpSLSiO65Ww1gwU14ChpT6lyXgggG1_BVggYydGjPMFFCGTw0t2lvN812w7vhmd5ZuzSabJs8G142MGWCDb90PRFXhIQFw5XX5xiPU9sgZbxoJUHL605_KyL7rB5QdYII7-5Nvaff_rHb4Ragh4OvTCSdvl0EuSQzZebHtYrSWKCFggO6MeNRE80qLChtG7uEkvCilqvVlyt7Yih8J4x0rENnQJWCAQjYqxeWsPByf67tssv0BYbdidxgaLicJPMuVJXba7cwpYIM5zfckoXX_WwjVN2EwUox4Ckkimqn5L1KVBEJzPQBF6hBITFRY\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-05-26T05:05:58Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:05:58Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAR4ln-Fa3Dz6li4sjpAproNOBhBMp4hAD3Lqk4cHhE-gFm-VsFYsywGhh6RoBTOaP0VrUSRQrFb2CCQ8ZJB11PVgjgCQCaq7onVFbVlK2QPs2CylpsoshAcH5neCV-xtQgNZVlJqYIlhAUXCq5HSBSDgxp30eHI4StSEq8cqMroeM4IR967ZnbmEiLoe1lB7zQ5fMOGQaHE7aQdDbS7wc4ohJaT_2gsF2qlhA3Sdk-8DsoLYHhuCirNPqzRqN4fCcxrnK5rJiioLI3Bs9Vc3TBeaCKwSj2M6xu4ngU7klvqe40ns6qxGCzVU2xFhA7jfQe8t1aVx3d9spo2NTLck_vp4OS4vpek1GUO7_-tne05PzswA1RpvRT2B5Sys67hKk0fkbE_YYbDaz8-Xn1FhAVTafZ1N7VtobG3OB1mcfgbEjHLWOpWZVVqA_3ugQuSCO5XFSFQFGrlpItdOmfNqRWqfqnIA6fbdthSK15r0DZ1hAofn-Nu2h2EsNbtzkc_5tZszAOw1ZYr2yifUy_nJZJX9y4A7dxx249XWZhTGE2o3x5jZDp5PMrXCfnYM161bhblhAEuHDiEZVHBChc4Ifa64_GfOCGW0LycdpNq9CTmo40zAWJlmdCA883m4-M8DYZNspCVI7H40Nbso_r-3iq8ngPFhAv82SFxj2tG7f4_nW4bOenyqI2JK7EJqMGvIrRH1f0jn6lfaf1uTwcL99y-qAENTDIT28i1VVVU6GfJv5YqfJ51hAnR-6Ylc6Pq_9jZ2bhTG2lhTA3w9yvUl6ORcVerlHNVndvhgHZl5gZ4GZPaixJYgGMDxwBVPNED5S1NgXCB4WalhAQ0wusTx6PFDtIO_6QHUXyBIep2DWWHeeMbuoU-nGhqZo5mLM166jgAmSQUIchZ8nsxL0ZjylcBtbHa0LfEJKLVhA78J4E_sUKjLEmBRk61zbaVMgF_NJHy-wSZYvLMHrtVKXfiS5bm9rC1oEAM1u87axgZY7rYx2Xs2w1XGACQKqWlhAok_HpwgwB9alvys5YpiP3HgCQQjCRaSb5BqzYe7e4NaDZDElYV5haLYCz9gHy8dZRiahpXPXvhfYc9aTkPah3lhAI8ZwOEyxMKwZlQ04aF1rIOlhyRIzlMlbR5vqhSa9DX85SXzmE3wIKCmKWq0K2lWZDNAAj6mMusfrgpnjVbpCvVhADGvbY_9gKsmY76WJgVLD8c2vlFcaceETVEe9okbNuiHUaMtixQQwXoBDkjRJk943jmaTMzH6bsUJ9NZYKBJk_1hAFGtZUACh93Huk5xxbuPHvRhR0HamuT6nsAkebFWHocnFYIG5IvcHrRVrVhliYM4DAjKnnUDQPCevCRp73zNCE1hA7fEJsAJLal8ncPyc1RFRiHw2x5cooTdX5rOzRCLeuPxjMoEe7P4lc1-I2yc9QWH5hrMQdkwkJBBMjP4tpbp9G1hA34F4KBRO872Nw8dfoNss5Q1UELa-tg5nU855j6ta401cLq1emnkx7rLblRIWP1_wHtw2qmHRo2e7O0bH93f8BVhA-rybcP3RBHIjhBQBCeufSaZQQnsuv83yMnlgCQ1DQXz6fN9P1Vk88jiIGnepEId90wSBCf9BDIIQ_63vuAW6DVhA--oMpMk666W0hcpIFrwY5eCXunpFTcbLVZZ00px8MFs7U_rbod0kzo_A6v-zsnbae-yoUQGFRPMaThSubLk2qFhAxQPc4BbSOhiosvQ7nOqpeo5oZWaCRR3_4uiiD6i9x-kJWxz7DvmATIHfzkctfUeEx92QeEAgcoYgWppMdi9pgVhACbfT9hqj0LiPpiM8sr6t_H1jBzYqpcWbtXaB75SQyfRcEWxxsWM1pnDS80ZuRTH4IpV6Eyr3CmjKFaT9To1bx1hA-nJcQk2ADFghyX7ab2i6T3IFx7FYx5a9hxzbrHPBxgQck9ukq73L7xSQa-eyeHM-iC48eEcQ7YIkcam6zeLzO1hA0tIhbJ94_R_O5uFnEJLJ-Ip2pZr0ZDaILvGjBiSyPOurrek62twEofbK5LpcItbPCJ2otSssHKA-XS_yvyuBNFhA_82FRBidVq0irpbwuP-kOeTZf48XhzwYJUUStHJLbK3iQlWNwKeWxVQkBt2pVkpB32odJa5MXqmRKMDdTQLYQFhA-T1hXnHI1ciKnR0HZe--kcICOXAJmAyckoQl6xfv6ZxsElSml7nwC3e5FmojHjeK-qX4juKzK-_C3E_MfK-JyVhA3mPoC0CMWw61iSJ1j2Ygot50W68HzOr7Afn7WglEibA4kVHB_vHpBTHVx8M3e79wpoILiwVEtt8Raqu8X19OMlhA75HVhxkaU0yoLoIQJOjffzVs5KIIuARtQMqYAXvWjLK9UDX-srKntrP63eNtPEWT-iwQCwaFPNN-syHihbNQLlhAeaKU2blvPMEbmYbaNQ3kFHpL8HC46g9kqIjgAIzKd6GBrkSEe1i-UJJlvW_KpwMN6d27QN1ynTf19j8WKm4UX1hAVyCBjrpKUCc-OGtCIybj7i7T5xlev7KgUzVfHt_02Zp4D8dG1zjvNPCOospCx7pGVrTSIRSFKjI-XoljIaaFEFhA-g0UOLk2_RMLai2PlKCGzqON-VS6inMnawWrTn_bC1QX0WwZQDaBEstGn9RSYsGI1otK-8TzOVxe1MGgBSUs5FhA0GrrTGfrMi4nceyVH8GSWRqbWo8wJ6nAAO_7GxygnL9lBIYjKqr9aB8axWR6Xm2Mf2R0Lr2RZEOYXfbTnTfkolhA_uaS3Uw1bXY5Hm6MHK9OJRLuX5BrsHnjXOFPx_8xFaf_gLg68fvIDriyDHawzZ56lGUq66hNKfg7iaAv_VzrZ1hAVS9bJndb2CwI9VVAI-ym07t8wl_ntm7uKMOGV3w99ZchVkjHpVS96HC_eZkaY4OZuStAjdGKJBbQ73bbzCSe81hATNhDCgM9X5jHtFg6YnsAFFpp5ZJezCgeXZD3YiysC0hpJsh_1l1UfW5rsm8_TZvBuiZiGKzKhCqwedKd0-I1eFhAl3xLIPHJqmxdXuWhHREBC_Ta07PWNKTuHK9pmtkwWQyCBY2ARCXHcKeySWwtHqHKL7lNniY9Iemjt2pSFXoG5asAWCB2vJrzGoVp3Ii_AZNW2VEr40le47pR4_ErdfplU5pZNgFYICAs3EZouvMRSVjFrc-TnCmipatNJxAT1SCnOgNg6gyEAlggQcd8Bxv9WBwhiyacXBXlSdPPKXSQBHgE0f-wtCO9A9EDWCAmHEkDyN2ujibnlYCOPsSwpIj8t-wXM6GdWDJO_JtmQwRYIBYSm6cuP7Dr6qpSLSiO65Ww1gwU14ChpT6lyXgggG1_BVggYydGjPMFFCGTw0t2lvN812w7vhmd5ZuzSabJs8G142MGWCDb90PRFXhIQFw5XX5xiPU9sgZbxoJUHL605_KyL7rB5QdYII7-5Nvaff_rHb4Ragh4OvTCSdvl0EuSQzZebHtYrSWKCFggO6MeNRE80qLChtG7uEkvCilqvVlyt7Yih8J4x0rENnQJWCAQjYqxeWsPByf67tssv0BYbdidxgaLicJPMuVJXba7cwpYIM5zfckoXX_WwjVN2EwUox4Ckkimqn5L1KVBEJzPQBF6hBITFRY"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:13a8159b-8f17-4b6f-8362-b9c4217b8d1e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:a8081e09-dd69-44be-9f8e-3c9b188505e0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 583,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:163a0f1f-7e8b-4d15-b877-c7fa93a006cb",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23251,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2887,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:f05e2365-061b-4026-9d6e-212d7000b5af",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:5a245d8d-24d9-4f97-ad2d-50582cc1870a",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 463,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:3095b140-1886-4488-9598-030f2eb9be24",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26138,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:2f7925f3-eef9-4b2a-b58b-37a1f122bf7b",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:4a2df18b-a595-4b4b-af03-57bce18f6d4e",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:0bd2b159-7a97-49e4-9c7e-a11ab716a29b",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:d1d4d3ab-7a38-4de4-9b5d-4864578cd133",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:8dcad2c1-ae07-44f5-9d23-3e72d9beb5c8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30508,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:e742a3b3-ddff-4b25-b1c1-baa289e93733",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:0bad39ec-7b28-4645-863f-171fb3604d8a",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:eff5eb98-8030-49b0-ba2b-5b34c01ae0ae",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "KRmcRUdgy1P_ElcJXy3jE",
              "ctx": null,
              "_testId": "urn:uuid:b1e596d2-1265-43b6-af23-3bb1f5ad1b59",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "lUdb7RxDMlXsdDCApr6y9",
              "ctx": null,
              "_testId": "urn:uuid:da6f1a96-a425-406b-9094-b0544add12fd",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "9QX9ExZ78AIARmhCGoJ2n",
              "ctx": null,
              "_testId": "urn:uuid:c42a9fb7-6266-4e16-8fcd-ddf7f9e48ecb",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers 2.0)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:210f4f0b-2aaf-4935-a996-1074d154ed8e",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:a0980b49-089a-4d53-a882-b40ac8367c38",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 496,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:48e9fd7b-afa6-48c9-9bd4-74736ea06577",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 619,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:6cc8a927-44db-4087-8f21-c09ce189f660",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32254,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 285,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:06:08Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAR8YRtxq56wilIlVRMU4vJDXJ5q_oquNKkxjbG8dsrLEipsYwPR3Zedz0tHX8P20B_szn9eMw4B6kpHDPgP9Hv1gjgCQCQ9fyJgHE9M9l_rGxT_C6tnXjOu3eXT1BUdplnk693wuYN1hAyEYCphLEeREleE6Ey_DGWpGEFbf-uQDo2nsPhPSrjm_vOTWnHmvl8YslgJY5Bq9SPHf3Zm-noN5wZWCV5SLLGlhA1JpsS9N64z-0TXLA6pYbQAICJGaUrPP2jtVMztWBJOEFYvcCDnYdAKQeV5L00Bo2vIiLbkNaPF4miRqi08b08FhApzeBrgZU19TLtbMi9LAVbf48elFHrlAHUGYmbSIEN7DX4Jc4F3iVtB-dwUrBiOH1TwG53aNwCwr69_djjwuxnVhAKgsGaC56g-8p-fDgkX3AqC5q_GOyXDE_jNRhfeT0LuN6crOvZrxrWJsrEeT7v5dVX5eXJMF2EzHcQj6zfU_uOFhAbQNTndrNRBYPMoa2SXWJgMM5F01LNwDjsdPiVcGjBpdcp6ymuEGpbuqOpZORu_62iJmBVTXK4CUiPpsakMZWbVhA8qfLT-y8wa33zh15NEBAzmv0x7OvTZ8qbG_O3L630g9OaJPM0NJhecrKBIPS2yhhyAJyQWO7Rdv1MQMcFHvXIVhAGgE6FnNW9mSIucO2kGZx1dvgfwX4OdtrUdDbP6qPoVUtHubu4_t4yWb7k318IywhheZrrYAOCyNT2an9N8ZdA1hAifHAriTxaBMIkVqmMJ0nUaRbP_XPJ4Rt5np25sXdF47rjk4YDk7tPDAfw2WMEXUOoSDIWG9Y5nAHOkQXuW0dc1hAmDXWPoymUTCQXf7cMaicj2JIalRGZ9bwYk0P0a4MkqsAmDbmMhPBnrIKJ5swyTF34_GZxuk01BAJ-iXtb7Y4q1hAroxT8GNoTrQbiJcbxRMKgq-eJKXQlHBgWcZzygiWxgM4fiImEd9UB2R9Wcjj1aAaFEcN0QMTXNaPcwnBxrMRDFhACDlWqkJsT5yaBVtlwVQoziGCQDR6UlLj1ikrnqClK2Rn3Kuyd6p79OIAI_fDkTHPAQFAYk2FQ8NWyIuzbqZOO1hA2B73EOoi_2TNOrNB6APFBbmuheQtTtLlZUJV2P6qAIDbMJhnzv5tvffssX_xYU4BnTxwEQZ6cTKddWMU8-0GeFhAUOKha6ptXAAp2lFVNzgqFNd04eQsonbkrrQAhh8hVk7_wj2j52vkenCtz8hAWosGRbPhg1tUP12u3idGpG0MGVhAUL1ApPMtWv8NBORNe_MvUoJcY0K7CN_na4vjBacVGF3cRZgBPMCpwLTwOez6VJy7G-mrgKbNteaI0tF0XuPeg1hAPPPlNr5zfBpIRU6XSeP5c9KnH0P9DcuK0chk5mvbFQuPnzcSUedmp1uqm3DJ4ukkjNB-GkHyw2-oT5aSntYOxFhA-ISypua8gIJ9g_C10cskhgpjMkscqncr_NsT1N4m7iGjeKWQTSwNqsrcIquS1BmnE4JuCKd-mRiojM2zplGpmVhA2kIwNtggpn6gjoH9pugJVzpG5DhSPrGRife_dEVjzOzvVP36QCMaKoVNRe9X_-w3szX1ntfXyU_wTdsDr0TD-VhAlWZdyr2H58j9OSRmE8jFanXLcxaHOP0sxSJKHfnfkn9fYJhKyLZ_Hi3T2KEpwDwuFKXDrx1iwOKXzwe6Wk0GIFhA4sfqSkscH7UMmDr2ODlxOS-1DAvnWMGbQnfcGua6vZ99SxKab1oL6I74BUV2EmEaa1AlUo035xJhPxUGE8Iie1hAUyIgFCyiL_SUz95rvLHAEDGgLncTyY3bMhg6MUG72yDxekdNZ4-7uV8sRq70GXapiaNV6s9hOB-oE3DkmkI1rlhAW_dj_AEp1OLkTluI32tlrPAQbGZKS8-n4v6OJcsWSImgL8jgCNMVEbSYU0ozSToC6iObDpZofwSqATrJbXrVXlhACFpLUhLZo9enToYectvrvop_gLLLBrKuxwViY6acK3i6SDvfwUbsNVfrlmH9QooMzBoiM1zzLTs58PYuFKIWD1hAo8x1upGoML3g2vUWMeUeYPfGilchyzKNnoBFOv6s5bmC3kuxQvhj-mev7hIDW_zfCn21nfYu83of_qvD_p5FC1hAhbvxNLx_US3cG8YQnXsNzGxb-iM_OWmh4K1Vrp8fiy5jOQBzC1mW4gfs1jY_4Eqq5FfgFs1GuEajZ6rprUUlNVhAd3QFz4dZypaJmhTo0qulDgGU97xfd3jMPnIRpt9w5Lbf-9kzJgqrcTxrVp4ukk-Kt0nAkcTcYsgF6X_r67RNI1hAYQwm8k5wpo6g19uBwsVjG1QurtPIpTlKlDpWw1SpSEF33J37cTPYfLRu3vLgc1OFua6wqmlqCn8PLNATV_IGVlhA7Ly9ymVsNud83XaZe4_x7IfGyup9NU6QXg4ijjoaSJiXLyPIDKO-vIAsirhAUGaLoaanVM7kHOd7f__Jvqx-v1hAkdaqmKnmEz_oyf5gQ1MWhwMw21e-V-rASPxMB6vCYM6P4OOJSjeOJt3mo_BYVR7emOLHpJDqIg5b_HJlfdYNHlhAumGQQ8ZB15P_0cBcOvWzAvwEVqY9a2kKvTL9TFSSimj22Pu13xhl9NpFMLDB7iEse56-BYUeV-qQHZLvthS8sVhAFTRkYXtefkmpsMZxD-ERXmP7LCNv7oO4rcyHVsGgjS0FFA6G7bJFmx0yBP6hYxkVAwuRiPgNDnn-0ZXhuo5GLFhA6YbR8P8tKcy9ivSVU1H-dalbvoO2Qq5Z_pylzEXZfPnbtxB4K34EeWtezsQn67rlIbjQKwQNc7aeKG8a1IyMl1hApodTKXyL93l3ZRhQR1UIvTH5chNNHYncB2LXInaws1dXdYtQPZivkpB3IVzbCepKzgb81M2d2qDNxV6qUcKneFhAVoPqdg1PoVqxZD1RQp5qne4aDdCuu_sMGWImXZb_h2Q6WKknAJqQjjC2iKP_CPhvyzU_1C4oVojjBVJQGHFxElhAOPIcJXNjtK0UOiMazKvL1drhHMurSH2xolUdaJh7fdkidg26fvdT4Zewf6s4HC2j9XdcxSCmH2WVgbUnziHnNVhAteyTiXSJzMtUU_XjgIDysDQHg7uVzCzTbPRbTGKCz2uxzwLHNGIzoBEsM1wU1ZKL3a0o95uaeDQWWDw4QSSg9VhA9fCV4hZAxH0O31oLJClprw_xiwGz5ryldjdwLgxJtyxeEpY5mSB6HVTUAraZkfWZP5cnjOLB3bxJn1SYkBP6jlhA3kI_C2Czh34biwQcysnvtLnoHmPcmkDvAsbw_sv4U8vtQZ_Htl3ZNSh-7ywIHWHwrVOhjnk_xjDgfrAhIHmPglhABlHW321meoLSO5NvJU_LKHyljB1AV7PXsEyNHeGhrZBcYgBlSaW9sPQo5AaYg8RLZDvV5A42kdxSLIVhUZjAdlhA4turcssqV0ldjHZo2KmfeiZXzTWpFQ2ccHZO4lvIGhc0lfRO5eYQdHU3r3Zaqo7n2Jimbdf9w_j5ihJPkp7Iu1hAiYmEuQOU_tqLEs9iQwkQGfXdDsggQgaHXnVthz0duZrDsGu7inYjBY8UrJkOPY0hMew0RLyeU1nG0_QmBzlGMVhAQ8FjpsKaUwkeWTokF49w94sXMv1_71kw_VTQx2a7W1AsowoMIwFy9_IAbdLoYikiaHuBzn2Pf2y8Pye60nCOT1hASWWWZr24fgvqWiuLt-JrCXs-cdL00FQKMP-R9FCnodNbd4ksvZVey_8Zj7ShfNzU61rl53VgZAnZ_P-GHqfCNFhAWODuwFYFiUTgUlOK4ccRa5q-_XpYH32F8p3HYuCe2wFw4uiCkil1CGWCzCly1fKwaYHHBpzEtI69SV6TF2lSElhAgkkplzkWXu4UPnkVG6-kGJPzGgqn9D655mKoRqFMILLiNEvtim_099ArzW3hE_BvCmzjqWV0xJY529GWb6B86FhAQM8Mk4KgEmB1Z1eaabcoZ-h8HG8wtjp3jPgIAwgUI8QdFJMMSz6VrIrSQH9QDrgNjmnV5_uSwRwLkv2XfBGXglhAhZew5lYjpNPMfOWVKmQo902Cqp-0LkNREkIPS8Fpghw766IyUzsoeSDDIKcUZBoyW7BzeRi96r2aV5kssVoj1FhARPwuJL9fuJ63NwywEITat3pbrjcQNKcEZHrq10SwQeIKHLa8Y8HR86708ONbdV47t-fvRoIlOAw3DQq-GdhKYlhAtfBy00whpCASKewYEMa04sLkfEy6qj-S241QV_rH5fWjYtBemVcGj2x4lgvBkMWX1o1lUF1A6KFmUc9KiZMNgVhAiiBY6FY6nvOCjJJuVmT1182zfBoyAlhJKI_2VQFvlNBhDCbp-VwC06xrrfGbBZUthg6O7Q6kQ0aOr2ImiEJrI1hAkpKcB7TJtUZNA_sKfoVy47s4wjHzhkVrezemrZHH-c_WQCNLXRMMakugivSrJBwkXMHLPSgw4z_FAlOPpvYMa1hAueDYM7zfXDONzNhPkr3oB_1vJYZktOISmZdXFA3MFB_wkm5SOVOOqfFr5IE6kPoi2AaLx80Zdu1OxT-aZ7cwXFhA6b0LF8yr1nByQ7YsOMEBnQAnboTw1WFUcyJOE3EAkt1wD6IKVV9Oh_GR8pfEQy0Q3OB8CEh3NizhXBGeLsXiTVhARYn85kd7OPG6PmWZk6xLcdRaupL6Nn9IIWV__olQfW7ebNmTCJdQ1WgsGnVbmaGdr3KdwExpxGIVtyHfujtnAFhAFX1t9xkJ62K3cwyaT2U4t-UWBOxZ5hQHmOCg8CrutJjTpVgLevOYyQcwzgFufydPFWdXbog6bcgvvg3bR2ruTVhAwsaGd55ZARJlAUeqEL2YEW3_BbTxYlRF6Bctnsz4iZjidg2ahsuandFTTFQtYwn6jJldebwGEXc3WBxBoZngi7AAWCArycpGUtsOHiHMSK3bGNLLTlNOlpudO_B7AJU2GJwEYAFYIESCCGHwUve8Hv9n5fZU_50rZjMsjy3dRFMcpIAnP-WnAlgg5PUCAA4mgwbnvKqYd2xh82dZwd24qkBBUYYfHf70IGQDWCDVSK1Psf2qsQuuUwVAFXPV5Ah49mWBNMuBMWPRelBUDARYIBHCu_IeMW49tSXUHxWoTUxyW0PT06KE90rYf99sM1IxBVgg7wr_WtvVGHU6JYlQk9VX5jTpdwMTuq1HfOKDSa_bOW0GWCCkqxGF0z8WocF6HdP3ZGJjfuW4mmJwzTNwoLLpVOL-vAdYIPCYlRYED1lGkKlg2UfqmX9n8FrP10qexszU4JyrwvWvCFggNLS7a8sVx6eNI9cY1Lw0hBCUuNjngAvbFQrMLi4WvH4JWCDq78bm4CpCXdpnlKBaXEJrkZ3G1m4W0qOGIzYMrnm6dQpYIO_Rb_1bAqPE0E0X3xwwjEuqLFI7933xhqccG_2cWntzC1ggSzJ75aipUU0AA_b62brgGVfEuUt3Ig9pZoDWPz66BpgMWCAxM5_0wEf8PiyCc7-xHxwM5hxXGiGtyneGiSlP_8A0BQ1YIGBcN2yATwvVNEoSFkVJPop-nHDe2zdBBZDfkRW-grTFDlgg7yK8x8P-OYJaGnCL6-vGCDYrvyKthsNvQee-4_b6kr4PWCDoDn1ljHbiv61qVaUdte9-MrW2qwM1mqqeJwYGJiIgfYMYLRguGDA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:06:08Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAR8YRtxq56wilIlVRMU4vJDXJ5q_oquNKkxjbG8dsrLEipsYwPR3Zedz0tHX8P20B_szn9eMw4B6kpHDPgP9Hv1gjgCQCQ9fyJgHE9M9l_rGxT_C6tnXjOu3eXT1BUdplnk693wuYN1hAyEYCphLEeREleE6Ey_DGWpGEFbf-uQDo2nsPhPSrjm_vOTWnHmvl8YslgJY5Bq9SPHf3Zm-noN5wZWCV5SLLGlhA1JpsS9N64z-0TXLA6pYbQAICJGaUrPP2jtVMztWBJOEFYvcCDnYdAKQeV5L00Bo2vIiLbkNaPF4miRqi08b08FhApzeBrgZU19TLtbMi9LAVbf48elFHrlAHUGYmbSIEN7DX4Jc4F3iVtB-dwUrBiOH1TwG53aNwCwr69_djjwuxnVhAKgsGaC56g-8p-fDgkX3AqC5q_GOyXDE_jNRhfeT0LuN6crOvZrxrWJsrEeT7v5dVX5eXJMF2EzHcQj6zfU_uOFhAbQNTndrNRBYPMoa2SXWJgMM5F01LNwDjsdPiVcGjBpdcp6ymuEGpbuqOpZORu_62iJmBVTXK4CUiPpsakMZWbVhA8qfLT-y8wa33zh15NEBAzmv0x7OvTZ8qbG_O3L630g9OaJPM0NJhecrKBIPS2yhhyAJyQWO7Rdv1MQMcFHvXIVhAGgE6FnNW9mSIucO2kGZx1dvgfwX4OdtrUdDbP6qPoVUtHubu4_t4yWb7k318IywhheZrrYAOCyNT2an9N8ZdA1hAifHAriTxaBMIkVqmMJ0nUaRbP_XPJ4Rt5np25sXdF47rjk4YDk7tPDAfw2WMEXUOoSDIWG9Y5nAHOkQXuW0dc1hAmDXWPoymUTCQXf7cMaicj2JIalRGZ9bwYk0P0a4MkqsAmDbmMhPBnrIKJ5swyTF34_GZxuk01BAJ-iXtb7Y4q1hAroxT8GNoTrQbiJcbxRMKgq-eJKXQlHBgWcZzygiWxgM4fiImEd9UB2R9Wcjj1aAaFEcN0QMTXNaPcwnBxrMRDFhACDlWqkJsT5yaBVtlwVQoziGCQDR6UlLj1ikrnqClK2Rn3Kuyd6p79OIAI_fDkTHPAQFAYk2FQ8NWyIuzbqZOO1hA2B73EOoi_2TNOrNB6APFBbmuheQtTtLlZUJV2P6qAIDbMJhnzv5tvffssX_xYU4BnTxwEQZ6cTKddWMU8-0GeFhAUOKha6ptXAAp2lFVNzgqFNd04eQsonbkrrQAhh8hVk7_wj2j52vkenCtz8hAWosGRbPhg1tUP12u3idGpG0MGVhAUL1ApPMtWv8NBORNe_MvUoJcY0K7CN_na4vjBacVGF3cRZgBPMCpwLTwOez6VJy7G-mrgKbNteaI0tF0XuPeg1hAPPPlNr5zfBpIRU6XSeP5c9KnH0P9DcuK0chk5mvbFQuPnzcSUedmp1uqm3DJ4ukkjNB-GkHyw2-oT5aSntYOxFhA-ISypua8gIJ9g_C10cskhgpjMkscqncr_NsT1N4m7iGjeKWQTSwNqsrcIquS1BmnE4JuCKd-mRiojM2zplGpmVhA2kIwNtggpn6gjoH9pugJVzpG5DhSPrGRife_dEVjzOzvVP36QCMaKoVNRe9X_-w3szX1ntfXyU_wTdsDr0TD-VhAlWZdyr2H58j9OSRmE8jFanXLcxaHOP0sxSJKHfnfkn9fYJhKyLZ_Hi3T2KEpwDwuFKXDrx1iwOKXzwe6Wk0GIFhA4sfqSkscH7UMmDr2ODlxOS-1DAvnWMGbQnfcGua6vZ99SxKab1oL6I74BUV2EmEaa1AlUo035xJhPxUGE8Iie1hAUyIgFCyiL_SUz95rvLHAEDGgLncTyY3bMhg6MUG72yDxekdNZ4-7uV8sRq70GXapiaNV6s9hOB-oE3DkmkI1rlhAW_dj_AEp1OLkTluI32tlrPAQbGZKS8-n4v6OJcsWSImgL8jgCNMVEbSYU0ozSToC6iObDpZofwSqATrJbXrVXlhACFpLUhLZo9enToYectvrvop_gLLLBrKuxwViY6acK3i6SDvfwUbsNVfrlmH9QooMzBoiM1zzLTs58PYuFKIWD1hAo8x1upGoML3g2vUWMeUeYPfGilchyzKNnoBFOv6s5bmC3kuxQvhj-mev7hIDW_zfCn21nfYu83of_qvD_p5FC1hAhbvxNLx_US3cG8YQnXsNzGxb-iM_OWmh4K1Vrp8fiy5jOQBzC1mW4gfs1jY_4Eqq5FfgFs1GuEajZ6rprUUlNVhAd3QFz4dZypaJmhTo0qulDgGU97xfd3jMPnIRpt9w5Lbf-9kzJgqrcTxrVp4ukk-Kt0nAkcTcYsgF6X_r67RNI1hAYQwm8k5wpo6g19uBwsVjG1QurtPIpTlKlDpWw1SpSEF33J37cTPYfLRu3vLgc1OFua6wqmlqCn8PLNATV_IGVlhA7Ly9ymVsNud83XaZe4_x7IfGyup9NU6QXg4ijjoaSJiXLyPIDKO-vIAsirhAUGaLoaanVM7kHOd7f__Jvqx-v1hAkdaqmKnmEz_oyf5gQ1MWhwMw21e-V-rASPxMB6vCYM6P4OOJSjeOJt3mo_BYVR7emOLHpJDqIg5b_HJlfdYNHlhAumGQQ8ZB15P_0cBcOvWzAvwEVqY9a2kKvTL9TFSSimj22Pu13xhl9NpFMLDB7iEse56-BYUeV-qQHZLvthS8sVhAFTRkYXtefkmpsMZxD-ERXmP7LCNv7oO4rcyHVsGgjS0FFA6G7bJFmx0yBP6hYxkVAwuRiPgNDnn-0ZXhuo5GLFhA6YbR8P8tKcy9ivSVU1H-dalbvoO2Qq5Z_pylzEXZfPnbtxB4K34EeWtezsQn67rlIbjQKwQNc7aeKG8a1IyMl1hApodTKXyL93l3ZRhQR1UIvTH5chNNHYncB2LXInaws1dXdYtQPZivkpB3IVzbCepKzgb81M2d2qDNxV6qUcKneFhAVoPqdg1PoVqxZD1RQp5qne4aDdCuu_sMGWImXZb_h2Q6WKknAJqQjjC2iKP_CPhvyzU_1C4oVojjBVJQGHFxElhAOPIcJXNjtK0UOiMazKvL1drhHMurSH2xolUdaJh7fdkidg26fvdT4Zewf6s4HC2j9XdcxSCmH2WVgbUnziHnNVhAteyTiXSJzMtUU_XjgIDysDQHg7uVzCzTbPRbTGKCz2uxzwLHNGIzoBEsM1wU1ZKL3a0o95uaeDQWWDw4QSSg9VhA9fCV4hZAxH0O31oLJClprw_xiwGz5ryldjdwLgxJtyxeEpY5mSB6HVTUAraZkfWZP5cnjOLB3bxJn1SYkBP6jlhA3kI_C2Czh34biwQcysnvtLnoHmPcmkDvAsbw_sv4U8vtQZ_Htl3ZNSh-7ywIHWHwrVOhjnk_xjDgfrAhIHmPglhABlHW321meoLSO5NvJU_LKHyljB1AV7PXsEyNHeGhrZBcYgBlSaW9sPQo5AaYg8RLZDvV5A42kdxSLIVhUZjAdlhA4turcssqV0ldjHZo2KmfeiZXzTWpFQ2ccHZO4lvIGhc0lfRO5eYQdHU3r3Zaqo7n2Jimbdf9w_j5ihJPkp7Iu1hAiYmEuQOU_tqLEs9iQwkQGfXdDsggQgaHXnVthz0duZrDsGu7inYjBY8UrJkOPY0hMew0RLyeU1nG0_QmBzlGMVhAQ8FjpsKaUwkeWTokF49w94sXMv1_71kw_VTQx2a7W1AsowoMIwFy9_IAbdLoYikiaHuBzn2Pf2y8Pye60nCOT1hASWWWZr24fgvqWiuLt-JrCXs-cdL00FQKMP-R9FCnodNbd4ksvZVey_8Zj7ShfNzU61rl53VgZAnZ_P-GHqfCNFhAWODuwFYFiUTgUlOK4ccRa5q-_XpYH32F8p3HYuCe2wFw4uiCkil1CGWCzCly1fKwaYHHBpzEtI69SV6TF2lSElhAgkkplzkWXu4UPnkVG6-kGJPzGgqn9D655mKoRqFMILLiNEvtim_099ArzW3hE_BvCmzjqWV0xJY529GWb6B86FhAQM8Mk4KgEmB1Z1eaabcoZ-h8HG8wtjp3jPgIAwgUI8QdFJMMSz6VrIrSQH9QDrgNjmnV5_uSwRwLkv2XfBGXglhAhZew5lYjpNPMfOWVKmQo902Cqp-0LkNREkIPS8Fpghw766IyUzsoeSDDIKcUZBoyW7BzeRi96r2aV5kssVoj1FhARPwuJL9fuJ63NwywEITat3pbrjcQNKcEZHrq10SwQeIKHLa8Y8HR86708ONbdV47t-fvRoIlOAw3DQq-GdhKYlhAtfBy00whpCASKewYEMa04sLkfEy6qj-S241QV_rH5fWjYtBemVcGj2x4lgvBkMWX1o1lUF1A6KFmUc9KiZMNgVhAiiBY6FY6nvOCjJJuVmT1182zfBoyAlhJKI_2VQFvlNBhDCbp-VwC06xrrfGbBZUthg6O7Q6kQ0aOr2ImiEJrI1hAkpKcB7TJtUZNA_sKfoVy47s4wjHzhkVrezemrZHH-c_WQCNLXRMMakugivSrJBwkXMHLPSgw4z_FAlOPpvYMa1hAueDYM7zfXDONzNhPkr3oB_1vJYZktOISmZdXFA3MFB_wkm5SOVOOqfFr5IE6kPoi2AaLx80Zdu1OxT-aZ7cwXFhA6b0LF8yr1nByQ7YsOMEBnQAnboTw1WFUcyJOE3EAkt1wD6IKVV9Oh_GR8pfEQy0Q3OB8CEh3NizhXBGeLsXiTVhARYn85kd7OPG6PmWZk6xLcdRaupL6Nn9IIWV__olQfW7ebNmTCJdQ1WgsGnVbmaGdr3KdwExpxGIVtyHfujtnAFhAFX1t9xkJ62K3cwyaT2U4t-UWBOxZ5hQHmOCg8CrutJjTpVgLevOYyQcwzgFufydPFWdXbog6bcgvvg3bR2ruTVhAwsaGd55ZARJlAUeqEL2YEW3_BbTxYlRF6Bctnsz4iZjidg2ahsuandFTTFQtYwn6jJldebwGEXc3WBxBoZngi7AAWCArycpGUtsOHiHMSK3bGNLLTlNOlpudO_B7AJU2GJwEYAFYIESCCGHwUve8Hv9n5fZU_50rZjMsjy3dRFMcpIAnP-WnAlgg5PUCAA4mgwbnvKqYd2xh82dZwd24qkBBUYYfHf70IGQDWCDVSK1Psf2qsQuuUwVAFXPV5Ah49mWBNMuBMWPRelBUDARYIBHCu_IeMW49tSXUHxWoTUxyW0PT06KE90rYf99sM1IxBVgg7wr_WtvVGHU6JYlQk9VX5jTpdwMTuq1HfOKDSa_bOW0GWCCkqxGF0z8WocF6HdP3ZGJjfuW4mmJwzTNwoLLpVOL-vAdYIPCYlRYED1lGkKlg2UfqmX9n8FrP10qexszU4JyrwvWvCFggNLS7a8sVx6eNI9cY1Lw0hBCUuNjngAvbFQrMLi4WvH4JWCDq78bm4CpCXdpnlKBaXEJrkZ3G1m4W0qOGIzYMrnm6dQpYIO_Rb_1bAqPE0E0X3xwwjEuqLFI7933xhqccG_2cWntzC1ggSzJ75aipUU0AA_b62brgGVfEuUt3Ig9pZoDWPz66BpgMWCAxM5_0wEf8PiyCc7-xHxwM5hxXGiGtyneGiSlP_8A0BQ1YIGBcN2yATwvVNEoSFkVJPop-nHDe2zdBBZDfkRW-grTFDlgg7yK8x8P-OYJaGnCL6-vGCDYrvyKthsNvQee-4_b6kr4PWCDoDn1ljHbiv61qVaUdte9-MrW2qwM1mqqeJwYGJiIgfYMYLRguGDA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:5b365e2f-a0e6-47ae-8c25-53b029b42dad",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:06:08Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhA5c_p9R6rPcfqNabmZxS-F8CcfHjFPNN_ilh3pXNAmsxMBr2EhY4p1N5-KcxdP3zG1Sit-QrvXZyrHqsHZf2Jh1gjgCQDUaX0mB6lWFhEqo2DkPC9GZhh_JkfOh-as_0bWGM-UM6YIlhA9USyglUp_yKHFKLlbeiU5Jsdkd-lF0xAs4UXkP8pjsEv65gpDNU33a2l6Yi_P4Wr7JzTKWmG9In3v7vUyyB4OVhALnid3vuovRgTG8NYLQE42m-w814Wdns1JIF0DPCd1vdX3rVW9MPQXciyOPU2n8lJmL8zJCQ1KZIaZAyFbyStTlhAB1BxX--_sk1tLzw5ejvyg74Jxo01GtV_xDlE6LOQBRZ86yNriWW38gSi0jvBA3eo-Fn_UlM6294srtZK5l5uF1hAzRasNO8PBOCbHXs_qrX_sQCR2335bRYM43qrZW2lFCAPhXEs6UwCVn4zPLflVJIqMYDE9aZWXwDxfpYUy1QfXVhAg0n0J7eX_dxLzVqp1GNGCL5p45LGTJbqH5JVRHoh-0Uba4YSaxbvo8K0-kGgz31S3d-ISWlula87ZBChXz8PSVhAGNwLobhRp3iUYNMSU8CsLAHKFGxgwv3UGwf0BgfQkNLPk1w01134U3yxmai6G6BGk7azoxLeuQCE9nb4UFPO1lhAl1inXm-ILS-0g5wSu-m9EIBgT8UOFOCowFC0LkYpGdgeWche_n-aBBQtxzGOUGlQl71SETRWDD2FFKlsk-jlOFhAbKYHOkTRgV_AnaAwzss1YLnCCBScAou45OroL7qSvjklTRstXn4oLkEGpB-S3XgC1KYKzqpZyTj-8gRU_Wllz1hABP-X4p26CZEtAoB6UdFfe_OQ0GTDUVMfIH9rvPmfJrMrY9fX0fP-mPUGmAsNlXzn-lnHruTwi1kA7JbsY_azyFhAD89zF1RFNW2jzy-nb8xqgkTZMFsw1mMZAEudbLUuhZsgiDj48KrFd7zdyK1KfsJ9NJe103PhdYr8sptQTnpePVhAJBBBbnNNj6pz3VakjfKAjco5IbDzUEKL5y2uMFq9EQLW8ZkLSAhr9oLCKzzgNZPOcIysuVR_QV4T__xeR6HT-VhA-LvSndYMnEHKzRBWR6VBL3MEnx-SeGUZVDM5lbSgP3HmTkNAaYZkPUMjgNhyO8hFEHaBMS7bue55ymoq9SLJclhA_GhzNj4P8TM52-AUU1odaDW4IFa7I30KavNmQd3c4aT0IuUiOr3VC5_YaHAeGZXuMUljy52cDky-_ivdICf4DFhAt0CkOrcbmepBHtxXPOjNz1772L0neVe3rBY117dstu75lYMnV53fsZosSE5-EqjvhU7Juf7Hq_R0IP3Vk8YF8VhAbXZdzavYQ95uKCvK-LyyvT91IL_jmehVzBXwCsb-f-QIs6MmP5obKFvHcF6YxkMZR24K-qb5JyL4-4-xQle4uFhANM1DN2pvGFB33zrkJoFMcHfQ2jtCx_zkGzRcss06vwhQy1SkAFxljjjjcn8Sr0oJTLicuzKmOiCMabyVzEsI6FhAyBPvlw8MAUuTeEgYnC6nNbYmDnbmogQF9J1u69lsJGAgyE0NgThuMrJKEccmlo35eJinGDVkkDBrASBZzCK5dVhAz6d6sqqGg1fe1m6MbSY0cfixKKegc3qhUtY4GsVRd0tcvA6AMCyg6ZkwH_7b_3aM2koP4E4WDVR-tWVAUDExE1hA4CiwMkay9FARv_QZe__3rAvLHQkJvrCWGvbys7nxlipVFOOxx3rqJGtsFiAjFbizAD8fayAnjBLSMdY4HS0y6FhAf7dPIkZ63yr1vO8fs5WAjW_8bfG2-x_NrQyu-mcpVa2u3fOfbGOg7IZkI7a9E3YUha7ayeRPIMUQV20RvZ6A1lhAlcBHnwN4xNYAIgQXYsNlwMzmZSwe5XP4rFvJUA-pa1wbWT25fjeCh40y749UfsMoIp4p-Gka7S1wxmW1_jBUZlhAHO0oDww8Y0GqSlflnTMf8mTpsNbWvwgu8mAtspOM9EWt4LeGOGayikT5vd1M4Sav2LSz5bHmrTLih4qD57sdFlhAJr4HgG7069ca5Z41RM1h0mYvFpT7gf5PLyCCQsCCrh9mOeyqfgyThhPi2joSBStnZgMJlJfRvLp9HSkv7D4hUVhA5KzSMKDMuQSMy-rOlPi5Q_grQg1Lt9IohOTEmLrwsZRYEXFBmChfQ5hjZ8X7lZtzU3kxIGZg6nQ3L5GQrHKVt1hA6sS2ehrqglNqEnkgl_gGSY9k4cNfvckHx3d0TeASxGlDKtmmf3E1IzqsgDNiyX6-mYIL7GEXsYtzBVpdsA1ft1hAG5tdn2wxGf5pXQZQtfWUjWI_Fc_kMFvpf0BvQvqEZ-Ubfl--TMAnfxofDN3DwGgnuW-WnNBl0fzhf4RuJFEG7VhAUt5pJ7kDpjckgLCOvZu6NOWIFod9tSsdo5zrbytp-suekZh6AgagwWdeBnwv_venw3ls3dyBCZiJ4fSyetcsH1hAeedoLHt3W4C4A_MtQcBpvDCA1Qu9c0Wkl-4LZZ1JLVbktK0LdemloIdivBx_QUXxgi4bQ1AauyJKU_8xWIfi0VhA8bnc8v37Svihshrm8tAfE2BBEYNQDt23SKniyhgKxXVqduYYyaIXaga--Tk8MDSzgLdmR77Bhnny8KZW6sSdsFhANO4Skq9lABzzFrtjbAtotIUDxbCMulLxvaQdkVF3QRju7ahz1VswlaYJGV2dsAEvUdhMdyBt0ubh7MgExdh4I1hA2qlE1UI9e7S6evXLr3PTzuQx5Mt4AWBEsch27V8KR9YNrkmtpADEcbff1pQeAvFfM1-s8wXcfbtPRe043mtzPFhAzx3yYM_PZbnvdGQAOgFIEfZLO4lyxaaKDwS2aR0em8NMGN7LWyWn3xmmYLil5z7SU2ERPgifIAlNN7Cv3T8iRlhAcprnh6oz7TZ4f-xDguwgmu7MJcfmN1UNnazdYFNhidX2qTeOwFEe6cJmBPKit_hEiMZl0CBmOM_EXk-RbnqLpFhAvwVxP_Hv5nlna48DR5kBEQPh19k1PyfRPiexGLBoXFBJoylAqp7e5M8h1Kay2dAiUKcNN-jpddPhVKS9scoza6sAWCAsJtxR5RZgKspuEKvh6QgNzIWrNJJ7m75SblUNoZ8qPAFYIAxqjDXXX-Yk0kXKApEhS7yTonIdeebkD_ijAcxm316qAlggum4SaZVHDnDIIly8sEED6h90LwIWKO9kPIFrzjsRypMDWCCkTP3vCS-m1pZA5jkQpKNRrKuvdPfLWHLZaazxvyr7rgRYIIPQTC7H2J5z-cMeEQqSY5rE4UP3i4f7xv3CNaBaPRWFBVggvd7G8Ml2jAIfD36up16CwVYE9Q7Cjnqz_KF5sONzNs8GWCDWhB4e1VcLdB3caKqUFmS7AUvwkEI88xjelZpufZKJSAdYIMsYIKiwWCoUkCmat94abRbkCgWjDMJCtfpV0BcIt0F7CFggx9AQB_iJ8vYPUAm5KXsDqOytGeSsWN4SEtNRRKvKSlkJWCAQMt4bzVbeZrzVNPYarbNWoFARAOeYM-7zqaJu7_2XhwpYIG3xg1Jf2Yz4_EXJDnAo3NM_KC5OMWqlPTRZ_86QFal-gwkKDA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:06:08Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhA5c_p9R6rPcfqNabmZxS-F8CcfHjFPNN_ilh3pXNAmsxMBr2EhY4p1N5-KcxdP3zG1Sit-QrvXZyrHqsHZf2Jh1gjgCQDUaX0mB6lWFhEqo2DkPC9GZhh_JkfOh-as_0bWGM-UM6YIlhA9USyglUp_yKHFKLlbeiU5Jsdkd-lF0xAs4UXkP8pjsEv65gpDNU33a2l6Yi_P4Wr7JzTKWmG9In3v7vUyyB4OVhALnid3vuovRgTG8NYLQE42m-w814Wdns1JIF0DPCd1vdX3rVW9MPQXciyOPU2n8lJmL8zJCQ1KZIaZAyFbyStTlhAB1BxX--_sk1tLzw5ejvyg74Jxo01GtV_xDlE6LOQBRZ86yNriWW38gSi0jvBA3eo-Fn_UlM6294srtZK5l5uF1hAzRasNO8PBOCbHXs_qrX_sQCR2335bRYM43qrZW2lFCAPhXEs6UwCVn4zPLflVJIqMYDE9aZWXwDxfpYUy1QfXVhAg0n0J7eX_dxLzVqp1GNGCL5p45LGTJbqH5JVRHoh-0Uba4YSaxbvo8K0-kGgz31S3d-ISWlula87ZBChXz8PSVhAGNwLobhRp3iUYNMSU8CsLAHKFGxgwv3UGwf0BgfQkNLPk1w01134U3yxmai6G6BGk7azoxLeuQCE9nb4UFPO1lhAl1inXm-ILS-0g5wSu-m9EIBgT8UOFOCowFC0LkYpGdgeWche_n-aBBQtxzGOUGlQl71SETRWDD2FFKlsk-jlOFhAbKYHOkTRgV_AnaAwzss1YLnCCBScAou45OroL7qSvjklTRstXn4oLkEGpB-S3XgC1KYKzqpZyTj-8gRU_Wllz1hABP-X4p26CZEtAoB6UdFfe_OQ0GTDUVMfIH9rvPmfJrMrY9fX0fP-mPUGmAsNlXzn-lnHruTwi1kA7JbsY_azyFhAD89zF1RFNW2jzy-nb8xqgkTZMFsw1mMZAEudbLUuhZsgiDj48KrFd7zdyK1KfsJ9NJe103PhdYr8sptQTnpePVhAJBBBbnNNj6pz3VakjfKAjco5IbDzUEKL5y2uMFq9EQLW8ZkLSAhr9oLCKzzgNZPOcIysuVR_QV4T__xeR6HT-VhA-LvSndYMnEHKzRBWR6VBL3MEnx-SeGUZVDM5lbSgP3HmTkNAaYZkPUMjgNhyO8hFEHaBMS7bue55ymoq9SLJclhA_GhzNj4P8TM52-AUU1odaDW4IFa7I30KavNmQd3c4aT0IuUiOr3VC5_YaHAeGZXuMUljy52cDky-_ivdICf4DFhAt0CkOrcbmepBHtxXPOjNz1772L0neVe3rBY117dstu75lYMnV53fsZosSE5-EqjvhU7Juf7Hq_R0IP3Vk8YF8VhAbXZdzavYQ95uKCvK-LyyvT91IL_jmehVzBXwCsb-f-QIs6MmP5obKFvHcF6YxkMZR24K-qb5JyL4-4-xQle4uFhANM1DN2pvGFB33zrkJoFMcHfQ2jtCx_zkGzRcss06vwhQy1SkAFxljjjjcn8Sr0oJTLicuzKmOiCMabyVzEsI6FhAyBPvlw8MAUuTeEgYnC6nNbYmDnbmogQF9J1u69lsJGAgyE0NgThuMrJKEccmlo35eJinGDVkkDBrASBZzCK5dVhAz6d6sqqGg1fe1m6MbSY0cfixKKegc3qhUtY4GsVRd0tcvA6AMCyg6ZkwH_7b_3aM2koP4E4WDVR-tWVAUDExE1hA4CiwMkay9FARv_QZe__3rAvLHQkJvrCWGvbys7nxlipVFOOxx3rqJGtsFiAjFbizAD8fayAnjBLSMdY4HS0y6FhAf7dPIkZ63yr1vO8fs5WAjW_8bfG2-x_NrQyu-mcpVa2u3fOfbGOg7IZkI7a9E3YUha7ayeRPIMUQV20RvZ6A1lhAlcBHnwN4xNYAIgQXYsNlwMzmZSwe5XP4rFvJUA-pa1wbWT25fjeCh40y749UfsMoIp4p-Gka7S1wxmW1_jBUZlhAHO0oDww8Y0GqSlflnTMf8mTpsNbWvwgu8mAtspOM9EWt4LeGOGayikT5vd1M4Sav2LSz5bHmrTLih4qD57sdFlhAJr4HgG7069ca5Z41RM1h0mYvFpT7gf5PLyCCQsCCrh9mOeyqfgyThhPi2joSBStnZgMJlJfRvLp9HSkv7D4hUVhA5KzSMKDMuQSMy-rOlPi5Q_grQg1Lt9IohOTEmLrwsZRYEXFBmChfQ5hjZ8X7lZtzU3kxIGZg6nQ3L5GQrHKVt1hA6sS2ehrqglNqEnkgl_gGSY9k4cNfvckHx3d0TeASxGlDKtmmf3E1IzqsgDNiyX6-mYIL7GEXsYtzBVpdsA1ft1hAG5tdn2wxGf5pXQZQtfWUjWI_Fc_kMFvpf0BvQvqEZ-Ubfl--TMAnfxofDN3DwGgnuW-WnNBl0fzhf4RuJFEG7VhAUt5pJ7kDpjckgLCOvZu6NOWIFod9tSsdo5zrbytp-suekZh6AgagwWdeBnwv_venw3ls3dyBCZiJ4fSyetcsH1hAeedoLHt3W4C4A_MtQcBpvDCA1Qu9c0Wkl-4LZZ1JLVbktK0LdemloIdivBx_QUXxgi4bQ1AauyJKU_8xWIfi0VhA8bnc8v37Svihshrm8tAfE2BBEYNQDt23SKniyhgKxXVqduYYyaIXaga--Tk8MDSzgLdmR77Bhnny8KZW6sSdsFhANO4Skq9lABzzFrtjbAtotIUDxbCMulLxvaQdkVF3QRju7ahz1VswlaYJGV2dsAEvUdhMdyBt0ubh7MgExdh4I1hA2qlE1UI9e7S6evXLr3PTzuQx5Mt4AWBEsch27V8KR9YNrkmtpADEcbff1pQeAvFfM1-s8wXcfbtPRe043mtzPFhAzx3yYM_PZbnvdGQAOgFIEfZLO4lyxaaKDwS2aR0em8NMGN7LWyWn3xmmYLil5z7SU2ERPgifIAlNN7Cv3T8iRlhAcprnh6oz7TZ4f-xDguwgmu7MJcfmN1UNnazdYFNhidX2qTeOwFEe6cJmBPKit_hEiMZl0CBmOM_EXk-RbnqLpFhAvwVxP_Hv5nlna48DR5kBEQPh19k1PyfRPiexGLBoXFBJoylAqp7e5M8h1Kay2dAiUKcNN-jpddPhVKS9scoza6sAWCAsJtxR5RZgKspuEKvh6QgNzIWrNJJ7m75SblUNoZ8qPAFYIAxqjDXXX-Yk0kXKApEhS7yTonIdeebkD_ijAcxm316qAlggum4SaZVHDnDIIly8sEED6h90LwIWKO9kPIFrzjsRypMDWCCkTP3vCS-m1pZA5jkQpKNRrKuvdPfLWHLZaazxvyr7rgRYIIPQTC7H2J5z-cMeEQqSY5rE4UP3i4f7xv3CNaBaPRWFBVggvd7G8Ml2jAIfD36up16CwVYE9Q7Cjnqz_KF5sONzNs8GWCDWhB4e1VcLdB3caKqUFmS7AUvwkEI88xjelZpufZKJSAdYIMsYIKiwWCoUkCmat94abRbkCgWjDMJCtfpV0BcIt0F7CFggx9AQB_iJ8vYPUAm5KXsDqOytGeSsWN4SEtNRRKvKSlkJWCAQMt4bzVbeZrzVNPYarbNWoFARAOeYM-7zqaJu7_2XhwpYIG3xg1Jf2Yz4_EXJDnAo3NM_KC5OMWqlPTRZ_86QFal-gwkKDA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:358f1915-7316-4f00-953c-f3a88ab0de30",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2397,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:dc1c3f44-c0ff-4f48-b881-10c039be1670",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:dd3a534a-3c90-4801-b933-de49c89d7a81",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:e07ecca7-ca19-4eb4-ad01-b9303589d3a6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:ed6bd878-13cd-452e-95d6-d6d5ec7cb1a6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "6ilwT2mzvwtGLAU-6Sptg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:22cd535d-caac-4ee5-b12f-fd0a93b10872"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:2f764851-ef5e-4e80-a94f-e333a216d840",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:49063c21-311d-4bf7-998b-881728f146a2",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36064,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:95c0f564-83c7-4f92-b0eb-204d2a4e3aca",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:b7d1c85f-ebf5-4f56-a80b-c6ca627b1cf2",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:5831bcee-4400-4e19-8d01-14298e1a4b57",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:991f6cbf-68fe-437d-9b7e-1b6a1948cefa",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:14cac999-096a-4c87-b07c-afaf9920036e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:e47ee31a-1ddf-4763-a10b-90ab5480bfbf",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36531,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:464826ad-c8ff-438b-b18b-84154bdc881c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:16e3f7e7-eda9-44d1-aaa0-8ff87e5d92e5",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35643,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "6ilwT2mzvwtGLAU-6Sptg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:f55c8b2e-91cf-49b5-8daa-6b16c27eae2d"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:f01e5bab-c9f8-4ff2-af3c-fe0bf64a1a00",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 308,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:566fcec4-30ec-41e5-bc35-42189c852d98",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:349eba6e-937d-4c54-b769-34cdbdfcc4fd",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:5fe81c6a-240d-4893-93a8-86fac87b75a6",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37603,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 807,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:a01ba893-da1d-49b1-a280-567a246c23c8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 609,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:d9924a7b-1853-479c-a4f8-4aafc36c7f70",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:dad16f45-8430-446f-8810-bc8c7ea0cc1c",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:66e3d4f6-5fbb-4f60-bdba-364c01e28c44",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:ed0464da-4f41-4899-8592-e52d2fcb86bf",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39625,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:5c337501-98f3-4c0c-b92e-3cdf37c8eefb",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "6ilwT2mzvwtGLAU-6Sptg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:7428c383-6c7a-424f-aa5a-40473812a1ff"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:f6c9d6e7-40ac-4327-910a-4819b34ac38f",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:210f4f0b-2aaf-4935-a996-1074d154ed8e",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:2f764851-ef5e-4e80-a94f-e333a216d840",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:f01e5bab-c9f8-4ff2-af3c-fe0bf64a1a00",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 308,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:a0980b49-089a-4d53-a882-b40ac8367c38",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 496,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:49063c21-311d-4bf7-998b-881728f146a2",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36064,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:566fcec4-30ec-41e5-bc35-42189c852d98",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:48e9fd7b-afa6-48c9-9bd4-74736ea06577",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 619,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:95c0f564-83c7-4f92-b0eb-204d2a4e3aca",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:349eba6e-937d-4c54-b769-34cdbdfcc4fd",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:6cc8a927-44db-4087-8f21-c09ce189f660",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32254,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 285,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:06:08Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAR8YRtxq56wilIlVRMU4vJDXJ5q_oquNKkxjbG8dsrLEipsYwPR3Zedz0tHX8P20B_szn9eMw4B6kpHDPgP9Hv1gjgCQCQ9fyJgHE9M9l_rGxT_C6tnXjOu3eXT1BUdplnk693wuYN1hAyEYCphLEeREleE6Ey_DGWpGEFbf-uQDo2nsPhPSrjm_vOTWnHmvl8YslgJY5Bq9SPHf3Zm-noN5wZWCV5SLLGlhA1JpsS9N64z-0TXLA6pYbQAICJGaUrPP2jtVMztWBJOEFYvcCDnYdAKQeV5L00Bo2vIiLbkNaPF4miRqi08b08FhApzeBrgZU19TLtbMi9LAVbf48elFHrlAHUGYmbSIEN7DX4Jc4F3iVtB-dwUrBiOH1TwG53aNwCwr69_djjwuxnVhAKgsGaC56g-8p-fDgkX3AqC5q_GOyXDE_jNRhfeT0LuN6crOvZrxrWJsrEeT7v5dVX5eXJMF2EzHcQj6zfU_uOFhAbQNTndrNRBYPMoa2SXWJgMM5F01LNwDjsdPiVcGjBpdcp6ymuEGpbuqOpZORu_62iJmBVTXK4CUiPpsakMZWbVhA8qfLT-y8wa33zh15NEBAzmv0x7OvTZ8qbG_O3L630g9OaJPM0NJhecrKBIPS2yhhyAJyQWO7Rdv1MQMcFHvXIVhAGgE6FnNW9mSIucO2kGZx1dvgfwX4OdtrUdDbP6qPoVUtHubu4_t4yWb7k318IywhheZrrYAOCyNT2an9N8ZdA1hAifHAriTxaBMIkVqmMJ0nUaRbP_XPJ4Rt5np25sXdF47rjk4YDk7tPDAfw2WMEXUOoSDIWG9Y5nAHOkQXuW0dc1hAmDXWPoymUTCQXf7cMaicj2JIalRGZ9bwYk0P0a4MkqsAmDbmMhPBnrIKJ5swyTF34_GZxuk01BAJ-iXtb7Y4q1hAroxT8GNoTrQbiJcbxRMKgq-eJKXQlHBgWcZzygiWxgM4fiImEd9UB2R9Wcjj1aAaFEcN0QMTXNaPcwnBxrMRDFhACDlWqkJsT5yaBVtlwVQoziGCQDR6UlLj1ikrnqClK2Rn3Kuyd6p79OIAI_fDkTHPAQFAYk2FQ8NWyIuzbqZOO1hA2B73EOoi_2TNOrNB6APFBbmuheQtTtLlZUJV2P6qAIDbMJhnzv5tvffssX_xYU4BnTxwEQZ6cTKddWMU8-0GeFhAUOKha6ptXAAp2lFVNzgqFNd04eQsonbkrrQAhh8hVk7_wj2j52vkenCtz8hAWosGRbPhg1tUP12u3idGpG0MGVhAUL1ApPMtWv8NBORNe_MvUoJcY0K7CN_na4vjBacVGF3cRZgBPMCpwLTwOez6VJy7G-mrgKbNteaI0tF0XuPeg1hAPPPlNr5zfBpIRU6XSeP5c9KnH0P9DcuK0chk5mvbFQuPnzcSUedmp1uqm3DJ4ukkjNB-GkHyw2-oT5aSntYOxFhA-ISypua8gIJ9g_C10cskhgpjMkscqncr_NsT1N4m7iGjeKWQTSwNqsrcIquS1BmnE4JuCKd-mRiojM2zplGpmVhA2kIwNtggpn6gjoH9pugJVzpG5DhSPrGRife_dEVjzOzvVP36QCMaKoVNRe9X_-w3szX1ntfXyU_wTdsDr0TD-VhAlWZdyr2H58j9OSRmE8jFanXLcxaHOP0sxSJKHfnfkn9fYJhKyLZ_Hi3T2KEpwDwuFKXDrx1iwOKXzwe6Wk0GIFhA4sfqSkscH7UMmDr2ODlxOS-1DAvnWMGbQnfcGua6vZ99SxKab1oL6I74BUV2EmEaa1AlUo035xJhPxUGE8Iie1hAUyIgFCyiL_SUz95rvLHAEDGgLncTyY3bMhg6MUG72yDxekdNZ4-7uV8sRq70GXapiaNV6s9hOB-oE3DkmkI1rlhAW_dj_AEp1OLkTluI32tlrPAQbGZKS8-n4v6OJcsWSImgL8jgCNMVEbSYU0ozSToC6iObDpZofwSqATrJbXrVXlhACFpLUhLZo9enToYectvrvop_gLLLBrKuxwViY6acK3i6SDvfwUbsNVfrlmH9QooMzBoiM1zzLTs58PYuFKIWD1hAo8x1upGoML3g2vUWMeUeYPfGilchyzKNnoBFOv6s5bmC3kuxQvhj-mev7hIDW_zfCn21nfYu83of_qvD_p5FC1hAhbvxNLx_US3cG8YQnXsNzGxb-iM_OWmh4K1Vrp8fiy5jOQBzC1mW4gfs1jY_4Eqq5FfgFs1GuEajZ6rprUUlNVhAd3QFz4dZypaJmhTo0qulDgGU97xfd3jMPnIRpt9w5Lbf-9kzJgqrcTxrVp4ukk-Kt0nAkcTcYsgF6X_r67RNI1hAYQwm8k5wpo6g19uBwsVjG1QurtPIpTlKlDpWw1SpSEF33J37cTPYfLRu3vLgc1OFua6wqmlqCn8PLNATV_IGVlhA7Ly9ymVsNud83XaZe4_x7IfGyup9NU6QXg4ijjoaSJiXLyPIDKO-vIAsirhAUGaLoaanVM7kHOd7f__Jvqx-v1hAkdaqmKnmEz_oyf5gQ1MWhwMw21e-V-rASPxMB6vCYM6P4OOJSjeOJt3mo_BYVR7emOLHpJDqIg5b_HJlfdYNHlhAumGQQ8ZB15P_0cBcOvWzAvwEVqY9a2kKvTL9TFSSimj22Pu13xhl9NpFMLDB7iEse56-BYUeV-qQHZLvthS8sVhAFTRkYXtefkmpsMZxD-ERXmP7LCNv7oO4rcyHVsGgjS0FFA6G7bJFmx0yBP6hYxkVAwuRiPgNDnn-0ZXhuo5GLFhA6YbR8P8tKcy9ivSVU1H-dalbvoO2Qq5Z_pylzEXZfPnbtxB4K34EeWtezsQn67rlIbjQKwQNc7aeKG8a1IyMl1hApodTKXyL93l3ZRhQR1UIvTH5chNNHYncB2LXInaws1dXdYtQPZivkpB3IVzbCepKzgb81M2d2qDNxV6qUcKneFhAVoPqdg1PoVqxZD1RQp5qne4aDdCuu_sMGWImXZb_h2Q6WKknAJqQjjC2iKP_CPhvyzU_1C4oVojjBVJQGHFxElhAOPIcJXNjtK0UOiMazKvL1drhHMurSH2xolUdaJh7fdkidg26fvdT4Zewf6s4HC2j9XdcxSCmH2WVgbUnziHnNVhAteyTiXSJzMtUU_XjgIDysDQHg7uVzCzTbPRbTGKCz2uxzwLHNGIzoBEsM1wU1ZKL3a0o95uaeDQWWDw4QSSg9VhA9fCV4hZAxH0O31oLJClprw_xiwGz5ryldjdwLgxJtyxeEpY5mSB6HVTUAraZkfWZP5cnjOLB3bxJn1SYkBP6jlhA3kI_C2Czh34biwQcysnvtLnoHmPcmkDvAsbw_sv4U8vtQZ_Htl3ZNSh-7ywIHWHwrVOhjnk_xjDgfrAhIHmPglhABlHW321meoLSO5NvJU_LKHyljB1AV7PXsEyNHeGhrZBcYgBlSaW9sPQo5AaYg8RLZDvV5A42kdxSLIVhUZjAdlhA4turcssqV0ldjHZo2KmfeiZXzTWpFQ2ccHZO4lvIGhc0lfRO5eYQdHU3r3Zaqo7n2Jimbdf9w_j5ihJPkp7Iu1hAiYmEuQOU_tqLEs9iQwkQGfXdDsggQgaHXnVthz0duZrDsGu7inYjBY8UrJkOPY0hMew0RLyeU1nG0_QmBzlGMVhAQ8FjpsKaUwkeWTokF49w94sXMv1_71kw_VTQx2a7W1AsowoMIwFy9_IAbdLoYikiaHuBzn2Pf2y8Pye60nCOT1hASWWWZr24fgvqWiuLt-JrCXs-cdL00FQKMP-R9FCnodNbd4ksvZVey_8Zj7ShfNzU61rl53VgZAnZ_P-GHqfCNFhAWODuwFYFiUTgUlOK4ccRa5q-_XpYH32F8p3HYuCe2wFw4uiCkil1CGWCzCly1fKwaYHHBpzEtI69SV6TF2lSElhAgkkplzkWXu4UPnkVG6-kGJPzGgqn9D655mKoRqFMILLiNEvtim_099ArzW3hE_BvCmzjqWV0xJY529GWb6B86FhAQM8Mk4KgEmB1Z1eaabcoZ-h8HG8wtjp3jPgIAwgUI8QdFJMMSz6VrIrSQH9QDrgNjmnV5_uSwRwLkv2XfBGXglhAhZew5lYjpNPMfOWVKmQo902Cqp-0LkNREkIPS8Fpghw766IyUzsoeSDDIKcUZBoyW7BzeRi96r2aV5kssVoj1FhARPwuJL9fuJ63NwywEITat3pbrjcQNKcEZHrq10SwQeIKHLa8Y8HR86708ONbdV47t-fvRoIlOAw3DQq-GdhKYlhAtfBy00whpCASKewYEMa04sLkfEy6qj-S241QV_rH5fWjYtBemVcGj2x4lgvBkMWX1o1lUF1A6KFmUc9KiZMNgVhAiiBY6FY6nvOCjJJuVmT1182zfBoyAlhJKI_2VQFvlNBhDCbp-VwC06xrrfGbBZUthg6O7Q6kQ0aOr2ImiEJrI1hAkpKcB7TJtUZNA_sKfoVy47s4wjHzhkVrezemrZHH-c_WQCNLXRMMakugivSrJBwkXMHLPSgw4z_FAlOPpvYMa1hAueDYM7zfXDONzNhPkr3oB_1vJYZktOISmZdXFA3MFB_wkm5SOVOOqfFr5IE6kPoi2AaLx80Zdu1OxT-aZ7cwXFhA6b0LF8yr1nByQ7YsOMEBnQAnboTw1WFUcyJOE3EAkt1wD6IKVV9Oh_GR8pfEQy0Q3OB8CEh3NizhXBGeLsXiTVhARYn85kd7OPG6PmWZk6xLcdRaupL6Nn9IIWV__olQfW7ebNmTCJdQ1WgsGnVbmaGdr3KdwExpxGIVtyHfujtnAFhAFX1t9xkJ62K3cwyaT2U4t-UWBOxZ5hQHmOCg8CrutJjTpVgLevOYyQcwzgFufydPFWdXbog6bcgvvg3bR2ruTVhAwsaGd55ZARJlAUeqEL2YEW3_BbTxYlRF6Bctnsz4iZjidg2ahsuandFTTFQtYwn6jJldebwGEXc3WBxBoZngi7AAWCArycpGUtsOHiHMSK3bGNLLTlNOlpudO_B7AJU2GJwEYAFYIESCCGHwUve8Hv9n5fZU_50rZjMsjy3dRFMcpIAnP-WnAlgg5PUCAA4mgwbnvKqYd2xh82dZwd24qkBBUYYfHf70IGQDWCDVSK1Psf2qsQuuUwVAFXPV5Ah49mWBNMuBMWPRelBUDARYIBHCu_IeMW49tSXUHxWoTUxyW0PT06KE90rYf99sM1IxBVgg7wr_WtvVGHU6JYlQk9VX5jTpdwMTuq1HfOKDSa_bOW0GWCCkqxGF0z8WocF6HdP3ZGJjfuW4mmJwzTNwoLLpVOL-vAdYIPCYlRYED1lGkKlg2UfqmX9n8FrP10qexszU4JyrwvWvCFggNLS7a8sVx6eNI9cY1Lw0hBCUuNjngAvbFQrMLi4WvH4JWCDq78bm4CpCXdpnlKBaXEJrkZ3G1m4W0qOGIzYMrnm6dQpYIO_Rb_1bAqPE0E0X3xwwjEuqLFI7933xhqccG_2cWntzC1ggSzJ75aipUU0AA_b62brgGVfEuUt3Ig9pZoDWPz66BpgMWCAxM5_0wEf8PiyCc7-xHxwM5hxXGiGtyneGiSlP_8A0BQ1YIGBcN2yATwvVNEoSFkVJPop-nHDe2zdBBZDfkRW-grTFDlgg7yK8x8P-OYJaGnCL6-vGCDYrvyKthsNvQee-4_b6kr4PWCDoDn1ljHbiv61qVaUdte9-MrW2qwM1mqqeJwYGJiIgfYMYLRguGDA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:06:08Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAR8YRtxq56wilIlVRMU4vJDXJ5q_oquNKkxjbG8dsrLEipsYwPR3Zedz0tHX8P20B_szn9eMw4B6kpHDPgP9Hv1gjgCQCQ9fyJgHE9M9l_rGxT_C6tnXjOu3eXT1BUdplnk693wuYN1hAyEYCphLEeREleE6Ey_DGWpGEFbf-uQDo2nsPhPSrjm_vOTWnHmvl8YslgJY5Bq9SPHf3Zm-noN5wZWCV5SLLGlhA1JpsS9N64z-0TXLA6pYbQAICJGaUrPP2jtVMztWBJOEFYvcCDnYdAKQeV5L00Bo2vIiLbkNaPF4miRqi08b08FhApzeBrgZU19TLtbMi9LAVbf48elFHrlAHUGYmbSIEN7DX4Jc4F3iVtB-dwUrBiOH1TwG53aNwCwr69_djjwuxnVhAKgsGaC56g-8p-fDgkX3AqC5q_GOyXDE_jNRhfeT0LuN6crOvZrxrWJsrEeT7v5dVX5eXJMF2EzHcQj6zfU_uOFhAbQNTndrNRBYPMoa2SXWJgMM5F01LNwDjsdPiVcGjBpdcp6ymuEGpbuqOpZORu_62iJmBVTXK4CUiPpsakMZWbVhA8qfLT-y8wa33zh15NEBAzmv0x7OvTZ8qbG_O3L630g9OaJPM0NJhecrKBIPS2yhhyAJyQWO7Rdv1MQMcFHvXIVhAGgE6FnNW9mSIucO2kGZx1dvgfwX4OdtrUdDbP6qPoVUtHubu4_t4yWb7k318IywhheZrrYAOCyNT2an9N8ZdA1hAifHAriTxaBMIkVqmMJ0nUaRbP_XPJ4Rt5np25sXdF47rjk4YDk7tPDAfw2WMEXUOoSDIWG9Y5nAHOkQXuW0dc1hAmDXWPoymUTCQXf7cMaicj2JIalRGZ9bwYk0P0a4MkqsAmDbmMhPBnrIKJ5swyTF34_GZxuk01BAJ-iXtb7Y4q1hAroxT8GNoTrQbiJcbxRMKgq-eJKXQlHBgWcZzygiWxgM4fiImEd9UB2R9Wcjj1aAaFEcN0QMTXNaPcwnBxrMRDFhACDlWqkJsT5yaBVtlwVQoziGCQDR6UlLj1ikrnqClK2Rn3Kuyd6p79OIAI_fDkTHPAQFAYk2FQ8NWyIuzbqZOO1hA2B73EOoi_2TNOrNB6APFBbmuheQtTtLlZUJV2P6qAIDbMJhnzv5tvffssX_xYU4BnTxwEQZ6cTKddWMU8-0GeFhAUOKha6ptXAAp2lFVNzgqFNd04eQsonbkrrQAhh8hVk7_wj2j52vkenCtz8hAWosGRbPhg1tUP12u3idGpG0MGVhAUL1ApPMtWv8NBORNe_MvUoJcY0K7CN_na4vjBacVGF3cRZgBPMCpwLTwOez6VJy7G-mrgKbNteaI0tF0XuPeg1hAPPPlNr5zfBpIRU6XSeP5c9KnH0P9DcuK0chk5mvbFQuPnzcSUedmp1uqm3DJ4ukkjNB-GkHyw2-oT5aSntYOxFhA-ISypua8gIJ9g_C10cskhgpjMkscqncr_NsT1N4m7iGjeKWQTSwNqsrcIquS1BmnE4JuCKd-mRiojM2zplGpmVhA2kIwNtggpn6gjoH9pugJVzpG5DhSPrGRife_dEVjzOzvVP36QCMaKoVNRe9X_-w3szX1ntfXyU_wTdsDr0TD-VhAlWZdyr2H58j9OSRmE8jFanXLcxaHOP0sxSJKHfnfkn9fYJhKyLZ_Hi3T2KEpwDwuFKXDrx1iwOKXzwe6Wk0GIFhA4sfqSkscH7UMmDr2ODlxOS-1DAvnWMGbQnfcGua6vZ99SxKab1oL6I74BUV2EmEaa1AlUo035xJhPxUGE8Iie1hAUyIgFCyiL_SUz95rvLHAEDGgLncTyY3bMhg6MUG72yDxekdNZ4-7uV8sRq70GXapiaNV6s9hOB-oE3DkmkI1rlhAW_dj_AEp1OLkTluI32tlrPAQbGZKS8-n4v6OJcsWSImgL8jgCNMVEbSYU0ozSToC6iObDpZofwSqATrJbXrVXlhACFpLUhLZo9enToYectvrvop_gLLLBrKuxwViY6acK3i6SDvfwUbsNVfrlmH9QooMzBoiM1zzLTs58PYuFKIWD1hAo8x1upGoML3g2vUWMeUeYPfGilchyzKNnoBFOv6s5bmC3kuxQvhj-mev7hIDW_zfCn21nfYu83of_qvD_p5FC1hAhbvxNLx_US3cG8YQnXsNzGxb-iM_OWmh4K1Vrp8fiy5jOQBzC1mW4gfs1jY_4Eqq5FfgFs1GuEajZ6rprUUlNVhAd3QFz4dZypaJmhTo0qulDgGU97xfd3jMPnIRpt9w5Lbf-9kzJgqrcTxrVp4ukk-Kt0nAkcTcYsgF6X_r67RNI1hAYQwm8k5wpo6g19uBwsVjG1QurtPIpTlKlDpWw1SpSEF33J37cTPYfLRu3vLgc1OFua6wqmlqCn8PLNATV_IGVlhA7Ly9ymVsNud83XaZe4_x7IfGyup9NU6QXg4ijjoaSJiXLyPIDKO-vIAsirhAUGaLoaanVM7kHOd7f__Jvqx-v1hAkdaqmKnmEz_oyf5gQ1MWhwMw21e-V-rASPxMB6vCYM6P4OOJSjeOJt3mo_BYVR7emOLHpJDqIg5b_HJlfdYNHlhAumGQQ8ZB15P_0cBcOvWzAvwEVqY9a2kKvTL9TFSSimj22Pu13xhl9NpFMLDB7iEse56-BYUeV-qQHZLvthS8sVhAFTRkYXtefkmpsMZxD-ERXmP7LCNv7oO4rcyHVsGgjS0FFA6G7bJFmx0yBP6hYxkVAwuRiPgNDnn-0ZXhuo5GLFhA6YbR8P8tKcy9ivSVU1H-dalbvoO2Qq5Z_pylzEXZfPnbtxB4K34EeWtezsQn67rlIbjQKwQNc7aeKG8a1IyMl1hApodTKXyL93l3ZRhQR1UIvTH5chNNHYncB2LXInaws1dXdYtQPZivkpB3IVzbCepKzgb81M2d2qDNxV6qUcKneFhAVoPqdg1PoVqxZD1RQp5qne4aDdCuu_sMGWImXZb_h2Q6WKknAJqQjjC2iKP_CPhvyzU_1C4oVojjBVJQGHFxElhAOPIcJXNjtK0UOiMazKvL1drhHMurSH2xolUdaJh7fdkidg26fvdT4Zewf6s4HC2j9XdcxSCmH2WVgbUnziHnNVhAteyTiXSJzMtUU_XjgIDysDQHg7uVzCzTbPRbTGKCz2uxzwLHNGIzoBEsM1wU1ZKL3a0o95uaeDQWWDw4QSSg9VhA9fCV4hZAxH0O31oLJClprw_xiwGz5ryldjdwLgxJtyxeEpY5mSB6HVTUAraZkfWZP5cnjOLB3bxJn1SYkBP6jlhA3kI_C2Czh34biwQcysnvtLnoHmPcmkDvAsbw_sv4U8vtQZ_Htl3ZNSh-7ywIHWHwrVOhjnk_xjDgfrAhIHmPglhABlHW321meoLSO5NvJU_LKHyljB1AV7PXsEyNHeGhrZBcYgBlSaW9sPQo5AaYg8RLZDvV5A42kdxSLIVhUZjAdlhA4turcssqV0ldjHZo2KmfeiZXzTWpFQ2ccHZO4lvIGhc0lfRO5eYQdHU3r3Zaqo7n2Jimbdf9w_j5ihJPkp7Iu1hAiYmEuQOU_tqLEs9iQwkQGfXdDsggQgaHXnVthz0duZrDsGu7inYjBY8UrJkOPY0hMew0RLyeU1nG0_QmBzlGMVhAQ8FjpsKaUwkeWTokF49w94sXMv1_71kw_VTQx2a7W1AsowoMIwFy9_IAbdLoYikiaHuBzn2Pf2y8Pye60nCOT1hASWWWZr24fgvqWiuLt-JrCXs-cdL00FQKMP-R9FCnodNbd4ksvZVey_8Zj7ShfNzU61rl53VgZAnZ_P-GHqfCNFhAWODuwFYFiUTgUlOK4ccRa5q-_XpYH32F8p3HYuCe2wFw4uiCkil1CGWCzCly1fKwaYHHBpzEtI69SV6TF2lSElhAgkkplzkWXu4UPnkVG6-kGJPzGgqn9D655mKoRqFMILLiNEvtim_099ArzW3hE_BvCmzjqWV0xJY529GWb6B86FhAQM8Mk4KgEmB1Z1eaabcoZ-h8HG8wtjp3jPgIAwgUI8QdFJMMSz6VrIrSQH9QDrgNjmnV5_uSwRwLkv2XfBGXglhAhZew5lYjpNPMfOWVKmQo902Cqp-0LkNREkIPS8Fpghw766IyUzsoeSDDIKcUZBoyW7BzeRi96r2aV5kssVoj1FhARPwuJL9fuJ63NwywEITat3pbrjcQNKcEZHrq10SwQeIKHLa8Y8HR86708ONbdV47t-fvRoIlOAw3DQq-GdhKYlhAtfBy00whpCASKewYEMa04sLkfEy6qj-S241QV_rH5fWjYtBemVcGj2x4lgvBkMWX1o1lUF1A6KFmUc9KiZMNgVhAiiBY6FY6nvOCjJJuVmT1182zfBoyAlhJKI_2VQFvlNBhDCbp-VwC06xrrfGbBZUthg6O7Q6kQ0aOr2ImiEJrI1hAkpKcB7TJtUZNA_sKfoVy47s4wjHzhkVrezemrZHH-c_WQCNLXRMMakugivSrJBwkXMHLPSgw4z_FAlOPpvYMa1hAueDYM7zfXDONzNhPkr3oB_1vJYZktOISmZdXFA3MFB_wkm5SOVOOqfFr5IE6kPoi2AaLx80Zdu1OxT-aZ7cwXFhA6b0LF8yr1nByQ7YsOMEBnQAnboTw1WFUcyJOE3EAkt1wD6IKVV9Oh_GR8pfEQy0Q3OB8CEh3NizhXBGeLsXiTVhARYn85kd7OPG6PmWZk6xLcdRaupL6Nn9IIWV__olQfW7ebNmTCJdQ1WgsGnVbmaGdr3KdwExpxGIVtyHfujtnAFhAFX1t9xkJ62K3cwyaT2U4t-UWBOxZ5hQHmOCg8CrutJjTpVgLevOYyQcwzgFufydPFWdXbog6bcgvvg3bR2ruTVhAwsaGd55ZARJlAUeqEL2YEW3_BbTxYlRF6Bctnsz4iZjidg2ahsuandFTTFQtYwn6jJldebwGEXc3WBxBoZngi7AAWCArycpGUtsOHiHMSK3bGNLLTlNOlpudO_B7AJU2GJwEYAFYIESCCGHwUve8Hv9n5fZU_50rZjMsjy3dRFMcpIAnP-WnAlgg5PUCAA4mgwbnvKqYd2xh82dZwd24qkBBUYYfHf70IGQDWCDVSK1Psf2qsQuuUwVAFXPV5Ah49mWBNMuBMWPRelBUDARYIBHCu_IeMW49tSXUHxWoTUxyW0PT06KE90rYf99sM1IxBVgg7wr_WtvVGHU6JYlQk9VX5jTpdwMTuq1HfOKDSa_bOW0GWCCkqxGF0z8WocF6HdP3ZGJjfuW4mmJwzTNwoLLpVOL-vAdYIPCYlRYED1lGkKlg2UfqmX9n8FrP10qexszU4JyrwvWvCFggNLS7a8sVx6eNI9cY1Lw0hBCUuNjngAvbFQrMLi4WvH4JWCDq78bm4CpCXdpnlKBaXEJrkZ3G1m4W0qOGIzYMrnm6dQpYIO_Rb_1bAqPE0E0X3xwwjEuqLFI7933xhqccG_2cWntzC1ggSzJ75aipUU0AA_b62brgGVfEuUt3Ig9pZoDWPz66BpgMWCAxM5_0wEf8PiyCc7-xHxwM5hxXGiGtyneGiSlP_8A0BQ1YIGBcN2yATwvVNEoSFkVJPop-nHDe2zdBBZDfkRW-grTFDlgg7yK8x8P-OYJaGnCL6-vGCDYrvyKthsNvQee-4_b6kr4PWCDoDn1ljHbiv61qVaUdte9-MrW2qwM1mqqeJwYGJiIgfYMYLRguGDA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:b7d1c85f-ebf5-4f56-a80b-c6ca627b1cf2",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:5fe81c6a-240d-4893-93a8-86fac87b75a6",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37603,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 807,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:5b365e2f-a0e6-47ae-8c25-53b029b42dad",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-05-26T05:06:08Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhA5c_p9R6rPcfqNabmZxS-F8CcfHjFPNN_ilh3pXNAmsxMBr2EhY4p1N5-KcxdP3zG1Sit-QrvXZyrHqsHZf2Jh1gjgCQDUaX0mB6lWFhEqo2DkPC9GZhh_JkfOh-as_0bWGM-UM6YIlhA9USyglUp_yKHFKLlbeiU5Jsdkd-lF0xAs4UXkP8pjsEv65gpDNU33a2l6Yi_P4Wr7JzTKWmG9In3v7vUyyB4OVhALnid3vuovRgTG8NYLQE42m-w814Wdns1JIF0DPCd1vdX3rVW9MPQXciyOPU2n8lJmL8zJCQ1KZIaZAyFbyStTlhAB1BxX--_sk1tLzw5ejvyg74Jxo01GtV_xDlE6LOQBRZ86yNriWW38gSi0jvBA3eo-Fn_UlM6294srtZK5l5uF1hAzRasNO8PBOCbHXs_qrX_sQCR2335bRYM43qrZW2lFCAPhXEs6UwCVn4zPLflVJIqMYDE9aZWXwDxfpYUy1QfXVhAg0n0J7eX_dxLzVqp1GNGCL5p45LGTJbqH5JVRHoh-0Uba4YSaxbvo8K0-kGgz31S3d-ISWlula87ZBChXz8PSVhAGNwLobhRp3iUYNMSU8CsLAHKFGxgwv3UGwf0BgfQkNLPk1w01134U3yxmai6G6BGk7azoxLeuQCE9nb4UFPO1lhAl1inXm-ILS-0g5wSu-m9EIBgT8UOFOCowFC0LkYpGdgeWche_n-aBBQtxzGOUGlQl71SETRWDD2FFKlsk-jlOFhAbKYHOkTRgV_AnaAwzss1YLnCCBScAou45OroL7qSvjklTRstXn4oLkEGpB-S3XgC1KYKzqpZyTj-8gRU_Wllz1hABP-X4p26CZEtAoB6UdFfe_OQ0GTDUVMfIH9rvPmfJrMrY9fX0fP-mPUGmAsNlXzn-lnHruTwi1kA7JbsY_azyFhAD89zF1RFNW2jzy-nb8xqgkTZMFsw1mMZAEudbLUuhZsgiDj48KrFd7zdyK1KfsJ9NJe103PhdYr8sptQTnpePVhAJBBBbnNNj6pz3VakjfKAjco5IbDzUEKL5y2uMFq9EQLW8ZkLSAhr9oLCKzzgNZPOcIysuVR_QV4T__xeR6HT-VhA-LvSndYMnEHKzRBWR6VBL3MEnx-SeGUZVDM5lbSgP3HmTkNAaYZkPUMjgNhyO8hFEHaBMS7bue55ymoq9SLJclhA_GhzNj4P8TM52-AUU1odaDW4IFa7I30KavNmQd3c4aT0IuUiOr3VC5_YaHAeGZXuMUljy52cDky-_ivdICf4DFhAt0CkOrcbmepBHtxXPOjNz1772L0neVe3rBY117dstu75lYMnV53fsZosSE5-EqjvhU7Juf7Hq_R0IP3Vk8YF8VhAbXZdzavYQ95uKCvK-LyyvT91IL_jmehVzBXwCsb-f-QIs6MmP5obKFvHcF6YxkMZR24K-qb5JyL4-4-xQle4uFhANM1DN2pvGFB33zrkJoFMcHfQ2jtCx_zkGzRcss06vwhQy1SkAFxljjjjcn8Sr0oJTLicuzKmOiCMabyVzEsI6FhAyBPvlw8MAUuTeEgYnC6nNbYmDnbmogQF9J1u69lsJGAgyE0NgThuMrJKEccmlo35eJinGDVkkDBrASBZzCK5dVhAz6d6sqqGg1fe1m6MbSY0cfixKKegc3qhUtY4GsVRd0tcvA6AMCyg6ZkwH_7b_3aM2koP4E4WDVR-tWVAUDExE1hA4CiwMkay9FARv_QZe__3rAvLHQkJvrCWGvbys7nxlipVFOOxx3rqJGtsFiAjFbizAD8fayAnjBLSMdY4HS0y6FhAf7dPIkZ63yr1vO8fs5WAjW_8bfG2-x_NrQyu-mcpVa2u3fOfbGOg7IZkI7a9E3YUha7ayeRPIMUQV20RvZ6A1lhAlcBHnwN4xNYAIgQXYsNlwMzmZSwe5XP4rFvJUA-pa1wbWT25fjeCh40y749UfsMoIp4p-Gka7S1wxmW1_jBUZlhAHO0oDww8Y0GqSlflnTMf8mTpsNbWvwgu8mAtspOM9EWt4LeGOGayikT5vd1M4Sav2LSz5bHmrTLih4qD57sdFlhAJr4HgG7069ca5Z41RM1h0mYvFpT7gf5PLyCCQsCCrh9mOeyqfgyThhPi2joSBStnZgMJlJfRvLp9HSkv7D4hUVhA5KzSMKDMuQSMy-rOlPi5Q_grQg1Lt9IohOTEmLrwsZRYEXFBmChfQ5hjZ8X7lZtzU3kxIGZg6nQ3L5GQrHKVt1hA6sS2ehrqglNqEnkgl_gGSY9k4cNfvckHx3d0TeASxGlDKtmmf3E1IzqsgDNiyX6-mYIL7GEXsYtzBVpdsA1ft1hAG5tdn2wxGf5pXQZQtfWUjWI_Fc_kMFvpf0BvQvqEZ-Ubfl--TMAnfxofDN3DwGgnuW-WnNBl0fzhf4RuJFEG7VhAUt5pJ7kDpjckgLCOvZu6NOWIFod9tSsdo5zrbytp-suekZh6AgagwWdeBnwv_venw3ls3dyBCZiJ4fSyetcsH1hAeedoLHt3W4C4A_MtQcBpvDCA1Qu9c0Wkl-4LZZ1JLVbktK0LdemloIdivBx_QUXxgi4bQ1AauyJKU_8xWIfi0VhA8bnc8v37Svihshrm8tAfE2BBEYNQDt23SKniyhgKxXVqduYYyaIXaga--Tk8MDSzgLdmR77Bhnny8KZW6sSdsFhANO4Skq9lABzzFrtjbAtotIUDxbCMulLxvaQdkVF3QRju7ahz1VswlaYJGV2dsAEvUdhMdyBt0ubh7MgExdh4I1hA2qlE1UI9e7S6evXLr3PTzuQx5Mt4AWBEsch27V8KR9YNrkmtpADEcbff1pQeAvFfM1-s8wXcfbtPRe043mtzPFhAzx3yYM_PZbnvdGQAOgFIEfZLO4lyxaaKDwS2aR0em8NMGN7LWyWn3xmmYLil5z7SU2ERPgifIAlNN7Cv3T8iRlhAcprnh6oz7TZ4f-xDguwgmu7MJcfmN1UNnazdYFNhidX2qTeOwFEe6cJmBPKit_hEiMZl0CBmOM_EXk-RbnqLpFhAvwVxP_Hv5nlna48DR5kBEQPh19k1PyfRPiexGLBoXFBJoylAqp7e5M8h1Kay2dAiUKcNN-jpddPhVKS9scoza6sAWCAsJtxR5RZgKspuEKvh6QgNzIWrNJJ7m75SblUNoZ8qPAFYIAxqjDXXX-Yk0kXKApEhS7yTonIdeebkD_ijAcxm316qAlggum4SaZVHDnDIIly8sEED6h90LwIWKO9kPIFrzjsRypMDWCCkTP3vCS-m1pZA5jkQpKNRrKuvdPfLWHLZaazxvyr7rgRYIIPQTC7H2J5z-cMeEQqSY5rE4UP3i4f7xv3CNaBaPRWFBVggvd7G8Ml2jAIfD36up16CwVYE9Q7Cjnqz_KF5sONzNs8GWCDWhB4e1VcLdB3caKqUFmS7AUvwkEI88xjelZpufZKJSAdYIMsYIKiwWCoUkCmat94abRbkCgWjDMJCtfpV0BcIt0F7CFggx9AQB_iJ8vYPUAm5KXsDqOytGeSsWN4SEtNRRKvKSlkJWCAQMt4bzVbeZrzVNPYarbNWoFARAOeYM-7zqaJu7_2XhwpYIG3xg1Jf2Yz4_EXJDnAo3NM_KC5OMWqlPTRZ_86QFal-gwkKDA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-05-26T05:06:08Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhA5c_p9R6rPcfqNabmZxS-F8CcfHjFPNN_ilh3pXNAmsxMBr2EhY4p1N5-KcxdP3zG1Sit-QrvXZyrHqsHZf2Jh1gjgCQDUaX0mB6lWFhEqo2DkPC9GZhh_JkfOh-as_0bWGM-UM6YIlhA9USyglUp_yKHFKLlbeiU5Jsdkd-lF0xAs4UXkP8pjsEv65gpDNU33a2l6Yi_P4Wr7JzTKWmG9In3v7vUyyB4OVhALnid3vuovRgTG8NYLQE42m-w814Wdns1JIF0DPCd1vdX3rVW9MPQXciyOPU2n8lJmL8zJCQ1KZIaZAyFbyStTlhAB1BxX--_sk1tLzw5ejvyg74Jxo01GtV_xDlE6LOQBRZ86yNriWW38gSi0jvBA3eo-Fn_UlM6294srtZK5l5uF1hAzRasNO8PBOCbHXs_qrX_sQCR2335bRYM43qrZW2lFCAPhXEs6UwCVn4zPLflVJIqMYDE9aZWXwDxfpYUy1QfXVhAg0n0J7eX_dxLzVqp1GNGCL5p45LGTJbqH5JVRHoh-0Uba4YSaxbvo8K0-kGgz31S3d-ISWlula87ZBChXz8PSVhAGNwLobhRp3iUYNMSU8CsLAHKFGxgwv3UGwf0BgfQkNLPk1w01134U3yxmai6G6BGk7azoxLeuQCE9nb4UFPO1lhAl1inXm-ILS-0g5wSu-m9EIBgT8UOFOCowFC0LkYpGdgeWche_n-aBBQtxzGOUGlQl71SETRWDD2FFKlsk-jlOFhAbKYHOkTRgV_AnaAwzss1YLnCCBScAou45OroL7qSvjklTRstXn4oLkEGpB-S3XgC1KYKzqpZyTj-8gRU_Wllz1hABP-X4p26CZEtAoB6UdFfe_OQ0GTDUVMfIH9rvPmfJrMrY9fX0fP-mPUGmAsNlXzn-lnHruTwi1kA7JbsY_azyFhAD89zF1RFNW2jzy-nb8xqgkTZMFsw1mMZAEudbLUuhZsgiDj48KrFd7zdyK1KfsJ9NJe103PhdYr8sptQTnpePVhAJBBBbnNNj6pz3VakjfKAjco5IbDzUEKL5y2uMFq9EQLW8ZkLSAhr9oLCKzzgNZPOcIysuVR_QV4T__xeR6HT-VhA-LvSndYMnEHKzRBWR6VBL3MEnx-SeGUZVDM5lbSgP3HmTkNAaYZkPUMjgNhyO8hFEHaBMS7bue55ymoq9SLJclhA_GhzNj4P8TM52-AUU1odaDW4IFa7I30KavNmQd3c4aT0IuUiOr3VC5_YaHAeGZXuMUljy52cDky-_ivdICf4DFhAt0CkOrcbmepBHtxXPOjNz1772L0neVe3rBY117dstu75lYMnV53fsZosSE5-EqjvhU7Juf7Hq_R0IP3Vk8YF8VhAbXZdzavYQ95uKCvK-LyyvT91IL_jmehVzBXwCsb-f-QIs6MmP5obKFvHcF6YxkMZR24K-qb5JyL4-4-xQle4uFhANM1DN2pvGFB33zrkJoFMcHfQ2jtCx_zkGzRcss06vwhQy1SkAFxljjjjcn8Sr0oJTLicuzKmOiCMabyVzEsI6FhAyBPvlw8MAUuTeEgYnC6nNbYmDnbmogQF9J1u69lsJGAgyE0NgThuMrJKEccmlo35eJinGDVkkDBrASBZzCK5dVhAz6d6sqqGg1fe1m6MbSY0cfixKKegc3qhUtY4GsVRd0tcvA6AMCyg6ZkwH_7b_3aM2koP4E4WDVR-tWVAUDExE1hA4CiwMkay9FARv_QZe__3rAvLHQkJvrCWGvbys7nxlipVFOOxx3rqJGtsFiAjFbizAD8fayAnjBLSMdY4HS0y6FhAf7dPIkZ63yr1vO8fs5WAjW_8bfG2-x_NrQyu-mcpVa2u3fOfbGOg7IZkI7a9E3YUha7ayeRPIMUQV20RvZ6A1lhAlcBHnwN4xNYAIgQXYsNlwMzmZSwe5XP4rFvJUA-pa1wbWT25fjeCh40y749UfsMoIp4p-Gka7S1wxmW1_jBUZlhAHO0oDww8Y0GqSlflnTMf8mTpsNbWvwgu8mAtspOM9EWt4LeGOGayikT5vd1M4Sav2LSz5bHmrTLih4qD57sdFlhAJr4HgG7069ca5Z41RM1h0mYvFpT7gf5PLyCCQsCCrh9mOeyqfgyThhPi2joSBStnZgMJlJfRvLp9HSkv7D4hUVhA5KzSMKDMuQSMy-rOlPi5Q_grQg1Lt9IohOTEmLrwsZRYEXFBmChfQ5hjZ8X7lZtzU3kxIGZg6nQ3L5GQrHKVt1hA6sS2ehrqglNqEnkgl_gGSY9k4cNfvckHx3d0TeASxGlDKtmmf3E1IzqsgDNiyX6-mYIL7GEXsYtzBVpdsA1ft1hAG5tdn2wxGf5pXQZQtfWUjWI_Fc_kMFvpf0BvQvqEZ-Ubfl--TMAnfxofDN3DwGgnuW-WnNBl0fzhf4RuJFEG7VhAUt5pJ7kDpjckgLCOvZu6NOWIFod9tSsdo5zrbytp-suekZh6AgagwWdeBnwv_venw3ls3dyBCZiJ4fSyetcsH1hAeedoLHt3W4C4A_MtQcBpvDCA1Qu9c0Wkl-4LZZ1JLVbktK0LdemloIdivBx_QUXxgi4bQ1AauyJKU_8xWIfi0VhA8bnc8v37Svihshrm8tAfE2BBEYNQDt23SKniyhgKxXVqduYYyaIXaga--Tk8MDSzgLdmR77Bhnny8KZW6sSdsFhANO4Skq9lABzzFrtjbAtotIUDxbCMulLxvaQdkVF3QRju7ahz1VswlaYJGV2dsAEvUdhMdyBt0ubh7MgExdh4I1hA2qlE1UI9e7S6evXLr3PTzuQx5Mt4AWBEsch27V8KR9YNrkmtpADEcbff1pQeAvFfM1-s8wXcfbtPRe043mtzPFhAzx3yYM_PZbnvdGQAOgFIEfZLO4lyxaaKDwS2aR0em8NMGN7LWyWn3xmmYLil5z7SU2ERPgifIAlNN7Cv3T8iRlhAcprnh6oz7TZ4f-xDguwgmu7MJcfmN1UNnazdYFNhidX2qTeOwFEe6cJmBPKit_hEiMZl0CBmOM_EXk-RbnqLpFhAvwVxP_Hv5nlna48DR5kBEQPh19k1PyfRPiexGLBoXFBJoylAqp7e5M8h1Kay2dAiUKcNN-jpddPhVKS9scoza6sAWCAsJtxR5RZgKspuEKvh6QgNzIWrNJJ7m75SblUNoZ8qPAFYIAxqjDXXX-Yk0kXKApEhS7yTonIdeebkD_ijAcxm316qAlggum4SaZVHDnDIIly8sEED6h90LwIWKO9kPIFrzjsRypMDWCCkTP3vCS-m1pZA5jkQpKNRrKuvdPfLWHLZaazxvyr7rgRYIIPQTC7H2J5z-cMeEQqSY5rE4UP3i4f7xv3CNaBaPRWFBVggvd7G8Ml2jAIfD36up16CwVYE9Q7Cjnqz_KF5sONzNs8GWCDWhB4e1VcLdB3caKqUFmS7AUvwkEI88xjelZpufZKJSAdYIMsYIKiwWCoUkCmat94abRbkCgWjDMJCtfpV0BcIt0F7CFggx9AQB_iJ8vYPUAm5KXsDqOytGeSsWN4SEtNRRKvKSlkJWCAQMt4bzVbeZrzVNPYarbNWoFARAOeYM-7zqaJu7_2XhwpYIG3xg1Jf2Yz4_EXJDnAo3NM_KC5OMWqlPTRZ_86QFal-gwkKDA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:5831bcee-4400-4e19-8d01-14298e1a4b57",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:a01ba893-da1d-49b1-a280-567a246c23c8",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 609,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:358f1915-7316-4f00-953c-f3a88ab0de30",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2397,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:991f6cbf-68fe-437d-9b7e-1b6a1948cefa",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:d9924a7b-1853-479c-a4f8-4aafc36c7f70",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:dc1c3f44-c0ff-4f48-b881-10c039be1670",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:14cac999-096a-4c87-b07c-afaf9920036e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:dad16f45-8430-446f-8810-bc8c7ea0cc1c",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:dd3a534a-3c90-4801-b933-de49c89d7a81",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:e47ee31a-1ddf-4763-a10b-90ab5480bfbf",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36531,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:66e3d4f6-5fbb-4f60-bdba-364c01e28c44",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:e07ecca7-ca19-4eb4-ad01-b9303589d3a6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:464826ad-c8ff-438b-b18b-84154bdc881c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:ed0464da-4f41-4899-8592-e52d2fcb86bf",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39625,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "m71-FOXNofkqqMpReHegh",
              "ctx": null,
              "_testId": "urn:uuid:ed6bd878-13cd-452e-95d6-d6d5ec7cb1a6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0n4CF9tZPULH3zF1c32EB",
              "ctx": null,
              "_testId": "urn:uuid:16e3f7e7-eda9-44d1-aaa0-8ff87e5d92e5",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "LxovxDJynuDbuI5-OEKot",
              "ctx": null,
              "_testId": "urn:uuid:5c337501-98f3-4c0c-b92e-3cdf37c8eefb",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 39798,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 257,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 40055,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 290,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 40344,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 168,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 40513,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 518,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41030,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 244,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41275,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 245,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41520,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 398,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41919,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 224,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "-tR5eEmD3IRA_a9_MAOK4",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 42143,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 299,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ZnkGXvNukiAf4vFigf8BE",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:47e2cb53-8051-4c17-961a-5e5eb719003b",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:4b8fad36-b438-4586-b947-4a8d2f6f8ac2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42441,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:932561ab-3e50-44d1-87a0-56309354d65f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:666e32a0-da39-4426-8e93-f904ecc8dcea",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:06:17Z",
                          "proofValue": "u2V0BhVhADkORhh7kbyNIscNOhDj6iNvTI-WKVibFM6fop0hcjyHi4iSYa_AP3ScYrBsyaF_A9VOh5Fj9VanZYWqZ_ZpxmVgjgCQCFr5F93SCQQhlRZsB__tqObSwyTxIHFBxvAozoJ4cz8qBWEAnqP7CjF0Y_behoxfu8RxSLLligLB0EcCXt3X_r2dBmuSN1H85oefb9Z6Dy7gMHa1z_a4lDsmeCMFjsrq4KovyoIMAAQM"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:666e32a0-da39-4426-8e93-f904ecc8dcea\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-26T05:06:17Z\",\"proofValue\":\"u2V0BhVhADkORhh7kbyNIscNOhDj6iNvTI-WKVibFM6fop0hcjyHi4iSYa_AP3ScYrBsyaF_A9VOh5Fj9VanZYWqZ_ZpxmVgjgCQCFr5F93SCQQhlRZsB__tqObSwyTxIHFBxvAozoJ4cz8qBWEAnqP7CjF0Y_behoxfu8RxSLLligLB0EcCXt3X_r2dBmuSN1H85oefb9Z6Dy7gMHa1z_a4lDsmeCMFjsrq4KovyoIMAAQM\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            }
                          ],
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-26T05:06:17Z",
                          "proofValue": "u2V0BhVhADkORhh7kbyNIscNOhDj6iNvTI-WKVibFM6fop0hcjyHi4iSYa_AP3ScYrBsyaF_A9VOh5Fj9VanZYWqZ_ZpxmVgjgCQCFr5F93SCQQhlRZsB__tqObSwyTxIHFBxvAozoJ4cz8qBWEAnqP7CjF0Y_behoxfu8RxSLLligLB0EcCXt3X_r2dBmuSN1H85oefb9Z6Dy7gMHa1z_a4lDsmeCMFjsrq4KovyoIMAAQM"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/multikey/v1",
                          "id": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "Multikey",
                          "controller": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "publicKeyMultibase": "zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:666e32a0-da39-4426-8e93-f904ecc8dcea",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:115:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:e38be894-8b9a-4eff-aede-f782f46c4a2e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:3081f307-9ae7-44a8-9739-56bdf9278197",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:c0bd93c2-d05e-44a0-9ca9-f8b06028ba00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:d4fd003f-2815-47db-8a93-2a20fb6d3a22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:01a41ede-de1c-47b4-8e58-e6cd7b04c135",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:56322902-4abc-4f87-b0dc-d311c9fbbe0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "-tR5eEmD3IRA_a9_MAOK4",
              "ctx": null,
              "_testId": "urn:uuid:d7b92855-9854-42f1-a372-7a436b40945e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-ecdsa-test-suite",
    "subtitle": "Interoperability test suite for ECDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c/vc-di-ecdsa-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-ecdsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Tyler Minard",
        "url": "https://github.com/tminard",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "Data Integrity ecdsa 2019 Interoperability Report 1.0",
  "stats": [
    "Tests passed 409/445 91%",
    "Tests failed 36/445 9%",
    "Failures 36",
    "Tests skipped 0",
    "Total tests 445"
  ]
}