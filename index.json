{
  "matrices": [
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:6cd5ed60-7ad9-4296-8bfb-c81bef052467",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:d806c670-2347-40fd-ad78-84cb8feda795",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:ac5dab04-96ff-4806-b46f-6823b269ead2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:993a1ca1-e0f9-48dc-9a5f-601449b2d60b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:cd8e435b-2890-4901-95f9-5fe38cbd5f81",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:d557facc-adda-4d74-a3c9-a1ae9eb75975",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:1a9269cb-976b-48fb-b7a5-f33bbd3abbdf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:0da559dd-87d0-467f-88db-c19582d772c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:18ca95ed-4075-403d-8deb-52b79fafa7c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:161bde70-8787-431a-94c9-f296f24f29e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:91df0a41-b1e7-4463-adee-c5a447c22f70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:def09613-fad0-4766-a973-3082d59b8c7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:6e99d680-5423-4a9f-95e8-bf0363b47a60",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:f141a91b-4fff-49d2-b873-ce3d5124e57b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:03f9fab5-b60b-4727-892c-420b6cc99aa1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1085,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nhnRAZ9i3G3_-cYEj5bCv",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:26cc7e9f-ca3f-4263-9184-ea94ec140d55"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:a843cf55-8586-4cc7-bbe8-7ccca8e50b8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:8878cad5-0581-47b2-a4b2-5a5dba73c5f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:381bce83-babf-4cc6-affb-c7c888efd505",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:f807177f-8011-45dc-91d7-4006e443e41a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:6f90f687-b180-4215-8ab1-ef715236e9ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:4eb7e902-b838-4f9b-8f38-8f7ed2440671",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:edd89141-7ffd-4c09-984a-bb5f339984b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:f71c9173-e4eb-4626-887c-c15292826f93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:1bc75589-04e9-4f6b-ab88-25121c039a77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:2e6be67a-226b-45ce-bb71-6c13a9056d0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:4150ea8b-589a-4c7d-ba9f-36f294ee5838",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:9f328742-aff4-4e4c-ac5b-4a9fa33fc242",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:4002c44e-8814-45f3-8fbf-fa1065be0501",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:196bcf06-8749-4d85-8389-1fa4ec01f30c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:7cc33417-fa21-457d-80c8-bedb894e61cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 186,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nhnRAZ9i3G3_-cYEj5bCv",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:70fec54d-50c0-4db1-8eb6-449bfa2c645a"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:d3511200-a880-4a0f-b5b3-de87ee18fc95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:453ce6aa-d226-4d5a-8e1e-5fba6c389a7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:9f168757-a3e4-4dbe-814a-86982d340581",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:271f7390-3126-44ad-9bce-bd65056fc196",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:d4d05189-ace7-4d06-986c-7bc7991801be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:c05f01a6-f5e5-4c10-bdfc-bc7ad1b14ad7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:3fd3b66d-228f-4eb2-a35f-2c172e4fd445",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:edca13d4-5d0c-44d3-b5ff-de830102e0b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:50a4591c-aa86-4b37-a399-5910ea538866",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:dadf680e-3467-41bd-b82e-bdbeab12e838",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:309b81bd-eca9-4c03-9146-a733116364b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:e8794851-a976-4c56-a8a1-22e860f50bbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:bc3bfd1f-d50f-4525-988b-cbb3583b4c94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:17fb9405-07b5-4855-8095-ccf4aacceec6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:cf39252c-b5e9-4d57-a623-847d5653ef2d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1090,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nhnRAZ9i3G3_-cYEj5bCv",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:208480ce-11cf-4074-a7b4-2bc789273cac"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:84afe9ea-d9e6-4bc3-a084-5e4a109cc6ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:fe0aecfa-2dad-46f8-a667-6372278bcf7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:9b9c8f6e-e371-4f3d-8afb-ec92dc8078aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:7f3f848f-d556-4cb7-a0b2-9333a7b801b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:d24c1f07-7fd5-453a-af04-445b880ada5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:7ef4f739-5667-44c0-b04f-b32b7f903b83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:0f5fe38b-4b5a-4dee-828e-472a21abcb11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:4cb65fd6-36d2-4007-91c4-74de1c536684",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:2ef527b0-dcf1-4b51-9070-3ab55c5a6d7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:aca8ad47-cfee-458b-94e6-008743573df9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:cb1f862d-d0d8-436e-8922-85dfb83568f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:31e74729-27db-4021-beb5-b2ba7d461c01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:16d66f1a-ba84-472a-a097-6d2dc7e5d8b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:4be37939-308a-4744-83cc-083a44a391b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:6de3e827-5767-4c17-8028-3839ef22ec6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 450,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nhnRAZ9i3G3_-cYEj5bCv",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:84a13140-95cd-464d-88ae-3f9b71d39103"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:8e91dc31-c530-427e-ab48-a50aee3644d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:67eb6467-f90c-416a-bbdf-e2352e92b0bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:7fc70bd2-5209-4c6d-a41d-8ea9ae6dbb98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:81810c09-38fd-4868-ae2c-63dd8ffa362e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:147:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:75a88ed3-685a-4b23-a753-d245b617ae5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:71185b3d-aaa2-42f7-8279-69bd3db7f759",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:d5072a76-69c5-4ffd-aa9b-23fd4129468c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:65a4a54b-50cd-42bc-b1f6-20be7675238e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:e1b4f469-f2a3-442e-80d4-593d8c2d9f52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:df89710d-fb80-4e6b-adc2-8e74ff8074be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:9ceca9d9-52d7-46d9-b1aa-7374f25d506d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:c33f7ea7-217d-4bc4-ae42-43a00b52c305",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:272be697-22c0-4cb4-9bf9-7b253982236e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:3c17a471-1a82-4c47-8295-a53dfad6de88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:f1126b7d-812b-4ca9-b9c2-58b61c85d072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 181,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nhnRAZ9i3G3_-cYEj5bCv",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:f4150125-eb39-450b-a45f-0b7577a9b5ae"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:c3973271-2a69-494f-b8a7-8ccab953dfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:df178a85-6635-4ead-9c76-a9a5eeec6e4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:c7bbbc50-9898-488e-92cf-9f5d2b11174e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:99132d0f-ed70-4196-b147-208afa64118a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:dd9e52b3-305c-41ba-9988-61442bef10f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:4f93a634-97a2-4b49-85d3-fed252fe9f78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:7bc771dd-b388-4e4e-8b16-de57ca79797f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:ea9f2328-5f72-4857-a09e-7ad5b7f12060",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:e46de0d8-ebc9-43e9-87b8-c6f058d9a5a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:90831dd0-b259-41b5-b676-82a9d1eedba7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:8e9276c3-2158-4504-95ad-a2fc58233f50",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:5d41297f-fd9e-4239-b2dc-650ec088ae40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:128dc53f-2ec3-4cf5-aae4-9740ad77f858",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:33d0ecc3-d3d6-4765-bf80-c2b31c63c47b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:86b290c9-5176-4dca-85f7-da4365dda219",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 856,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nhnRAZ9i3G3_-cYEj5bCv",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:26ea62ea-24f2-4a30-ae76-aa29a40f60c8"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:fbf169a3-bc0e-42a4-9f94-6621beba0172",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:6cd5ed60-7ad9-4296-8bfb-c81bef052467",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:a843cf55-8586-4cc7-bbe8-7ccca8e50b8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:d3511200-a880-4a0f-b5b3-de87ee18fc95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:84afe9ea-d9e6-4bc3-a084-5e4a109cc6ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:8e91dc31-c530-427e-ab48-a50aee3644d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:c3973271-2a69-494f-b8a7-8ccab953dfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:d806c670-2347-40fd-ad78-84cb8feda795",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:8878cad5-0581-47b2-a4b2-5a5dba73c5f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:453ce6aa-d226-4d5a-8e1e-5fba6c389a7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:fe0aecfa-2dad-46f8-a667-6372278bcf7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:67eb6467-f90c-416a-bbdf-e2352e92b0bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:df178a85-6635-4ead-9c76-a9a5eeec6e4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:ac5dab04-96ff-4806-b46f-6823b269ead2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:381bce83-babf-4cc6-affb-c7c888efd505",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:9f168757-a3e4-4dbe-814a-86982d340581",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:9b9c8f6e-e371-4f3d-8afb-ec92dc8078aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:7fc70bd2-5209-4c6d-a41d-8ea9ae6dbb98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:c7bbbc50-9898-488e-92cf-9f5d2b11174e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:993a1ca1-e0f9-48dc-9a5f-601449b2d60b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:f807177f-8011-45dc-91d7-4006e443e41a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:271f7390-3126-44ad-9bce-bd65056fc196",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:7f3f848f-d556-4cb7-a0b2-9333a7b801b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:81810c09-38fd-4868-ae2c-63dd8ffa362e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:147:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:99132d0f-ed70-4196-b147-208afa64118a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:cd8e435b-2890-4901-95f9-5fe38cbd5f81",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:6f90f687-b180-4215-8ab1-ef715236e9ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:d4d05189-ace7-4d06-986c-7bc7991801be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:d24c1f07-7fd5-453a-af04-445b880ada5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:75a88ed3-685a-4b23-a753-d245b617ae5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:dd9e52b3-305c-41ba-9988-61442bef10f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:d557facc-adda-4d74-a3c9-a1ae9eb75975",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:4eb7e902-b838-4f9b-8f38-8f7ed2440671",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:c05f01a6-f5e5-4c10-bdfc-bc7ad1b14ad7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:7ef4f739-5667-44c0-b04f-b32b7f903b83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:71185b3d-aaa2-42f7-8279-69bd3db7f759",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:4f93a634-97a2-4b49-85d3-fed252fe9f78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:1a9269cb-976b-48fb-b7a5-f33bbd3abbdf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:edd89141-7ffd-4c09-984a-bb5f339984b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:3fd3b66d-228f-4eb2-a35f-2c172e4fd445",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:0f5fe38b-4b5a-4dee-828e-472a21abcb11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:d5072a76-69c5-4ffd-aa9b-23fd4129468c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:7bc771dd-b388-4e4e-8b16-de57ca79797f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:0da559dd-87d0-467f-88db-c19582d772c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:f71c9173-e4eb-4626-887c-c15292826f93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:edca13d4-5d0c-44d3-b5ff-de830102e0b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:4cb65fd6-36d2-4007-91c4-74de1c536684",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:65a4a54b-50cd-42bc-b1f6-20be7675238e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:ea9f2328-5f72-4857-a09e-7ad5b7f12060",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:18ca95ed-4075-403d-8deb-52b79fafa7c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:1bc75589-04e9-4f6b-ab88-25121c039a77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:50a4591c-aa86-4b37-a399-5910ea538866",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:2ef527b0-dcf1-4b51-9070-3ab55c5a6d7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:e1b4f469-f2a3-442e-80d4-593d8c2d9f52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:e46de0d8-ebc9-43e9-87b8-c6f058d9a5a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:161bde70-8787-431a-94c9-f296f24f29e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:2e6be67a-226b-45ce-bb71-6c13a9056d0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:dadf680e-3467-41bd-b82e-bdbeab12e838",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:aca8ad47-cfee-458b-94e6-008743573df9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:df89710d-fb80-4e6b-adc2-8e74ff8074be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:90831dd0-b259-41b5-b676-82a9d1eedba7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:91df0a41-b1e7-4463-adee-c5a447c22f70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:4150ea8b-589a-4c7d-ba9f-36f294ee5838",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:309b81bd-eca9-4c03-9146-a733116364b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:cb1f862d-d0d8-436e-8922-85dfb83568f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:9ceca9d9-52d7-46d9-b1aa-7374f25d506d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:8e9276c3-2158-4504-95ad-a2fc58233f50",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:def09613-fad0-4766-a973-3082d59b8c7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:9f328742-aff4-4e4c-ac5b-4a9fa33fc242",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:e8794851-a976-4c56-a8a1-22e860f50bbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:31e74729-27db-4021-beb5-b2ba7d461c01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:c33f7ea7-217d-4bc4-ae42-43a00b52c305",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:5d41297f-fd9e-4239-b2dc-650ec088ae40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:6e99d680-5423-4a9f-95e8-bf0363b47a60",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:4002c44e-8814-45f3-8fbf-fa1065be0501",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:bc3bfd1f-d50f-4525-988b-cbb3583b4c94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:16d66f1a-ba84-472a-a097-6d2dc7e5d8b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:272be697-22c0-4cb4-9bf9-7b253982236e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:128dc53f-2ec3-4cf5-aae4-9740ad77f858",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:f141a91b-4fff-49d2-b873-ce3d5124e57b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:196bcf06-8749-4d85-8389-1fa4ec01f30c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:17fb9405-07b5-4855-8095-ccf4aacceec6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:4be37939-308a-4744-83cc-083a44a391b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:3c17a471-1a82-4c47-8295-a53dfad6de88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:33d0ecc3-d3d6-4765-bf80-c2b31c63c47b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "o7YYtxnSDL7lZImDbanr2",
              "ctx": null,
              "_testId": "urn:uuid:03f9fab5-b60b-4727-892c-420b6cc99aa1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_gQpSzQE_Y54SRpuIir-p",
              "ctx": null,
              "_testId": "urn:uuid:7cc33417-fa21-457d-80c8-bedb894e61cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "hlEmViWzxxRk1kKTOMAak",
              "ctx": null,
              "_testId": "urn:uuid:cf39252c-b5e9-4d57-a623-847d5653ef2d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "qif05t4kQck8Jws7ldAxc",
              "ctx": null,
              "_testId": "urn:uuid:6de3e827-5767-4c17-8028-3839ef22ec6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zWlXpD136iubNGcfIEAb6",
              "ctx": null,
              "_testId": "urn:uuid:f1126b7d-812b-4ca9-b9c2-58b61c85d072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "EkBDGy2nB-k0gpzIVaRG1",
              "ctx": null,
              "_testId": "urn:uuid:86b290c9-5176-4dca-85f7-da4365dda219",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:214eba1a-413e-4a7e-8aa1-50556f17485e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:5cea7b1d-605f-47be-a910-009a899de096",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:17664b28-07ca-4e9f-9cd3-937050f31142",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:6b272d83-5789-4e3c-953e-c23abe47407d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:14d260b9-feea-4fb5-82ac-b8dee04d991f\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-06-09T05:05:35Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:35Z\",\"proofValue\":\"zr3DcZkXkxzg1yaQysRcbvzebsK127FPE45VMfxEYv7VxrHxCGeNpriY16Jg6aPSzvQnfr2QXFysexvXuo7kNoGb\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:6bd9e248-11a5-43fe-b831-0bf220a0f600",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:c56d49ca-f6cc-4cec-b5eb-30090841817a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:8e8ab46e-583f-47b0-94e4-ce4a35b24931",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OapkyhrKIfxL848Rq_qPg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:0051c803-f200-4ecb-add1-08db1873619d"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:623247d8-fb01-4973-a05b-37f2bacbb5ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:7762efe9-f739-49fc-a6dd-91b82eb0e1b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:2b3300b6-bf3b-4a8d-8749-32d658eb59f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:8217f8ce-2de3-4e79-b413-d26356e989bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Invalid signature."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:85941a63-526e-400d-998e-d81048dc7459\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-06-09T05:05:35Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:36Z\",\"proofValue\":\"zprZhAusTLHAZvTvMEcYxnD6x7P6SbkUVADEtj7p53i4uTFghof2w7MyMDL97ramEnb3FQkqQjrxJ4WbBw5ELPDiTxxHhtJYvdF7zFjt4KjYgxy56AnZRGbH3Cao8qi9h1bG\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:54140480-fcd3-46b0-a9f1-d777b09909df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:84c8c1fc-643e-40e3-9651-1fc0e7719c58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:c223d260-d4f5-4fd5-9f7a-e4f5812e0681",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 991,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OapkyhrKIfxL848Rq_qPg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:e8d78652-7b18-42b4-84bb-01214d0592b9"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:99450ae3-9b82-4c7a-a08e-60ef229883e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:78868ee1-26b4-4f2a-9266-9dba175c11af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:df94a9e5-6124-4044-b043-4b7f3a7dc683",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:754a1c64-282b-44e8-8ff0-f6da472e2832",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:b088942d-7023-41e4-86ec-18481b7e35b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:664897e4-0509-48f2-9a7d-e9c315377479",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:d6fc7bf3-8e99-4037-860b-e7add069ff01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OapkyhrKIfxL848Rq_qPg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:9305726d-0602-42a5-8ff8-f1da58cc9a7d"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:220c9b86-84fc-41ab-a507-6a953b6f54ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:37601c25-d217-446a-9e52-65c6127e1090",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:614d27c8-3d8b-46ff-b8ed-42c4598fb945",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:7aa4be6e-f9e0-44c5-837f-0acb3a2cc103",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:412d8eb1-a82f-44fe-a797-f51d665407b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:727d27f5-94f6-4567-b239-8a44463042ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:1b44e6c3-7536-45fc-9203-f4e3a81ba518",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 280,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OapkyhrKIfxL848Rq_qPg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:d71db075-037d-4542-a7ff-13fe2092448f"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:37036413-108f-4cca-a56b-d0b5a01c7526",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:9f447b16-58be-41dd-99e0-3a4f193c385e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]",
                "showDiff": true,
                "actual": "[\n  \"ecdsa-2019\"\n]",
                "expected": "[\n  \"ecdsa-rdfc-2019\"\n  \"ecdsa-jcs-2019\"\n]",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:104:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:57e6cef1-3693-43ba-8aa2-2f81128eed3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6159,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:119:48)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:1add3fe3-4dc4-44df-999c-2558732f3e45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:b2184d31-9ec9-43c7-9453-600659b7ee9d\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-06-09T05:05:37Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4FLvJ9UY25FuH6uvrACw8j9MVFsDcAyF9XqjJrWTNufSwZTbTyNKdagPEDwpi78ZnYKWhgnkf6UjKKzgLQWxSrvJ\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-06-09T05:05:37.414Z\",\"cryptosuite\":\"ecdsa-2019\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:7dc39bf5-4f91-4420-b97c-2f033b78e7f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:5809d629-6e79-4e13-b00d-6cefbcd88d05",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6162,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:4de061a9-1bc8-4bd3-8443-a11008b08d32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OapkyhrKIfxL848Rq_qPg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:ec481b7b-9be0-4051-a1e2-1b76a57d62b1"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:87cc1bcb-4e0c-49c8-9e96-f0c52861375b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:8cbe08d3-92f8-45f7-852e-223de4797566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:4df22885-bc05-466a-b151-8e0cc58ea94d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:8bb258a7-f911-43c9-866c-d317b1c70bc5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:0c092dde-0ea7-4ec0-bebd-d9a4d31932b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:3acc1e36-a735-4c03-9422-bcc10089ad9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:0c9f45c9-03a9-42d2-a57b-dfb8d6aa27d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OapkyhrKIfxL848Rq_qPg",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:82c08732-68fb-45bf-bcb4-c1decf2e7862"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ie69d2r-ese_irwVy7BFt",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:7ef67453-9aa1-45bb-aa55-3867a8eb8672",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "The (proof) type property MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:214eba1a-413e-4a7e-8aa1-50556f17485e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:623247d8-fb01-4973-a05b-37f2bacbb5ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:99450ae3-9b82-4c7a-a08e-60ef229883e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:220c9b86-84fc-41ab-a507-6a953b6f54ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:37036413-108f-4cca-a56b-d0b5a01c7526",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:87cc1bcb-4e0c-49c8-9e96-f0c52861375b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:5cea7b1d-605f-47be-a910-009a899de096",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:7762efe9-f739-49fc-a6dd-91b82eb0e1b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:78868ee1-26b4-4f2a-9266-9dba175c11af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:37601c25-d217-446a-9e52-65c6127e1090",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:9f447b16-58be-41dd-99e0-3a4f193c385e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]",
                "showDiff": true,
                "actual": "[\n  \"ecdsa-2019\"\n]",
                "expected": "[\n  \"ecdsa-rdfc-2019\"\n  \"ecdsa-jcs-2019\"\n]",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected [ 'ecdsa-2019' ] to contain one of [ 'ecdsa-rdfc-2019', 'ecdsa-jcs-2019' ]\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:104:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:8cbe08d3-92f8-45f7-852e-223de4797566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:17664b28-07ca-4e9f-9cd3-937050f31142",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:2b3300b6-bf3b-4a8d-8749-32d658eb59f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:df94a9e5-6124-4044-b043-4b7f3a7dc683",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:614d27c8-3d8b-46ff-b8ed-42c4598fb945",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:57e6cef1-3693-43ba-8aa2-2f81128eed3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6159,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected VC from issuer SpruceID to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof: expected undefined to exist\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:119:48)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:4df22885-bc05-466a-b151-8e0cc58ea94d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify with a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:6b272d83-5789-4e3c-953e-c23abe47407d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:14d260b9-feea-4fb5-82ac-b8dee04d991f\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-06-09T05:05:35Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:35Z\",\"proofValue\":\"zr3DcZkXkxzg1yaQysRcbvzebsK127FPE45VMfxEYv7VxrHxCGeNpriY16Jg6aPSzvQnfr2QXFysexvXuo7kNoGb\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:8217f8ce-2de3-4e79-b413-d26356e989bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Invalid signature."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:85941a63-526e-400d-998e-d81048dc7459\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-06-09T05:05:35Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:36Z\",\"proofValue\":\"zprZhAusTLHAZvTvMEcYxnD6x7P6SbkUVADEtj7p53i4uTFghof2w7MyMDL97ramEnb3FQkqQjrxJ4WbBw5ELPDiTxxHhtJYvdF7zFjt4KjYgxy56AnZRGbH3Cao8qi9h1bG\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:754a1c64-282b-44e8-8ff0-f6da472e2832",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:7aa4be6e-f9e0-44c5-837f-0acb3a2cc103",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:1add3fe3-4dc4-44df-999c-2558732f3e45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"}}],\"id\":\"urn:uuid:b2184d31-9ec9-43c7-9453-600659b7ee9d\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-06-09T05:05:37Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4FLvJ9UY25FuH6uvrACw8j9MVFsDcAyF9XqjJrWTNufSwZTbTyNKdagPEDwpi78ZnYKWhgnkf6UjKKzgLQWxSrvJ\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-06-09T05:05:37.414Z\",\"cryptosuite\":\"ecdsa-2019\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:145:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:8bb258a7-f911-43c9-866c-d317b1c70bc5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:6bd9e248-11a5-43fe-b831-0bf220a0f600",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:54140480-fcd3-46b0-a9f1-d777b09909df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:b088942d-7023-41e4-86ec-18481b7e35b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:412d8eb1-a82f-44fe-a797-f51d665407b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:7dc39bf5-4f91-4420-b97c-2f033b78e7f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:0c092dde-0ea7-4ec0-bebd-d9a4d31932b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:c56d49ca-f6cc-4cec-b5eb-30090841817a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:84c8c1fc-643e-40e3-9651-1fc0e7719c58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:664897e4-0509-48f2-9a7d-e9c315377479",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:727d27f5-94f6-4567-b239-8a44463042ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:5809d629-6e79-4e13-b00d-6cefbcd88d05",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6162,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:3acc1e36-a735-4c03-9422-bcc10089ad9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G_qi2isSMSavBUCaJTCfv",
              "ctx": null,
              "_testId": "urn:uuid:8e8ab46e-583f-47b0-94e4-ce4a35b24931",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "YBQyp3lgKmQaSrWmDWCtT",
              "ctx": null,
              "_testId": "urn:uuid:c223d260-d4f5-4fd5-9f7a-e4f5812e0681",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "HfcJOaCFcxAmVx8GsDqrQ",
              "ctx": null,
              "_testId": "urn:uuid:d6fc7bf3-8e99-4037-860b-e7add069ff01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "B27S6wO4bGGi2G_T58Jr5",
              "ctx": null,
              "_testId": "urn:uuid:1b44e6c3-7536-45fc-9203-f4e3a81ba518",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "dpgs7IPEQi7B0unNfcs5T",
              "ctx": null,
              "_testId": "urn:uuid:4de061a9-1bc8-4bd3-8443-a11008b08d32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Tu_vWJ1XwLo4JNWjDh2QL",
              "ctx": null,
              "_testId": "urn:uuid:0c9f45c9-03a9-42d2-a57b-dfb8d6aa27d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:b0f1892b-2936-42bc-a73a-d30e102e2a5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:9b8f8139-7346-472c-8d23-a533a3b09038",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:e511adbc-f2b7-4284-8405-7b0ebc0b411d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:c6ca4623-7ce9-4566-bbb4-e9dbaaaa4427",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:c67288ae-4e34-415a-b97c-cba0c6a02610",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6403,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:93a33049-4a4e-470c-b85f-71fdb007e240",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:1811f483-71d2-4db7-8ea6-691f89c1dce5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "CdIqA6LVETzjdC1EAe2yM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:4f050f46-9249-4ca6-be6e-7d64dc374042"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:e9bf01f9-2aea-45a9-b800-e3992f5aff85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:bf801828-7686-4871-8862-f4fc31154615",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:4a8912d6-d897-4928-8585-37d005263414",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:2ea9567b-6ebf-4022-b814-e32457c5ecaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:b29b9189-ede7-4f8a-afd3-4fb1a53d5463",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6650,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:a8c90cae-3746-484a-8e0f-aaeefae8c7f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:716dc025-9ef0-40fc-9895-fb34de7ea879",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  vcVersion\n                });\n                // VCs can have multiple proofs so account for that\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                const verificationMethods = proofs.map(\n                  proof => proof.verificationMethod);\n                for(const verificationMethod of verificationMethods) {\n                  const verificationMethodDocument = await documentLoader({\n                    url: verificationMethod\n                  });\n                  verificationMethodDocuments.push(verificationMethodDocument);\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "CdIqA6LVETzjdC1EAe2yM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:f0847585-dba3-489e-b966-b7feb30f9d18"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ie69d2r-ese_irwVy7BFt",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:67289c18-f24b-4b2e-8b6e-a089d06a25a6",
      "columns": [
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384"
      ],
      "rows": [
        {
          "id": "The (proof) type property MUST be DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:b0f1892b-2936-42bc-a73a-d30e102e2a5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The (proof) type property MUST be DataIntegrityProof.",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.map(p => p?.type).should.contain(\n                    'DataIntegrityProof',\n                    'Expected at least one proof to have type ' +\n                    'DataIntegrityProof');\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:e9bf01f9-2aea-45a9-b800-e3992f5aff85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The (proof) type property MUST be DataIntegrityProof."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:9b8f8139-7346-472c-8d23-a533a3b09038",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019.",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n                expect(\n                  proofs.map(proof => proof?.cryptosuite),\n                  'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".')\n                  .to.contain.oneOf(cryptosuite);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:bf801828-7686-4871-8862-f4fc31154615",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The cryptosuite property of the proof MUST be ecdsa-rdfc-2019 or ecdsa-jcs-2019."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:e511adbc-f2b7-4284-8405-7b0ebc0b411d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-rdfc-2019');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-rdfc-2019\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                // now test the encoding which is bs58 for this suite\n                expect(\n                  shouldBeBs58(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs58 encoded.'\n                ).to.be.true;\n                // proofBytes will be exactly 64 bytes in size for a P-256 key,\n                // and 96 bytes in size for a P-384 key.\n                const expectedLength = proofLengths[keyType];\n                await shouldHaveByteLength(_proof.proofValue, expectedLength);\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:4a8912d6-d897-4928-8585-37d005263414",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify with a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:c6ca4623-7ce9-4566-bbb4-e9dbaaaa4427",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify with a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  await verificationSuccess({\n                    credential: issuedVc,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:2ea9567b-6ebf-4022-b814-e32457c5ecaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify with a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:c67288ae-4e34-415a-b97c-cba0c6a02610",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6403,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:b29b9189-ede7-4f8a-afd3-4fb1a53d5463",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6650,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:93a33049-4a4e-470c-b85f-71fdb007e240",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:a8c90cae-3746-484a-8e0f-aaeefae8c7f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_6jOZvi23hf_ILMjs3H9j",
              "ctx": null,
              "_testId": "urn:uuid:1811f483-71d2-4db7-8ea6-691f89c1dce5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "sVT56-pEuztupiUk1geoC",
              "ctx": null,
              "_testId": "urn:uuid:716dc025-9ef0-40fc-9895-fb34de7ea879",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:6c078966-a418-4392-be61-b7d7f0d09da3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:a850e433-2c47-4b20-af95-5a21d8f0cd02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:5b4347dc-350f-42c9-ad01-a67fef730343",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6741,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:4a481df9-7691-4709-bbc8-d38b549e156f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:586b7912-5259-4bcb-b3a6-31f2d4bb2a88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6801,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:c79e4d17-38d0-4b89-8378-9d28f294eb64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:6b0c93db-bcc9-4f55-aa50-8f8fb41ec72a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:03a5c7b2-a2e2-4261-947d-c02273a46534",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:b0ff3deb-efec-454d-b874-4c27ce892ab9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7090,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:50af5a2a-89bb-4168-9783-af57b5e22de8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:0bff4f9c-d9a3-4247-a641-9e62d646f877",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7208,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:e63ba0fb-86be-4686-bca2-bd42790b2a07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:cc72d8ad-d3fb-4786-9117-2467f0c708c7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:cdc370fb-ea1f-4fc9-8dd7-fe20c1538f91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:e9ac8d91-04bd-43af-b249-a42127cb97ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "HE8IfY9sHA4OSlFjtZwK2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:7bb7fce4-7363-4e4c-a155-d72b8b1de28e"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:a0ee1a6c-63dc-4da8-a19e-f432d00084e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 214,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:f8ec72bd-e270-43e0-bb2e-5624d9134c55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:0d37b021-8681-4411-b079-b6356466b2f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:0ea0dd84-7c19-47c2-9a06-9f7ebaf313c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:35eb351e-cda0-470a-ac57-2f2c743a9913",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:f3c5bd48-b83c-4e0b-8808-5a010f963ec5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8037,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:191d0bdb-a4fc-49f7-8a31-bfb7d73dae5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:fb005a51-d07c-4a68-b541-62fc35856fa7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:cb9a1531-bf80-4ab2-8744-e6e1d4ae8d17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '7064a553200a0b5935a9fe6ec7c71c05' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '7064a553200a0b5935a9fe6ec7c71c05' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:fb2cb257-5079-4dc6-a766-d7d93686c616",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8274,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:6442114f-ab0d-4874-aa88-1111c1f611da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:be710974-98d1-43d6-8046-ccd224bb3564",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '719999fec40d914a3d073e4e5ca1cfbf' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '719999fec40d914a3d073e4e5ca1cfbf' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:60eab9ba-ca39-4e63-9d6c-6de89ea50830",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:4862d041-0c9d-43b5-9592-b09704ca03bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:cb71531e-5c56-4806-94d1-807a9dbf93a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8573,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "HE8IfY9sHA4OSlFjtZwK2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:be1463af-aadd-4cbc-848f-534d1f603d92"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:d4f17bef-5575-4700-a908-6179ff3353bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:d8564e1c-0a8c-4ffd-b8a2-fbfc6b71eee3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:dfe01365-4cac-4f21-97d2-68162717aff1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:79345027-5425-4604-888f-0948bc6fa78d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:e1982f31-fa46-4950-af9b-0370a49e4659",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:9c68195e-f600-4b77-afd4-19cd0784f020",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:06f1724a-9b72-4485-a228-280f88c9699e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:62f28cc5-2b38-4cb2-ba9e-f5aeae1ca3de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8900,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:957fdf44-3f7b-40c8-bf40-1be6652313ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8939,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:561a49fb-2d4b-405d-a749-12a0b92a1ea3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:63f308cc-1ec6-4989-955f-55b627cd5952",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9015,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:6f900104-56fa-4b89-a9e2-a3ca2e5e01ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:c1b8c4b4-29ba-4be6-8a1e-518798df613c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:32f83077-53f4-4331-b4d6-0f29d491adbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:d57ce387-3870-4df6-b217-08eda33fca67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9174,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "HE8IfY9sHA4OSlFjtZwK2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:d3c1879e-d327-47b7-998b-7a7fd4bd306f"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:964db9f5-d2d4-410f-b7d9-bf1d22111b2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:26bc07d8-aa11-486c-adb7-d8e317b48392",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:1ab4f622-4743-43fb-81a6-565e6519da44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:4f59996c-1fe0-4ee8-b936-239685676eda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:0279a565-bae3-47d3-a7f9-15e0485d3f45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:5935e4f4-2bcd-42a8-807d-8d2073a4d8d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:39259240-f50a-47f8-96b9-dd0c214a15a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:c0ee17ef-cf7b-40a3-8d2a-f7dc18372fe0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:3331e2a3-4627-419b-9887-d8e501b8595c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:a47f87d3-5d3c-434c-9a2b-0ecd3d1f5fd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:61a9bb88-673d-49a6-b8e3-ed26e2b5ea80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10353,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:d4d3c146-644c-424c-b027-9f74bb25d404",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:4d48e582-5e0d-43c5-8537-66a2b43b4976",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:f6da9377-e66b-4095-8f02-6b653650c58d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:9a06a49f-de19-49ff-afae-8f15d77970b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10809,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "HE8IfY9sHA4OSlFjtZwK2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:ea5242b7-3986-493c-b4e2-75219ad8ad26"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:c9302a07-56f3-4996-a655-4ea7fb58ad4a",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:6c078966-a418-4392-be61-b7d7f0d09da3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:a0ee1a6c-63dc-4da8-a19e-f432d00084e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 214,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:d4f17bef-5575-4700-a908-6179ff3353bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:964db9f5-d2d4-410f-b7d9-bf1d22111b2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:a850e433-2c47-4b20-af95-5a21d8f0cd02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:f8ec72bd-e270-43e0-bb2e-5624d9134c55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:d8564e1c-0a8c-4ffd-b8a2-fbfc6b71eee3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:26bc07d8-aa11-486c-adb7-d8e317b48392",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:5b4347dc-350f-42c9-ad01-a67fef730343",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6741,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:0d37b021-8681-4411-b079-b6356466b2f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:dfe01365-4cac-4f21-97d2-68162717aff1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:1ab4f622-4743-43fb-81a6-565e6519da44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:4a481df9-7691-4709-bbc8-d38b549e156f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:0ea0dd84-7c19-47c2-9a06-9f7ebaf313c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:79345027-5425-4604-888f-0948bc6fa78d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:4f59996c-1fe0-4ee8-b936-239685676eda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:586b7912-5259-4bcb-b3a6-31f2d4bb2a88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6801,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:35eb351e-cda0-470a-ac57-2f2c743a9913",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:e1982f31-fa46-4950-af9b-0370a49e4659",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:0279a565-bae3-47d3-a7f9-15e0485d3f45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:c79e4d17-38d0-4b89-8378-9d28f294eb64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:f3c5bd48-b83c-4e0b-8808-5a010f963ec5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8037,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:9c68195e-f600-4b77-afd4-19cd0784f020",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:5935e4f4-2bcd-42a8-807d-8d2073a4d8d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:6b0c93db-bcc9-4f55-aa50-8f8fb41ec72a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:191d0bdb-a4fc-49f7-8a31-bfb7d73dae5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:06f1724a-9b72-4485-a228-280f88c9699e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:39259240-f50a-47f8-96b9-dd0c214a15a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:03a5c7b2-a2e2-4261-947d-c02273a46534",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:fb005a51-d07c-4a68-b541-62fc35856fa7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:62f28cc5-2b38-4cb2-ba9e-f5aeae1ca3de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8900,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:c0ee17ef-cf7b-40a3-8d2a-f7dc18372fe0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:b0ff3deb-efec-454d-b874-4c27ce892ab9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7090,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:cb9a1531-bf80-4ab2-8744-e6e1d4ae8d17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '7064a553200a0b5935a9fe6ec7c71c05' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '7064a553200a0b5935a9fe6ec7c71c05' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:957fdf44-3f7b-40c8-bf40-1be6652313ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8939,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:3331e2a3-4627-419b-9887-d8e501b8595c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:50af5a2a-89bb-4168-9783-af57b5e22de8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:fb2cb257-5079-4dc6-a766-d7d93686c616",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8274,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:561a49fb-2d4b-405d-a749-12a0b92a1ea3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:a47f87d3-5d3c-434c-9a2b-0ecd3d1f5fd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:0bff4f9c-d9a3-4247-a641-9e62d646f877",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7208,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:6442114f-ab0d-4874-aa88-1111c1f611da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:63f308cc-1ec6-4989-955f-55b627cd5952",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9015,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:61a9bb88-673d-49a6-b8e3-ed26e2b5ea80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10353,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:e63ba0fb-86be-4686-bca2-bd42790b2a07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:be710974-98d1-43d6-8046-ccd224bb3564",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '719999fec40d914a3d073e4e5ca1cfbf' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:39 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '719999fec40d914a3d073e4e5ca1cfbf' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:6f900104-56fa-4b89-a9e2-a3ca2e5e01ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:d4d3c146-644c-424c-b027-9f74bb25d404",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:cc72d8ad-d3fb-4786-9117-2467f0c708c7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:60eab9ba-ca39-4e63-9d6c-6de89ea50830",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:c1b8c4b4-29ba-4be6-8a1e-518798df613c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:4d48e582-5e0d-43c5-8537-66a2b43b4976",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:cdc370fb-ea1f-4fc9-8dd7-fe20c1538f91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:4862d041-0c9d-43b5-9592-b09704ca03bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:32f83077-53f4-4331-b4d6-0f29d491adbf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:f6da9377-e66b-4095-8f02-6b653650c58d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "yMvaz7dzmSv3CRetkrkFE",
              "ctx": null,
              "_testId": "urn:uuid:e9ac8d91-04bd-43af-b249-a42127cb97ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "AiPihmt56m9IcEMIpUrO2",
              "ctx": null,
              "_testId": "urn:uuid:cb71531e-5c56-4806-94d1-807a9dbf93a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8573,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "NcVqZByLaCOqNwwVAr3-C",
              "ctx": null,
              "_testId": "urn:uuid:d57ce387-3870-4df6-b217-08eda33fca67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9174,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "zuOf1BliHcrM_QxTTbGck",
              "ctx": null,
              "_testId": "urn:uuid:9a06a49f-de19-49ff-afae-8f15d77970b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10809,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10923,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 33,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 10956,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 60,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11016,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 79,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11094,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 192,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11287,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 103,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11390,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 104,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11494,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 245,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11739,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 93,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11832,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 89,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 11921,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 88,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12008,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 87,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12096,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 198,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12294,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 45,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12339,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 142,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12481,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 47,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12528,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 47,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12575,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 127,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12702,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 128,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12830,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 127,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n          issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['1.1'].document,\n            vcVersion: '1.1'\n          });\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xh04DK0m4PRJJdai7m9Pk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12956,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 126,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:fa605526-12fc-4f14-8231-6bb624bc52be",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:87a1582f-5748-4d37-bad0-dc1ec674fe32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13083,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:bad38ab7-16ed-49eb-8578-228b2f200ef2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 211,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:b8870799-6cfa-4432-a9ac-6f89eefa77aa",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256",
                        "issuanceDate": "2024-06-09T05:05:42Z",
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:05:42Z",
                          "proofValue": "z45BTH5aC7KEcc9B4ZQL8LgEu6AAQ3AZAvvcHkQp4eEXhMBwr71T4o5vkea75PbG7nfzZk5vcJLWxWvknHXVqEsY8"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:b8870799-6cfa-4432-a9ac-6f89eefa77aa\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-06-09T05:05:42Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:42Z\",\"proofValue\":\"z45BTH5aC7KEcc9B4ZQL8LgEu6AAQ3AZAvvcHkQp4eEXhMBwr71T4o5vkea75PbG7nfzZk5vcJLWxWvknHXVqEsY8\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/data-integrity/v2",
                            "https://w3id.org/security/multikey/v1"
                          ],
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:05:42Z",
                          "proofValue": "z45BTH5aC7KEcc9B4ZQL8LgEu6AAQ3AZAvvcHkQp4eEXhMBwr71T4o5vkea75PbG7nfzZk5vcJLWxWvknHXVqEsY8"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/multikey/v1",
                          "id": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "Multikey",
                          "controller": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "publicKeyMultibase": "zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:b8870799-6cfa-4432-a9ac-6f89eefa77aa",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:18406a6e-8365-4a16-b179-14a9e4f8db18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:785be7da-ac5e-4047-9ba1-0fb8307640c0\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256\",\"issuanceDate\":\"2024-06-09T05:05:42Z\",\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:42Z\",\"proofValue\":\"z5ieGvbngCA5sbr5oLWyvK3j5GrwgY2mwKSff5AVUfxytxA4beyYEERdWGadeyeCGwgS7DbEUH4hT3Gnc1nKKDUjg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:785be7da-ac5e-4047-9ba1-0fb8307640c0",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-256",
                        "issuanceDate": "2024-06-09T05:05:42Z",
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:05:42Z",
                          "proofValue": "z5ieGvbngCA5sbr5oLWyvK3j5GrwgY2mwKSff5AVUfxytxA4beyYEERdWGadeyeCGwgS7DbEUH4hT3Gnc1nKKDUjg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:61330c85-bb36-4f2c-a068-df6b4018a221",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "apicatalog.com: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:237ef94b-1b42-4bb5-8796-faea0d88c888",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14575,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 321,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:e41575b4-efef-4f01-b39f-f90691ae5c71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:0efce03f-d396-4f95-b256-11b066b28be5",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384",
                        "issuanceDate": "2024-06-09T05:05:42Z",
                        "proof": {
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:05:42Z",
                          "proofValue": "zAX57Q247nNQtWJEfvg2RD5Xp1DHcfs3VMa5XFG2kpmUiJ1wELkbjj6EkdJYCf8Zt6naGTk8xAXDWUGqAKAqLPvdorPECvsiZYq8ka6rksAZMJwzNtPnp9MXzpSE9vDrJ86U"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:0efce03f-d396-4f95-b256-11b066b28be5\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-rdfc-2019&curve=p-384\",\"issuanceDate\":\"2024-06-09T05:05:42Z\",\"proof\":{\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:42Z\",\"proofValue\":\"zAX57Q247nNQtWJEfvg2RD5Xp1DHcfs3VMa5XFG2kpmUiJ1wELkbjj6EkdJYCf8Zt6naGTk8xAXDWUGqAKAqLPvdorPECvsiZYq8ka6rksAZMJwzNtPnp9MXzpSE9vDrJ86U\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/data-integrity/v2",
                            "https://w3id.org/security/multikey/v1"
                          ],
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:05:42Z",
                          "proofValue": "zAX57Q247nNQtWJEfvg2RD5Xp1DHcfs3VMa5XFG2kpmUiJ1wELkbjj6EkdJYCf8Zt6naGTk8xAXDWUGqAKAqLPvdorPECvsiZYq8ka6rksAZMJwzNtPnp9MXzpSE9vDrJ86U"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:291:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:0efce03f-d396-4f95-b256-11b066b28be5",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "apicatalog.com: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:27a75c7e-f5e0-44af-9987-07abfe4187a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14971,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 223,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:594d8865-3216-4ef8-88d2-97f2f7a71f72",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15194,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:33f13884-d831-4b07-a1e9-54cc757a5e85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:47dc2de5-abbc-404d-84bd-0c709d184dd3\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ\",\"issuanceDate\":\"2024-06-09T05:05:43Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:43Z\",\"verificationMethod\":\"did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ#zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z31zsij76adjd8VM3TJPtsUyjTpupxMKRCBxhtJxDmnrKqMEAofa9ceQm7QG5oExc7dEqWQrkPsrLNyJDqyMJDHhH\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:47dc2de5-abbc-404d-84bd-0c709d184dd3",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ",
                        "issuanceDate": "2024-06-09T05:05:43Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:43Z",
                          "verificationMethod": "did:key:zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ#zDnaexu7dNiESVoqicP5bbbV2cPVMRhByztVFHKZ16tD1okXZ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z31zsij76adjd8VM3TJPtsUyjTpupxMKRCBxhtJxDmnrKqMEAofa9ceQm7QG5oExc7dEqWQrkPsrLNyJDqyMJDHhH"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:253be9b6-bbe0-4a65-93db-dd2b42639aba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:207c3787-7145-4813-964f-51c13db960e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:718bbf1e-437d-4d15-ad18-2667666ba582\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q\",\"issuanceDate\":\"2024-06-09T05:05:43Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:43Z\",\"verificationMethod\":\"did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q#z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zoK2hpwKJFCJodTATCLgYSGMAfhB9gdrR8c4L4Zu5mPHZ1ncXNU49fVR9JQ1GBRgF8AbQHiPEHiLtrfz43sZpkiwzT2dNTd5weMxBGRJ7Uu4GiLfD8J19YzEZCH5Hoot6Cuq\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:718bbf1e-437d-4d15-ad18-2667666ba582",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q",
                        "issuanceDate": "2024-06-09T05:05:43Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:43Z",
                          "verificationMethod": "did:key:z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q#z82LkyAawofXhS6sT7VvGgqevtCqTUydwVppGj8MEgX6jDPbMD6Wg5rNUnHrYRrhLz8dP8Q",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zoK2hpwKJFCJodTATCLgYSGMAfhB9gdrR8c4L4Zu5mPHZ1ncXNU49fVR9JQ1GBRgF8AbQHiPEHiLtrfz43sZpkiwzT2dNTd5weMxBGRJ7Uu4GiLfD8J19YzEZCH5Hoot6Cuq"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:f28412d2-e181-4569-aa49-62b166733211",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "SpruceID: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:f26ee3ee-4892-4ff3-b79e-62a11621bc34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"},\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\"}],\"id\":\"urn:uuid:e8ddc43a-b973-41f1-b217-c29f3d77a09b\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-06-09T05:05:43Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3rGgvPCut9h5bDGgufL7RNJ8SPSJW27JjUNyy4tA9x8ByrAxNusmfM2VX4VwybGETCrhoQcaPzRqeXMWzNipYybz\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-06-09T05:05:43.598Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            },
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential"
                          }
                        ],
                        "id": "urn:uuid:e8ddc43a-b973-41f1-b217-c29f3d77a09b",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-06-09T05:05:43Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3rGgvPCut9h5bDGgufL7RNJ8SPSJW27JjUNyy4tA9x8ByrAxNusmfM2VX4VwybGETCrhoQcaPzRqeXMWzNipYybz",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-06-09T05:05:43.598Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:cb3cd4f6-820b-44fb-8516-81118bb69ced",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15803,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:d11d3164-22d4-44a6-9add-7f8e9a8aa852",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:69b80bff-76c7-4ecf-95ec-422f102f3238",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15913,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:059ed4af-cfe9-442b-8477-d69f6a5abb24\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-06-09T05:05:43Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2PTXsi7y1xz6CPpQrwq8UEJga1ZxUVrikCMbdV6jhpMV7uw9ZEhuHLNT7BNv489DhV5LSgNVnkqvR8yLwUzCqYuz\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-06-09T05:05:43.835Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:059ed4af-cfe9-442b-8477-d69f6a5abb24",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-06-09T05:05:43Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2PTXsi7y1xz6CPpQrwq8UEJga1ZxUVrikCMbdV6jhpMV7uw9ZEhuHLNT7BNv489DhV5LSgNVnkqvR8yLwUzCqYuz",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-06-09T05:05:43.835Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            }
          ]
        },
        {
          "id": "bovine: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:3188e0fc-a3a4-49d1-b041-0fa9bc05cdad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 260,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:6ef1551d-e7c6-42bc-b758-8237377ac4f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:281f4702-0da0-4fcc-8454-9f7eab5edf9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"},\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"id\":\"urn:uuid:3f43eca6-e36b-4797-b0ee-724c783676b3\",\"issuanceDate\":\"2024-06-09T05:05:44Z\",\"issuer\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\",\"proof\":{\"created\":\"2024-06-09T05:05:44Z\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2tBKNsfmhtAnGfFsWeBdcayKR9G1ypkwdYkyRdDKvEj8UaZL5pLVxBK4ZTcesdfmjgAZDpuQsEv62b9yVRMwnuG3\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\"},\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:3f43eca6-e36b-4797-b0ee-724c783676b3",
                        "issuanceDate": "2024-06-09T05:05:44Z",
                        "issuer": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr",
                        "proof": {
                          "created": "2024-06-09T05:05:44Z",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2tBKNsfmhtAnGfFsWeBdcayKR9G1ypkwdYkyRdDKvEj8UaZL5pLVxBK4ZTcesdfmjgAZDpuQsEv62b9yVRMwnuG3",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:95:13)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              issuedVc,\n              `Expected issuer ${issuerDisplayName} to issue a VC.`\n            );\n            await verificationSuccess({\n              credential: issuedVc, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xh04DK0m4PRJJdai7m9Pk",
              "ctx": null,
              "_testId": "urn:uuid:ead3efae-3227-4ad1-8c8d-ca4bcb16a8c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:54104186-4cbe-4bb0-a23a-67fe1776230e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:7b8951c1-a919-473c-b0ec-90c27d49f326",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:4d76fd53-afd5-4e6e-8fb8-f7056a058c6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:cf15e57d-a214-4088-9a8e-434c8412aed6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:f939e5b9-a27c-41b8-b6b3-e23199debe5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:7382f106-a7cb-4853-848c-1cc2713b81dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:e1be884f-b0ca-401e-84f2-c6394074c7b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:e17368b8-b42c-4eac-ba7f-7657eadca553",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:d3104c8f-55a4-4e8e-8ccc-92cea96e3b99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:289ad045-b3c8-4e34-9783-2b11eaf5b48c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:8d52f2b1-d6c1-4d60-a882-3fe51446cc44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:94410451-ebfe-4822-83d7-f4747f0544f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:c48fc7fb-af33-480c-97bc-39c84b84ea6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:afff1070-c940-44b3-a93b-907995ba3f38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:005a9db8-be5f-4513-b669-800917fab933",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 868,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ieN_wowBCt1W8R2rAtrTm",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:13d186ec-623a-46e4-a4f2-ccccec617ec4"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:5bbda380-b159-4468-897d-d5ef39a40208",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1dcd7a49-ce46-41d4-8a70-8ead12739b83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:7d50ae97-3b59-4681-b466-acd34082fc5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:bfa3333e-f812-454f-9864-be191520ad0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:c1c5c863-9e0f-4445-88c3-62a74f42812f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1d7aabe6-d8ba-43ae-aa93-9dcece0ce875",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:e6623ade-8c48-441d-b430-c0d395401589",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:2a60e7a0-8902-42f4-b76d-1513b6b8e320",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:79e29ce8-0a0f-41c5-80d9-670511c26bf9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:7847db53-7f76-4a09-83ba-9eb59440cc16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1058d8c8-7ceb-4229-8a27-591027ad0143",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:d3152d71-a26f-4547-9b3e-15f0a2d2a6dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:6d2beb13-41da-4393-a0b4-b6fce33a9fa5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:0c471d75-31ae-47d3-b5c1-13a9abe3e29e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1e8435b3-b679-4b69-aec1-fbfbdbed2f54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 360,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ieN_wowBCt1W8R2rAtrTm",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:b35ce169-8a59-46a3-a06d-48235904da93"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:093cbed8-a4e9-49ed-adfa-b1ca33819999",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:3f460c30-bed6-4bbf-bcd7-acc34f6df08c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:090a7a7a-54b7-4a60-bfff-abe5e1307220",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:f046978d-6caf-42a6-ac6a-92f483437ef6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:23471a9f-a357-475c-92a1-6e0401c25b32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:0d8834c5-6f3b-44e1-95ff-164be7c794e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:bf5a7fc8-471f-4ae3-805d-6499059a13a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:61ca4f04-7838-4387-8750-44aa2f74dcad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:b68d5ac4-c733-4a29-962f-44d86b972fe2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:f12931df-4db8-457c-807a-ae425e424373",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:f5a45833-61db-4a4a-99e7-2ab1b54d029d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:849e91e2-f5ee-4647-8d81-444b5a6c4795",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:9cba2709-00c3-43d4-9bf3-c29378970868",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:1691e9a8-dc6b-49b0-bec7-39ef8eb4d227",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:977f35f8-6109-4680-b011-8b5147a47e0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 487,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ieN_wowBCt1W8R2rAtrTm",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:17ec693e-61e8-4324-8040-15aed355f6fc"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:f3a66d59-1a1f-42c1-b214-911e8970dd6c",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:54104186-4cbe-4bb0-a23a-67fe1776230e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:5bbda380-b159-4468-897d-d5ef39a40208",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:093cbed8-a4e9-49ed-adfa-b1ca33819999",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:7b8951c1-a919-473c-b0ec-90c27d49f326",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1dcd7a49-ce46-41d4-8a70-8ead12739b83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:3f460c30-bed6-4bbf-bcd7-acc34f6df08c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:4d76fd53-afd5-4e6e-8fb8-f7056a058c6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:7d50ae97-3b59-4681-b466-acd34082fc5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:090a7a7a-54b7-4a60-bfff-abe5e1307220",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:cf15e57d-a214-4088-9a8e-434c8412aed6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:bfa3333e-f812-454f-9864-be191520ad0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:f046978d-6caf-42a6-ac6a-92f483437ef6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:f939e5b9-a27c-41b8-b6b3-e23199debe5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:c1c5c863-9e0f-4445-88c3-62a74f42812f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:23471a9f-a357-475c-92a1-6e0401c25b32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:7382f106-a7cb-4853-848c-1cc2713b81dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1d7aabe6-d8ba-43ae-aa93-9dcece0ce875",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:0d8834c5-6f3b-44e1-95ff-164be7c794e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:e1be884f-b0ca-401e-84f2-c6394074c7b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:e6623ade-8c48-441d-b430-c0d395401589",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:bf5a7fc8-471f-4ae3-805d-6499059a13a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:e17368b8-b42c-4eac-ba7f-7657eadca553",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:2a60e7a0-8902-42f4-b76d-1513b6b8e320",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:61ca4f04-7838-4387-8750-44aa2f74dcad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:d3104c8f-55a4-4e8e-8ccc-92cea96e3b99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:79e29ce8-0a0f-41c5-80d9-670511c26bf9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:b68d5ac4-c733-4a29-962f-44d86b972fe2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:289ad045-b3c8-4e34-9783-2b11eaf5b48c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:7847db53-7f76-4a09-83ba-9eb59440cc16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:f12931df-4db8-457c-807a-ae425e424373",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:8d52f2b1-d6c1-4d60-a882-3fe51446cc44",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1058d8c8-7ceb-4229-8a27-591027ad0143",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:f5a45833-61db-4a4a-99e7-2ab1b54d029d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:94410451-ebfe-4822-83d7-f4747f0544f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:d3152d71-a26f-4547-9b3e-15f0a2d2a6dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:849e91e2-f5ee-4647-8d81-444b5a6c4795",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:c48fc7fb-af33-480c-97bc-39c84b84ea6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:6d2beb13-41da-4393-a0b4-b6fce33a9fa5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:9cba2709-00c3-43d4-9bf3-c29378970868",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:afff1070-c940-44b3-a93b-907995ba3f38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:0c471d75-31ae-47d3-b5c1-13a9abe3e29e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:1691e9a8-dc6b-49b0-bec7-39ef8eb4d227",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "QTCKrh_bWbHpolls1yuyN",
              "ctx": null,
              "_testId": "urn:uuid:005a9db8-be5f-4513-b669-800917fab933",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "9XoYU4jfmIHEpFpNHAlxt",
              "ctx": null,
              "_testId": "urn:uuid:1e8435b3-b679-4b69-aec1-fbfbdbed2f54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "E_PrMpukLLQ112MWFJqBz",
              "ctx": null,
              "_testId": "urn:uuid:977f35f8-6109-4680-b011-8b5147a47e0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers) VC 1.1",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:fa139d5d-2268-4c45-987b-875c04bed224",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:4e644efd-606d-447e-b818-9f77cf19b23f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:1624703d-bda0-4ab5-b28c-c04ad5a0c54c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:2b29dbe6-b929-417e-8ee6-81421c25b353",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:5077bbca-0499-4240-bafd-070451de0f87\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"issuanceDate\":\"2024-06-09T05:05:49Z\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:49Z\",\"proofValue\":\"u2V0BhVhAiobtpKYu9rkzeh1zViHWyjAZOsd0eFmBi6JtGOOlsRD-6zWz1C7nmZfqqDjNjNzO6-ND8Gp-qONk71qRwgsZdlgjgCQDIHorFLQ5eV5x7WHnotTDtlSeKfn7Y6z9qFsv9pqYX5iBWEDFTXjaZxlj0CU9jbIeSTvsx2ihO3jxqUFdaBiN38wtd3elA-zBCKVKf5SJ6qjZ_MfCUs3giuLQOAYlpZKpBwFEoIQAAQME\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js:150:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:ea300862-6667-4b14-8683-186a0654b836",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:97d1f320-cb05-4d21-b313-b54bdd26a375",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18517,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:1a5ea818-b02b-4995-a58c-5c161f4f1d16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 243,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "U8Qadw-poIhK_tLGSiMMe",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:9fcc7a85-1dac-4666-b9a3-1cedd01eb35d"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:7ed51236-93f4-4b19-abe3-5b7835b4ffdd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:19ed38d4-a511-4e41-bf08-117044953361",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18623,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:e227d4b9-97b2-4e1b-b4c7-8798f459cb50",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:5650da8e-43a1-4485-9c0d-a8329dd96295",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 11,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:89468d3f-ccf1-4c6b-9018-a9e9044f63d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18635,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:a4122afe-086c-447c-96a3-32c798d933ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:3cf4e94c-3c58-451a-b9e4-17ee9555f96a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "U8Qadw-poIhK_tLGSiMMe",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:cf13e4de-477b-4465-ac90-04037c497aa0"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:56320793-ed8c-4b5d-aca2-e8eed93e1e8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:49fd1ed0-af11-49cb-b238-d255e484c580",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:930b86ca-ccdd-4da5-925d-2276bbbad71c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:6d0409da-065f-4a67-b451-550dd6184fe5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:7411b836-e7ee-497c-9e1f-23269e750029",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:5ff5fb1b-c309-4ab7-9efe-f68243c50525",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:5787bff8-7048-4fe8-b6ac-c8483f0896fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "U8Qadw-poIhK_tLGSiMMe",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:b112b8e6-6f9f-4f3f-8acd-8efd3d3d7d0d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "_kYiDh9r07D-qdcmjpa8e",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:e2df0e48-635c-4d91-8c6b-42fe1a25f246",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:fa139d5d-2268-4c45-987b-875c04bed224",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:7ed51236-93f4-4b19-abe3-5b7835b4ffdd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:56320793-ed8c-4b5d-aca2-e8eed93e1e8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:4e644efd-606d-447e-b818-9f77cf19b23f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:19ed38d4-a511-4e41-bf08-117044953361",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18623,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:49fd1ed0-af11-49cb-b238-d255e484c580",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:1624703d-bda0-4ab5-b28c-c04ad5a0c54c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:e227d4b9-97b2-4e1b-b4c7-8798f459cb50",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:930b86ca-ccdd-4da5-925d-2276bbbad71c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:2b29dbe6-b929-417e-8ee6-81421c25b353",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist",
                "showDiff": false,
                "actual": {
                  "name": "VerificationError",
                  "message": "Verification error (local).",
                  "errors": [
                    "Credential issuer must match the verification method controller."
                  ],
                  "causes": [
                    null
                  ],
                  "credential": "{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:5077bbca-0499-4240-bafd-070451de0f87\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"issuanceDate\":\"2024-06-09T05:05:49Z\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:05:49Z\",\"proofValue\":\"u2V0BhVhAiobtpKYu9rkzeh1zViHWyjAZOsd0eFmBi6JtGOOlsRD-6zWz1C7nmZfqqDjNjNzO6-ND8Gp-qONk71qRwgsZdlgjgCQDIHorFLQ5eV5x7WHnotTDtlSeKfn7Y6z9qFsv9pqYX5iBWEDFTXjaZxlj0CU9jbIeSTvsx2ihO3jxqUFdaBiN38wtd3elA-zBCKVKf5SJ6qjZ_MfCUs3giuLQOAYlpZKpBwFEoIQAAQME\"}}"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected { name: 'VerificationError', …(4) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js:150:19)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:5650da8e-43a1-4485-9c0d-a8329dd96295",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 11,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:6d0409da-065f-4a67-b451-550dd6184fe5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:ea300862-6667-4b14-8683-186a0654b836",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:89468d3f-ccf1-4c6b-9018-a9e9044f63d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18635,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:7411b836-e7ee-497c-9e1f-23269e750029",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:97d1f320-cb05-4d21-b313-b54bdd26a375",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18517,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:a4122afe-086c-447c-96a3-32c798d933ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:5ff5fb1b-c309-4ab7-9efe-f68243c50525",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "bqSSQIXNpY6Y6DgDUX0ER",
              "ctx": null,
              "_testId": "urn:uuid:1a5ea818-b02b-4995-a58c-5c161f4f1d16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "n7NS1ChSVXOnLl0KqcrsJ",
              "ctx": null,
              "_testId": "urn:uuid:3cf4e94c-3c58-451a-b9e4-17ee9555f96a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "7E5VKwg6EUoce149msnpb",
              "ctx": null,
              "_testId": "urn:uuid:5787bff8-7048-4fe8-b6ac-c8483f0896fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers) VC 2.0",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:261d32ab-e32e-45f7-a0e2-18d3d93e3afe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:fb40ac21-a9d2-4774-9ccb-02e389abd0b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:a888b63c-df0c-4b0a-923a-cad896f644ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:76eb444d-1938-476b-917a-807bac5c850e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:d3ad4dd3-d872-41a3-9dff-26c3fbabff1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18869,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:7d0aa797-381c-4a44-94bf-e51ec80bee68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:3a493a16-b44d-4cd4-9ded-41609951ba8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n                issuedVc = await createInitialVc({\n                  issuer,\n                  vc: credentials.create[vcVersion].document,\n                  mandatoryPointers:\n                   credentials.create[vcVersion].mandatoryPointers,\n                  vcVersion\n                });\n                // Support multiple proofs\n                proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                  [issuedVc?.proof];\n                // only look for verificationMethods if a valid proof is there\n                if(proofs.filter(Boolean).length) {\n                  const verificationMethods = proofs.map(\n                    proof => proof.verificationMethod);\n                  for(const verificationMethod of verificationMethods) {\n                    const verificationMethodDocument = await documentLoader({\n                      url: verificationMethod\n                    });\n                    verificationMethodDocuments.push(\n                      verificationMethodDocument);\n                  }\n                }\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "crBD9TbCPr1Lv8303C99s",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:c1c8628b-5adf-4a11-aa0c-32c35f4e6a10"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "_kYiDh9r07D-qdcmjpa8e",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:74c67a45-f64a-429a-a807-5eb0c96784c4",
      "columns": [
        "Digital Bazaar: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  proofs.some(\n                    proof => proof.cryptosuite === 'ecdsa-sd-2023'\n                  ).should.equal(true, 'Expected at least one proof to have ' +\n                    '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n                  );\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:261d32ab-e32e-45f7-a0e2-18d3d93e3afe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
          "cells": [
            {
              "type": "test",
              "title": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                const _proof = proofs.find(p =>\n                  p?.cryptosuite === 'ecdsa-sd-2023');\n                expect(\n                  _proof,\n                  `Expected VC from issuer ${name} to have an ' +\n                  '\"ecdsa-sd-2023\" proof`).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC from issuer ${name} to have a ' +\n                  '\"proof.proofValue\"`\n                ).to.exist;\n                expect(\n                  _proof.proofValue,\n                  `Expected VC \"proof.proofValue\" from issuer ${name} to be ` +\n                  'a string.'\n                ).to.be.a.string;\n                //Ensure the proofValue string starts with u, indicating that it\n                //is a multibase-base64url-no-pad-encoded value, throwing an\n                //error if it does not.\n                expect(\n                  _proof.proofValue.startsWith('u'),\n                  `Expected \"proof.proofValue\" to start with u received ` +\n                  `${_proof.proofValue[0]}`).to.be.true;\n                // now test the encoding which is bs64 url no pad for this suite\n                expect(\n                  shouldBeBs64UrlNoPad(_proof.proofValue),\n                  'Expected \"proof.proofValue\" to be bs64 url no pad encoded.'\n                ).to.be.true;\n                await shouldHaveHeaderBytes(\n                  _proof.proofValue,\n                  new Uint8Array([0xd9, 0x5d, 0x00])\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:fb40ac21-a9d2-4774-9ccb-02e389abd0b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "the signature value (proofValue) MUST be expressed according to section 7 of [RFC4754] (sometimes referred to as the IEEE P1363 format) and encoded according to the specific cryptosuite proof generation algorithm."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                proofs.some(\n                  proof => proof.proofValue.startsWith('u')\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"proofValue\" property that starts with \"u\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:a888b63c-df0c-4b0a-923a-cad896f644ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                  this.test.cell = {\n                    columnId: `${name}: ${keyType}`, rowId: this.test.title\n                  };\n                  const derivedCredential = await deriveCredential({\n                    verifiableCredential: issuedVc,\n                    suite: 'ecdsa-sd-2023',\n                    selectivePointers: ['/credentialSubject/id']\n                  });\n\n                  await verificationSuccess({\n                    credential: derivedCredential,\n                    verifier\n                  });\n                }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:76eb444d-1938-476b-917a-807bac5c850e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n                const controllerDocuments = [];\n                for(const verificationMethodDocument of\n                  verificationMethodDocuments) {\n                  const controllerDocument = await documentLoader({\n                    url: verificationMethodDocument.controller\n                  });\n                  controllerDocuments.push(controllerDocument);\n                }\n                proofs.some(\n                  proof => controllerDocuments.some(controllerDocument =>\n                    controllerDocument.hasOwnProperty(proof.proofPurpose))\n                ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                  'to match the verification method controller.'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:d3ad4dd3-d872-41a3-9dff-26c3fbabff1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18869,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  'at least one \"verificationMethodDocument\".');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument =>\n                    verificationMethodDocument?.type === 'Multikey'\n                ).should.equal(true, 'Expected at least one proof to have ' +\n                  '\"type\" property value \"Multikey\".'\n                );\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:7d0aa797-381c-4a44-94bf-e51ec80bee68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                  '\"verificationMethodDocuments\" to not be empty.');\n                verificationMethodDocuments.some(\n                  verificationMethodDocument => {\n                    const multibase = 'z';\n                    const {publicKeyMultibase} = verificationMethodDocument;\n                    return publicKeyMultibase.startsWith(multibase) &&\n                      shouldBeBs58(publicKeyMultibase) &&\n                      shouldBeMulticodecEncoded(publicKeyMultibase);\n                  }\n                ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                  'be MULTIBASE formatted and MULTICODEC encoded.');\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "3X78FP8U4BIvCKzQIqe-d",
              "ctx": null,
              "_testId": "urn:uuid:3a493a16-b44d-4cd4-9ded-41609951ba8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers 1.1)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "bx0_NfyAvTYno4YWmHOvH",
              "ctx": null,
              "_testId": "urn:uuid:7d44f86b-71c9-43a5-8841-e4dc4c94e4b9",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "bx0_NfyAvTYno4YWmHOvH",
              "ctx": null,
              "_testId": "urn:uuid:dd2b388d-f93c-4816-8745-a5fd01f1bb1b",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "bx0_NfyAvTYno4YWmHOvH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:d906f604-7334-47a7-a1f8-1c23f84a0ba8"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "eQnaQzgDiThWJ2WTYw36r",
              "ctx": null,
              "_testId": "urn:uuid:0b7f6dec-8b7b-4575-bbe3-e2acb3160138",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-06-09T05:05:31Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zbVyvZEqcA7mX7Rtt8bP7PdGFbBXQ3MNfUnxadhA79BRepkW741ES3zeEhnb7kFQDQDWzPvQYuMPZsvYAZCoy24wF9tTRUeU6PGWxhEmMwB7dniNgNGFYtw2GcXL8ku2GBSV\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-06-09T05:05:31Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zbVyvZEqcA7mX7Rtt8bP7PdGFbBXQ3MNfUnxadhA79BRepkW741ES3zeEhnb7kFQDQDWzPvQYuMPZsvYAZCoy24wF9tTRUeU6PGWxhEmMwB7dniNgNGFYtw2GcXL8ku2GBSV"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "eQnaQzgDiThWJ2WTYw36r",
              "ctx": null,
              "_testId": "urn:uuid:65df5556-7799-4448-995d-464dc5f93cbe",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "eQnaQzgDiThWJ2WTYw36r",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:517c8469-6316-4798-8d6a-eace2f7c95be"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "emEeHsQuXNOO-sOfIPCs1",
              "ctx": null,
              "_testId": "urn:uuid:9b8f41c0-5e42-4504-b039-280d03aff9e8",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "emEeHsQuXNOO-sOfIPCs1",
              "ctx": null,
              "_testId": "urn:uuid:719111e5-da19-4639-94ed-aa96e1bc5c22",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "emEeHsQuXNOO-sOfIPCs1",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:57ce392b-56b1-45a1-8c5d-d9d71246acb2"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "lqwHXXgcp7ceTUT1sB3Au",
              "ctx": null,
              "_testId": "urn:uuid:0f6097d9-f333-45a8-8e3a-7e009a51d6fd",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "lqwHXXgcp7ceTUT1sB3Au",
              "ctx": null,
              "_testId": "urn:uuid:6761ef80-a883-4975-ac30-33cb69ccafa1",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lqwHXXgcp7ceTUT1sB3Au",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:bb9bf8e5-49f3-48b6-9c99-f62baa3b7a80"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "gsUx72129tkMBZYu1mRje",
              "ctx": null,
              "_testId": "urn:uuid:534acbdd-6a6b-41c3-8c1a-b9d0d645a33b",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-06-09T05:05:31Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z569FPUSm387afRgsmR1DHjJpVixLXJ2CtopkZbJMjpqtLVRydpcNSLLeKzKrVBeeAAGjCBGpzXtoFG4Zun4nEHu1\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-06-09T05:05:31Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z569FPUSm387afRgsmR1DHjJpVixLXJ2CtopkZbJMjpqtLVRydpcNSLLeKzKrVBeeAAGjCBGpzXtoFG4Zun4nEHu1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "gsUx72129tkMBZYu1mRje",
              "ctx": null,
              "_testId": "urn:uuid:78063839-a36b-4d02-81dc-6d4cd3866318",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19643,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gsUx72129tkMBZYu1mRje",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:b927716b-9458-463b-b6cf-3915b539668b"
        },
        {
          "title": "SpruceID: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ghoK_WIu8O2RFjuwiQAjp",
              "ctx": null,
              "_testId": "urn:uuid:e0c690db-6c83-43e6-97ea-7e6f0410a4ab",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19683,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ghoK_WIu8O2RFjuwiQAjp",
              "ctx": null,
              "_testId": "urn:uuid:157e539c-b856-4540-b3bb-ad50a84eed5f",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19683,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ghoK_WIu8O2RFjuwiQAjp",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:e0ab297f-23ec-483e-b061-b7a74ae949ad"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iDzAkoWfXvgutGsSlrIrR",
              "ctx": null,
              "_testId": "urn:uuid:b8640412-3516-4338-badd-350dc34f6989",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iDzAkoWfXvgutGsSlrIrR",
              "ctx": null,
              "_testId": "urn:uuid:9a1cc827-7d10-4fe3-9c9b-f90f9eb46f60",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iDzAkoWfXvgutGsSlrIrR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:c8ae44c1-94bf-438b-95e8-c7cf0af6e149"
        },
        {
          "title": "bovine: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "xZQXn1yZlVcXg1SeHi9oR",
              "ctx": null,
              "_testId": "urn:uuid:d55204e6-2dea-45a8-a301-34c34e80912d",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "xZQXn1yZlVcXg1SeHi9oR",
              "ctx": null,
              "_testId": "urn:uuid:c3276d25-a45c-49c2-930e-6db195b1f458",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xZQXn1yZlVcXg1SeHi9oR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iCjb_ikITWCUkZ21noHVs",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:7024569d-c0b8-4eda-a526-462f61db503d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:a87d8de9-7269-4e47-ab48-fe45ab2fa3ce",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "SpruceID: P-384",
        "bovine: P-256",
        "bovine: P-384"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "bx0_NfyAvTYno4YWmHOvH",
              "ctx": null,
              "_testId": "urn:uuid:7d44f86b-71c9-43a5-8841-e4dc4c94e4b9",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "eQnaQzgDiThWJ2WTYw36r",
              "ctx": null,
              "_testId": "urn:uuid:0b7f6dec-8b7b-4575-bbe3-e2acb3160138",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-06-09T05:05:31Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zbVyvZEqcA7mX7Rtt8bP7PdGFbBXQ3MNfUnxadhA79BRepkW741ES3zeEhnb7kFQDQDWzPvQYuMPZsvYAZCoy24wF9tTRUeU6PGWxhEmMwB7dniNgNGFYtw2GcXL8ku2GBSV\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-06-09T05:05:31Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zbVyvZEqcA7mX7Rtt8bP7PdGFbBXQ3MNfUnxadhA79BRepkW741ES3zeEhnb7kFQDQDWzPvQYuMPZsvYAZCoy24wF9tTRUeU6PGWxhEmMwB7dniNgNGFYtw2GcXL8ku2GBSV"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "emEeHsQuXNOO-sOfIPCs1",
              "ctx": null,
              "_testId": "urn:uuid:9b8f41c0-5e42-4504-b039-280d03aff9e8",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "lqwHXXgcp7ceTUT1sB3Au",
              "ctx": null,
              "_testId": "urn:uuid:0f6097d9-f333-45a8-8e3a-7e009a51d6fd",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "gsUx72129tkMBZYu1mRje",
              "ctx": null,
              "_testId": "urn:uuid:534acbdd-6a6b-41c3-8c1a-b9d0d645a33b",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-06-09T05:05:31Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z569FPUSm387afRgsmR1DHjJpVixLXJ2CtopkZbJMjpqtLVRydpcNSLLeKzKrVBeeAAGjCBGpzXtoFG4Zun4nEHu1\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-06-09T05:05:31Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z569FPUSm387afRgsmR1DHjJpVixLXJ2CtopkZbJMjpqtLVRydpcNSLLeKzKrVBeeAAGjCBGpzXtoFG4Zun4nEHu1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ghoK_WIu8O2RFjuwiQAjp",
              "ctx": null,
              "_testId": "urn:uuid:e0c690db-6c83-43e6-97ea-7e6f0410a4ab",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19683,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iDzAkoWfXvgutGsSlrIrR",
              "ctx": null,
              "_testId": "urn:uuid:b8640412-3516-4338-badd-350dc34f6989",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "xZQXn1yZlVcXg1SeHi9oR",
              "ctx": null,
              "_testId": "urn:uuid:d55204e6-2dea-45a8-a301-34c34e80912d",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "bx0_NfyAvTYno4YWmHOvH",
              "ctx": null,
              "_testId": "urn:uuid:dd2b388d-f93c-4816-8745-a5fd01f1bb1b",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "eQnaQzgDiThWJ2WTYw36r",
              "ctx": null,
              "_testId": "urn:uuid:65df5556-7799-4448-995d-464dc5f93cbe",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "emEeHsQuXNOO-sOfIPCs1",
              "ctx": null,
              "_testId": "urn:uuid:719111e5-da19-4639-94ed-aa96e1bc5c22",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "lqwHXXgcp7ceTUT1sB3Au",
              "ctx": null,
              "_testId": "urn:uuid:6761ef80-a883-4975-ac30-33cb69ccafa1",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "gsUx72129tkMBZYu1mRje",
              "ctx": null,
              "_testId": "urn:uuid:78063839-a36b-4d02-81dc-6d4cd3866318",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19643,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "ghoK_WIu8O2RFjuwiQAjp",
              "ctx": null,
              "_testId": "urn:uuid:157e539c-b856-4540-b3bb-ad50a84eed5f",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19683,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "iDzAkoWfXvgutGsSlrIrR",
              "ctx": null,
              "_testId": "urn:uuid:9a1cc827-7d10-4fe3-9c9b-f90f9eb46f60",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "xZQXn1yZlVcXg1SeHi9oR",
              "ctx": null,
              "_testId": "urn:uuid:c3276d25-a45c-49c2-930e-6db195b1f458",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers 2.0)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_LjnH2O0bN1MjJ-XdAnxE",
              "ctx": null,
              "_testId": "urn:uuid:e8828984-c5a4-4828-a066-2fe5aaf31232",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_LjnH2O0bN1MjJ-XdAnxE",
              "ctx": null,
              "_testId": "urn:uuid:20050ad6-fb17-4067-80b7-b3239849fcb1",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_LjnH2O0bN1MjJ-XdAnxE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:6cd7fd46-2571-4d37-81d4-b238de35e60e"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x4QcxiRDd0Q--cVR6EDS3",
              "ctx": null,
              "_testId": "urn:uuid:4f956412-9d52-44a0-82da-8bc1c1d76bdd",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zC2Bg2w4u2aRQy89amJ76JTF7jNGEisjHcZ1PiDfhHWo2Fhg4s7654wZetDbcKgygJLhLoPg2bjr6FeBj3VsLDVfY8DAafthvKZyTo8SnjQhLzbwcCKtBQ9qqw7DyzgeRPyd\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zC2Bg2w4u2aRQy89amJ76JTF7jNGEisjHcZ1PiDfhHWo2Fhg4s7654wZetDbcKgygJLhLoPg2bjr6FeBj3VsLDVfY8DAafthvKZyTo8SnjQhLzbwcCKtBQ9qqw7DyzgeRPyd"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x4QcxiRDd0Q--cVR6EDS3",
              "ctx": null,
              "_testId": "urn:uuid:0f3f9842-a169-41a4-a059-39a45641fed0",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "x4QcxiRDd0Q--cVR6EDS3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:58edb1db-a41a-45af-9726-352a6fe0c32e"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x2d99v0uSjdMmr0FP23Wz",
              "ctx": null,
              "_testId": "urn:uuid:7f32b55f-ffae-45d3-a883-38414cb20a28",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x2d99v0uSjdMmr0FP23Wz",
              "ctx": null,
              "_testId": "urn:uuid:cf46fdaf-4c22-4aef-bcb1-b6c429d00792",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "x2d99v0uSjdMmr0FP23Wz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:278c8e97-6fe6-4e5a-97e4-54468fed2358"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "dWqzhp5RtlGubpQBri4cW",
              "ctx": null,
              "_testId": "urn:uuid:2db16971-8324-4ddd-8433-b12b8f77f032",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "dWqzhp5RtlGubpQBri4cW",
              "ctx": null,
              "_testId": "urn:uuid:6d4f7912-e1e5-48d9-9a25-309b3ff850c7",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dWqzhp5RtlGubpQBri4cW",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:2f9fedf8-e666-42d5-bd4c-477ca4dd4dde"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "6HvLXlIbhzNEwmjdZgbGi",
              "ctx": null,
              "_testId": "urn:uuid:6e10e3e0-c783-4abd-98fd-14bbb8b6d33e",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zrHb5qPbj3xhc89JwhZEeFYK5JB5RokLnuFTs84KLHngC8f5rGRUFaJrbvRC3AfjN7cPD3Sk1M3Ee6VM78DNpXa8\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zrHb5qPbj3xhc89JwhZEeFYK5JB5RokLnuFTs84KLHngC8f5rGRUFaJrbvRC3AfjN7cPD3Sk1M3Ee6VM78DNpXa8"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "6HvLXlIbhzNEwmjdZgbGi",
              "ctx": null,
              "_testId": "urn:uuid:64761ad8-c12b-4077-bdc3-98319c0c8282",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6HvLXlIbhzNEwmjdZgbGi",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:9fdfd78a-840c-406b-a48a-16b3f3904ada"
        },
        {
          "title": "SpruceID: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IkeM5nASABKMIjI8ocngr",
              "ctx": null,
              "_testId": "urn:uuid:1b5e01b4-284a-45d8-a569-3443f39ce2b5",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IkeM5nASABKMIjI8ocngr",
              "ctx": null,
              "_testId": "urn:uuid:99d75a6b-3db3-49ff-a533-e303924bcad3",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IkeM5nASABKMIjI8ocngr",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:ea69797c-3260-4ab5-97ad-7f113766d9a9"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_JhvBFwCLXYNe6ZejGVFs",
              "ctx": null,
              "_testId": "urn:uuid:bfd9b0ce-29f3-492b-bac4-c47847e33881",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_JhvBFwCLXYNe6ZejGVFs",
              "ctx": null,
              "_testId": "urn:uuid:bbb20595-d81b-4069-80d5-d163bb69f3e3",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_JhvBFwCLXYNe6ZejGVFs",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:b76fa51e-58de-48f5-81b1-bff752a6b48e"
        },
        {
          "title": "bovine: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "3Wnwy5WC3JhXDG-jN-5eX",
              "ctx": null,
              "_testId": "urn:uuid:c87644ea-5173-4464-b021-4fc8aa21d1a4",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "3Wnwy5WC3JhXDG-jN-5eX",
              "ctx": null,
              "_testId": "urn:uuid:a94fbd40-2645-4066-af97-bd40d920108d",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-384\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3Wnwy5WC3JhXDG-jN-5eX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "OGFqW8uszPGIdO-fdkuIU",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:b8065382-6d2a-41c2-9d43-c7a1baf08193"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:200c771f-6ece-47e8-9b98-701e5e75ea1d",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "SpruceID: P-384",
        "bovine: P-256",
        "bovine: P-384"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_LjnH2O0bN1MjJ-XdAnxE",
              "ctx": null,
              "_testId": "urn:uuid:e8828984-c5a4-4828-a066-2fe5aaf31232",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x4QcxiRDd0Q--cVR6EDS3",
              "ctx": null,
              "_testId": "urn:uuid:4f956412-9d52-44a0-82da-8bc1c1d76bdd",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zC2Bg2w4u2aRQy89amJ76JTF7jNGEisjHcZ1PiDfhHWo2Fhg4s7654wZetDbcKgygJLhLoPg2bjr6FeBj3VsLDVfY8DAafthvKZyTo8SnjQhLzbwcCKtBQ9qqw7DyzgeRPyd\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zC2Bg2w4u2aRQy89amJ76JTF7jNGEisjHcZ1PiDfhHWo2Fhg4s7654wZetDbcKgygJLhLoPg2bjr6FeBj3VsLDVfY8DAafthvKZyTo8SnjQhLzbwcCKtBQ9qqw7DyzgeRPyd"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x2d99v0uSjdMmr0FP23Wz",
              "ctx": null,
              "_testId": "urn:uuid:7f32b55f-ffae-45d3-a883-38414cb20a28",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "dWqzhp5RtlGubpQBri4cW",
              "ctx": null,
              "_testId": "urn:uuid:2db16971-8324-4ddd-8433-b12b8f77f032",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "6HvLXlIbhzNEwmjdZgbGi",
              "ctx": null,
              "_testId": "urn:uuid:6e10e3e0-c783-4abd-98fd-14bbb8b6d33e",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:31Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zrHb5qPbj3xhc89JwhZEeFYK5JB5RokLnuFTs84KLHngC8f5rGRUFaJrbvRC3AfjN7cPD3Sk1M3Ee6VM78DNpXa8\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:31Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zrHb5qPbj3xhc89JwhZEeFYK5JB5RokLnuFTs84KLHngC8f5rGRUFaJrbvRC3AfjN7cPD3Sk1M3Ee6VM78DNpXa8"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:160:7)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IkeM5nASABKMIjI8ocngr",
              "ctx": null,
              "_testId": "urn:uuid:1b5e01b4-284a-45d8-a569-3443f39ce2b5",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_JhvBFwCLXYNe6ZejGVFs",
              "ctx": null,
              "_testId": "urn:uuid:bfd9b0ce-29f3-492b-bac4-c47847e33881",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n      expectImplementationTestVector({testVector, keyType});\n\n      await verificationSuccess({credential: testVector, verifier: endpoint});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "3Wnwy5WC3JhXDG-jN-5eX",
              "ctx": null,
              "_testId": "urn:uuid:c87644ea-5173-4464-b021-4fc8aa21d1a4",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:158:7)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_LjnH2O0bN1MjJ-XdAnxE",
              "ctx": null,
              "_testId": "urn:uuid:20050ad6-fb17-4067-80b7-b3239849fcb1",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x4QcxiRDd0Q--cVR6EDS3",
              "ctx": null,
              "_testId": "urn:uuid:0f3f9842-a169-41a4-a059-39a45641fed0",
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "x2d99v0uSjdMmr0FP23Wz",
              "ctx": null,
              "_testId": "urn:uuid:cf46fdaf-4c22-4aef-bcb1-b6c429d00792",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "dWqzhp5RtlGubpQBri4cW",
              "ctx": null,
              "_testId": "urn:uuid:6d4f7912-e1e5-48d9-9a25-309b3ff850c7",
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "6HvLXlIbhzNEwmjdZgbGi",
              "ctx": null,
              "_testId": "urn:uuid:64761ad8-c12b-4077-bdc3-98319c0c8282",
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "IkeM5nASABKMIjI8ocngr",
              "ctx": null,
              "_testId": "urn:uuid:99d75a6b-3db3-49ff-a533-e303924bcad3",
              "cell": {
                "columnId": "SpruceID: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "_JhvBFwCLXYNe6ZejGVFs",
              "ctx": null,
              "_testId": "urn:uuid:bbb20595-d81b-4069-80d5-d163bb69f3e3",
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n    expectImplementationTestVector({testVector, keyType});\n\n    const credential = klona(testVector);\n    // FIXME add invalid-cryptosuite as a locally valid cryptosuite\n    // name, so the signature is correct, but the cryptosuite\n    // name is incorrect\n    credential.proof.cryptosuite = 'invalid-cryptosuite';\n    await verificationFail({credential, verifier: endpoint});\n  }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "3Wnwy5WC3JhXDG-jN-5eX",
              "ctx": null,
              "_testId": "urn:uuid:a94fbd40-2645-4066-af97-bd40d920108d",
              "cell": {
                "columnId": "bovine: P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or the string \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist",
                "showDiff": false,
                "actual": null,
                "operator": "notStrictEqual",
                "stack": "AssertionError: Implementation not marked as supporting required \"P-384\"! Is keyType missing from `supportedEcdsaKeyTypes`?: expected null to exist\n    at expectImplementationTestVector (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:148:7)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:175:5)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:01d325cb-580b-491a-b830-d602862bb340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:51a8d6b2-c0d4-4c2f-bddd-e289c68e5350",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:84f77920-ccb9-4a63-809e-702b27e38abe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:5095bc59-ed45-4c17-87ff-eaf244fb0b0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:13628aac-bcd6-41e9-99fd-d9b4ede4871b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:32f3fc3e-e86c-4b5f-ac23-b6a56b01c30d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:7f124cd7-030d-44e9-b94b-90697405c6a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:c457ba7e-63be-4aef-b104-196a0287a2ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:53921452-dbb9-4501-82fc-55a1b3a36572",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21333,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:e583c03d-2b23-4c5a-89b7-482e1ec27bbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:54fe739e-ce22-4feb-ac9f-b56d9883220a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:5c3cffad-60d3-4ff7-a522-cec853ceda14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:ea9c01be-853d-4317-854f-87f335e40ad2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:fa8c7f49-3978-473e-9bb3-1e3f20ab763e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:a1f6f438-c036-4076-b7cc-a6d4f484d92a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8_7NF5bbr14B1q6-ihgxB",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:ab5354c7-e629-4192-98f1-4b6541206ca7"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:f405c65a-f81e-487c-9c55-e8f998037aec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:19aa0f52-9a1c-48dd-9eaa-d1a106bfb3a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21659,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:39405b8e-56c1-4cb4-8278-45dcce7f65e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:4bf17f18-d830-4ff6-84bd-274b75c59ae3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:0cc0591a-561e-4a50-b223-6e421340432c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:46a00214-4262-4494-9c18-14a5b4372a1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:9a44602a-6d7b-41e4-ad19-2ed81ad24b6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:be86372d-102d-4275-8aab-0f8a9874ead5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:16301534-758f-45c0-9736-0943dbdea881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '3b3a35bb2f24aeea9bd577a6dea82beb' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '3b3a35bb2f24aeea9bd577a6dea82beb' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:eed7f0bd-fcf1-48f1-aa32-3a7b2eff9014",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:839bfb6f-ba5c-42e8-a968-05a913728420",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:53862e12-53cf-4f03-87b0-8140794639f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'b2884c6a1fc0f7ca3d0da946fdbba619' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'b2884c6a1fc0f7ca3d0da946fdbba619' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:99026962-8161-4599-b8f1-3f6b8c5817ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22245,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:b7d73c1d-75d5-490a-b1cc-65be1a563d4f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:29a791fd-3293-4f02-a4c1-d9cd1895d10f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8_7NF5bbr14B1q6-ihgxB",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:bc71a05d-04d3-45ee-a30b-865e4e32bcdf"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:3fb1679d-f42f-476e-a71a-197b4d1c7e17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:664872bf-75b4-4542-b8dd-1d4ba9494ef8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:4dc35ae4-d6ce-446c-acb6-58bac9388fe7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:367a060f-c9c9-49b9-8c0e-227085cbe304",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:6c0acd76-961f-4b1b-9937-94d2c4354749",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:e297aceb-7844-4267-af1f-97cd234d9387",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:c99edcd3-194c-4936-83ff-f5064c9af3d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:fa793193-3383-4f27-a510-afde88ce119b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22777,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:52525448-b24e-420c-821b-0a4e4027e62c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22830,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:da361d68-d20e-4370-8094-db312ab11313",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:c1fd9bf5-3315-4e20-9200-0bb11e912908",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:50866d29-4678-4cb6-9a61-f1df1f735443",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:12f681fe-33e0-4246-9c41-cdc3d2c4c6cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23045,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:a7b927bf-f721-481d-b5b0-6a534b2e397f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:6445d14b-c2ec-4141-a6ea-14705db7ddd6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8_7NF5bbr14B1q6-ihgxB",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:a633fb29-bf78-4b1a-bc0f-37e4421d6c37"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:68b5a319-58e3-4f9e-a193-ed13eaf54df2",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:01d325cb-580b-491a-b830-d602862bb340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:f405c65a-f81e-487c-9c55-e8f998037aec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:3fb1679d-f42f-476e-a71a-197b4d1c7e17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:51a8d6b2-c0d4-4c2f-bddd-e289c68e5350",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:19aa0f52-9a1c-48dd-9eaa-d1a106bfb3a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21659,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:664872bf-75b4-4542-b8dd-1d4ba9494ef8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:84f77920-ccb9-4a63-809e-702b27e38abe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:39405b8e-56c1-4cb4-8278-45dcce7f65e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:4dc35ae4-d6ce-446c-acb6-58bac9388fe7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:5095bc59-ed45-4c17-87ff-eaf244fb0b0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:4bf17f18-d830-4ff6-84bd-274b75c59ae3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:367a060f-c9c9-49b9-8c0e-227085cbe304",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:13628aac-bcd6-41e9-99fd-d9b4ede4871b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:0cc0591a-561e-4a50-b223-6e421340432c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:6c0acd76-961f-4b1b-9937-94d2c4354749",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:32f3fc3e-e86c-4b5f-ac23-b6a56b01c30d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:46a00214-4262-4494-9c18-14a5b4372a1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:e297aceb-7844-4267-af1f-97cd234d9387",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:7f124cd7-030d-44e9-b94b-90697405c6a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:9a44602a-6d7b-41e4-ad19-2ed81ad24b6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:c99edcd3-194c-4936-83ff-f5064c9af3d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:c457ba7e-63be-4aef-b104-196a0287a2ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:be86372d-102d-4275-8aab-0f8a9874ead5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:fa793193-3383-4f27-a510-afde88ce119b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22777,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:53921452-dbb9-4501-82fc-55a1b3a36572",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21333,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:16301534-758f-45c0-9736-0943dbdea881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '3b3a35bb2f24aeea9bd577a6dea82beb' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '940', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3ac-vMMmoPpklXsJQH0RnJ5UBTetgvY\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': '3b3a35bb2f24aeea9bd577a6dea82beb' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:52525448-b24e-420c-821b-0a4e4027e62c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22830,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:e583c03d-2b23-4c5a-89b7-482e1ec27bbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:eed7f0bd-fcf1-48f1-aa32-3a7b2eff9014",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:da361d68-d20e-4370-8094-db312ab11313",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:54fe739e-ce22-4feb-ac9f-b56d9883220a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:839bfb6f-ba5c-42e8-a968-05a913728420",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:c1fd9bf5-3315-4e20-9200-0bb11e912908",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:5c3cffad-60d3-4ff7-a522-cec853ceda14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:53862e12-53cf-4f03-87b0-8140794639f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'b2884c6a1fc0f7ca3d0da946fdbba619' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-origin': '*', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***', 'cache-control': 'no-cache, no-store, must-revalidate', 'content-length': '931', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 09 Jun 2024 05:05:53 GMT', etag: 'W/\"3a3-E9YJGf3LO6emBH8ot9L5BHt3Xr4\"', expires: '0', pragma: 'no-cache', server: 'Google Frontend', vary: 'X-HTTP-Method-Override, Accept-Encoding', via: '1.1 google', 'x-cloud-trace-context': 'b2884c6a1fc0f7ca3d0da946fdbba619' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:50866d29-4678-4cb6-9a61-f1df1f735443",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:ea9c01be-853d-4317-854f-87f335e40ad2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:99026962-8161-4599-b8f1-3f6b8c5817ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22245,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:12f681fe-33e0-4246-9c41-cdc3d2c4c6cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23045,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:fa8c7f49-3978-473e-9bb3-1e3f20ab763e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:b7d73c1d-75d5-490a-b1cc-65be1a563d4f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:a7b927bf-f721-481d-b5b0-6a534b2e397f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23099,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "tkHErv9H6XJhzcgYeZw4i",
              "ctx": null,
              "_testId": "urn:uuid:a1f6f438-c036-4076-b7cc-a6d4f484d92a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Ip7yh8BtGIPFfTfAN6ErF",
              "ctx": null,
              "_testId": "urn:uuid:29a791fd-3293-4f02-a4c1-d9cd1895d10f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "Y_A8oY1LNDxNsIInNE1jC",
              "ctx": null,
              "_testId": "urn:uuid:6445d14b-c2ec-4141-a6ea-14705db7ddd6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers 1.1)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:b96646eb-350e-4466-bd1e-7df20401f519",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:b60b6b7d-9aa4-491a-aae5-249bcb1dee77",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 579,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:f1db6343-d2b0-440c-9cfa-725ed35f8bd0",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 412,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:8bdb0560-003d-4def-946a-327c4040cf74",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 288,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-06-09T05:05:54Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:54Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAaQU1zsZxE4XxJMDRRVJw5ZtW8oZKnvVliiwnOQ3rsHfJTKPrRgfgtjsyJ6OkA_RL2FoXIGi2CXZBLcBQv6cNxVgjgCQD38Sv8J7eX5nK1FjId-A8Vs2aV7-ZTFSuvIbIY4JotDKYN1hAYY_K0T4kw_FCLOb7ZBko3GaMS1gwGCqEQkEY3BqXbZVNqN_4tpWq2PEgexYChPmGkYp43xYkgRseULqPqbGuRlhAh5KOIef0PWHbVbMP05Rz6522VxPtmOI57WLKEDMFfTlLZMG14CJtth9B9g1Xui4Lw_tlzug-xIr1NrH0DrvGd1hAfNNTSpsZIlg8yHJtGn_iOZ1gipBP5QCDq3WVJFRtcFJPVo-kcc-Fk8xDJEtQPOu5IJ-MKMC-83GYvQ7OQdUcslhAU1oKslXsSYampJ5mQwkmqAPCHPhSsHeLBOf9dicBlRfvUdwFf4xY-6E6n_mHV9Y7RG9M1Ujv0q9yIpZFSKMzM1hAcWOP5cQg0xbDy4b9mnVwHJ2MTzcsSasRPLJpdZUGWNAsd3VPiyUGqi341T2FNN8IdQRMwH-GNlRuZBWuSdRQM1hAiis-bS2FmRhmGHVs6MDRfCoDbcHEEG5IAVZmvPNTH4NM8HBrHQd4l2xywOZGgDhJkWGpRGSADE9Y9klA3-oeplhARVl6soPBC8SOZVbiMkrJ7wCulegqra7mWw4ZTUlm9DTK-Y7DTZWGRI-x4R4fZicclOE4e4ZOK6VgNgbyoskKTFhANfVWFDTfGX7-FUnKHZeDy8kpQZUCmmWzm3r20pv-byj6r34SRkgBhR-h42N1wFgDPUgI0xoBgoiA8fY5ev7_Q1hAW8thJByPtnj7oaHOPhNiJUhli6-J6n0fJw7C1BHfMAR-aU5ivQlGi9qxm0F1MbRZSL4mYNTQNNmovaTVYWu5NVhAxgdoJMuvSru5jFpIpq37lqzyfH3-FrHWKpfgfP6ewaIrKRtImwHo0wUdButpOIkvXKqj8tERHI23eDs7g4MoOVhAaTqrvW4t6AMjGPnYuxXzXNM0p1gZTWTB8c47o8iSD3_CY1FfsJk2hBCQuZ4UKNWQ1-uCnnt_7voW4oM3sI4R91hAIpPKUjTBXs9DpXgkvLsfZPd-zBiZe5tdr-N70sWEBPbVuR1H4BGjhDuq-MllTG4WiyGWtrgx0EQ_oub4G67iP1hA5b96UnaSOX7EbgX7fjkWPNtkLDPkU-_712JhEKc4ICmYiMWHqmsgskneUHjhJ5UWxlK5oGw1dAswsLqcmTYAsFhAj_7m2JMA_LQhj9Cl0ebD3rzdMZV564sZsP6qFaBeN2pezCdncKtUcjF_GrCabdxW8j-dTYu2ImGD9raOmIYFQFhAM3UVZTlJkGKMw0ORcB46Nbmygv3qsl051eCz9YLjHXB-JL-wYOzzIwdIt6IsW_QxijsuWdw6FI2L1Kf5DePwM1hA-9EszXpu3CGN1SGa9hJyD4tS-JM7e9rZMhZppou7TFmiuD4kguEvCmC46JI1BS_L3IV3rcf9sYKNoSNubxdo81hAQ0Q-kBknBXe0pMwjFDdgtq_JqG1g9oxIHGB3guSdAdVIruXd2Fr3IgEQk6uM2Gsv7CnMaluh84HUO_pEAKzLU1hAC3dqDBixFe4eBFS2QoC821XsOjW74mY9nLEQ41uYDdIAtI-7V2LImwWtV-zeoMT-qNDpYFSpsjCFXHUMyp_Dq1hAn4-gGcyG7ZRuDW6bSa_GuE8CEj1w_32TufydwuPpY4wzeEFSnRvysQ0k1Cy8px3xiAPsD_R_HjpzI0a3hgATElhANo7xQkkudwCoGiSdJvlPE1hSAFt5fuQnHetmlXtLDxl89bGtfDu3NrWCUo1-cMnBBN5Aoxv-fHiDBBuJbQtFjlhAZOatkRaDZ_ctxB8QNF7-1pK10fP9tz16-HaQMuyLfUjV0CUOCvYrJQQ0HUjQ2ZD6ZVbaunwamjWtu57UExefPVhAmYRZ1vj_vdEb_gO1r8LgmvdvHwjL5zyrwAZ8oBoPjkXnXLeMYdE43UDdLr0Y6VMvM0LzKsMFA_rY-gfAiktNrlhANbWQ1a_GVuKR_QCd-OVLzABhDPTM9CmqkrIfJ-fDTE-tiCH6fsEwyQVnrQ5Jf-7Q3JgyPNeKOqQbkGKgqAimBlhAmCsfYHw_3Lo1SmD0VgABcXuBRb_IrTZz3WgZ3Cxm9RRCSpT2ug7DVi6aMPyJSXXicnW2PhgZgR5yztB4QGX4jVhA5n8np7zxlxAN87-3OzJm_h9p5V65oz2Lm-0HgxdFZcNjDoOeBBC5GiafHWl_HEIlcjgXgmaV_v2kh-gyRwHGRFhAM6U9CgJveuet6GpzGp_uNFJBemNHScQCJWXmoU-FC_0sxO6qrz2-A2P7Jktffc6QRiF0aR-jiLNQuj0Lt9yM-1hA7PP127fx71VuJSqkezQ7xIfirKX2f-MxUNYuRJk6fHSdnjWBcCJGThKUCtByvXpFQUssPyIm0INP43rXnV7tpVhAxxn89sT87kPpaabxYrBIJ2RnhSYhzKLXKhEn5bA8E_j04RSxf8N-jeLJbUpzZPZZ2zg0973EUS5tylGFz-CH51hABcMuGEFo7iVmEMU1kk4SABmrX7eiwUD8R4nL-_8YyGQVhgAKW_uQNaEe3YeWXZpojTxz_QFdaZFbPuqorr_GZFhAbNihfHmt-cfswkPTsvHhc_Uzq_Hlr6omsoPQr2TZPKAf2kLcOJiBtO-VbZxKJ4hBswejJFHs7-U8kmwSfsCC6FhAaBw2y_czrkkeEu4dEwDfAUZmM8wfnT0gb7IpHFvfyJ7jSvJN1teFkEoLK4N7rhAyhbWpoSr_TvU1Lei4GR__wlhA6j_1rhsp-ytwse86BI82dfM1Dr5GdOzLD5olVfQiIpEvus_GsltXYcLv7tmfqTuh7NA1YVnLdYclIgr0Kpse7lhAWpA0AytdglX1Nmh8FX7XTuPMpBOnZaxIGL14RZkAw72g_7Mi4sPe9ZrTboEGK96Uha-vBSk0Od_LnYVL50kVWVhAJgdDSRlyOxG9QGzxjive95SLG9Lc8OAtlvp1X7ryvOeYDOcNccIL4AiFSbZwpJhMjOq8qcc9t9S5cwY_Po1WqVhAwdwPuszhAPoWR777_puaw4Q-NWV-ksNA9FozONUf8B5vUAJHtuQPKqEyNlWxtp3Ewonrj-SejXgTHMjDLqhzx1hASBHGfoAyCxNJ-enk9n5uOAeGmXebDpnoGGzlcMn4b1WGAgJSp_sPriyVkEzqeSzuT2TC89qN7-rEweDSc9pq6lhAscxSSH8dmG2QF1-Foh6PFssxWS6-yl4mkOGNmjSiTPmySbkLmQAqIhFlFFTotyxzFTx4QONH1R3MCPWy61VDxVhAUrCMmlySDsy_993nxEBerHP_oIna00h_eJtUsZO4e-QjW2gqkrSKzoBaUaQKahCAWNLBkG4b8YHe-SeFBBog-lhAeTQHNUiQ-pDplPxrwID53973vq0z7cHbhdB6y5w6DiORtpojb8nGF-597q6YYZpeklvVlXDAOGrEc6pUGP9GQVhAOPK266S1wgBAlVuTARdjfWQiNI0gV00p-McOeyjKrkYL55SIa0-6fFSiZ9I_345Wk360alOVStJ790yhdU9N0FhAx5ZPHonu0pLmD2PGAKezezb9UwRbAHUl42MNNd2vcEtkcFlZuVPGQs5N6ZD53Gj37DqLmAWSFCdPzbLMjzx_PVhA4otjimuXLsCXxDfHvNHiXjvDwpduHHGx6WQBWjfzZY6RFfv9kkeZv28XE8UJj21tkmLLJ5Ugah-iqWEET222xlhAHSYKRZegFNakh9CbEPZC6VhQlhzq3uAfnwVjHckl7Srff8MOFmUSmFNYkSnlT7huzsksUajlc0G02W65O8__F1hADAVrT0y_yr1cueHT2OKQP8eRApf_CtoJsdympxmvHcM0MdnCKFq9Uo3K3sKd-cw3Mh-ClZiAEkBRQw4Mwx7qL1hANqzffZ8dHEgeYWciIyLuXDD4U_6AWDuNYfkTpigPOLToFYQ5oqfpRxn12PADcvbCMuIk3CvPBEVQ2gJ027xn11hAxEf1HsFhYYSdoIyq7G1EMdjW0mYxIqjbXRX0aGj1IYhRz2h1osAfGHMnFNtfDiJ2oQ7FKYOxtu0Ti8LNkRQYEVhAoGP7RTJexUP4Mq5bgFHDhymo7IcDTFooPjNcqS_coN-CPt6oJNj3r9OD0nb4ebYUqIkl8GAC8tCsM1caRvyTclhAJdn-zw7UaNyQKb80RfDl1CZLurymSrJnmj223GUAe3Grf-pSb6sDq4l-ne8AUhep6rAXBfSEMFyPCm34VJsojVhAuT6yFHJmGcKq3rnPe3pwMWrHY23aWVVJRW8W4pofK8skoDzd4FyzdmvgewGIIQVLGrabuHtsE5ZmCYMpjgrvrFhA6ovGeAiBaU7q3H9Orhqk-cPfP5DCyoe4pkl9doVn260sw2FCzWlOXDg6rrGCfh3o6YWfDf4vJIbjcCyImO5o5lhATImRcz7QgBUD6x0q-C5iCG1dVn7KoiDu2BwOdKeglv_9iZ7mGh4gx-VRS-Upr6KaiHWwt_dicuBq6wuYdiL-n1hAyc1NJGU6aiEazlhF9gOhzXyEXTha9KC6YiBWovZW4uXs2S17E76cxtYfhTLs9wxKu-eSgzs0CFgG6X2JnKPBBVhAb8-ScPz6ImzW1nFzvt9pYJAuJ7i1aD-i2Z0RFz7GHbxs-YHvJs3oKo0rfUelucOcak4jE-5wSXwBfK8F7McKWlhA3kVFSo5KrQwulttyBpf3HrCpdyfmpo60fqsTxiUyehkX9cSkoxdclRejoLkSYfhHp0AUJApapp9lLyShcdn5FFhAxmD_KeHs4TXjCMpWutkQpIx-k9XIXaE_VbnApCWEvruZGkCD-VGliTzG7IqwKZwB8yf4MjvlkuVzy_6U5_8nlrAAWCAhSSRRTtIUU68-7032cus6jkkHw49sPrtmefsgEHfn9AFYIPKQcUmoFsUvMSVHIVQaW3Lvs4THLRog2UKEwku7qMwPAlggbAa8Cw804oIplXwh5BD-8S7xVfARUJGlhTiQgAjHZUsDWCAkq7JcNBULZ9zGGkavG5M5Qk2_1NO5FVNUDvtzcmIiZgRYICmqW2sMLb-rI55c_oLMxxWi586xC2oglGKbN8jem7WQBVggcTwaYUCEE0mrPiz0iFhmDCKX0Yt7In3dG7bDfOndhs4GWCD7i3H3jZmI26a4UOln2UrF0DxaGfc2OBAsTArv81U93QdYIBRuYT1S-0VICm0jgM-4T7PmGb5r9A-UnvkmRsvsXxblCFggVb7IN2GOjocej8yrBYd5O7Yg5wyeTvoQR-H4JguhQUMJWCBwLyIC8fc3GJpqoSsdNU8C8QjoKtNEHg3Uc9CLLAeZEwpYIFr-duaoYFzOSyPPSoT6JzMJowpxTi9-Y0o_k5ehqTMVC1ggcx2gS_fvLeRPR2nb9h2BdWbHJ1nSryTG6rL_baJE4_YMWCB0XlMDiCO1GnHYViSLbkQnKNxz2kt_7otXjEiOGLrAHw1YIKU-o1smxmPNiHDzV4gzZ4h4x2bb6_Z2_rZTJuy8bKeWDlggHgnaXyOnyhzx2rgxS8h6GChOHX4b1sfLdpN-Z8gp2qEPWCCFXkftAeSP_FCDkmrfgD2iNJmGRDj-vEojfddnEnbgw4QXGBgYGhgb\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-06-09T05:05:54Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:54Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAaQU1zsZxE4XxJMDRRVJw5ZtW8oZKnvVliiwnOQ3rsHfJTKPrRgfgtjsyJ6OkA_RL2FoXIGi2CXZBLcBQv6cNxVgjgCQD38Sv8J7eX5nK1FjId-A8Vs2aV7-ZTFSuvIbIY4JotDKYN1hAYY_K0T4kw_FCLOb7ZBko3GaMS1gwGCqEQkEY3BqXbZVNqN_4tpWq2PEgexYChPmGkYp43xYkgRseULqPqbGuRlhAh5KOIef0PWHbVbMP05Rz6522VxPtmOI57WLKEDMFfTlLZMG14CJtth9B9g1Xui4Lw_tlzug-xIr1NrH0DrvGd1hAfNNTSpsZIlg8yHJtGn_iOZ1gipBP5QCDq3WVJFRtcFJPVo-kcc-Fk8xDJEtQPOu5IJ-MKMC-83GYvQ7OQdUcslhAU1oKslXsSYampJ5mQwkmqAPCHPhSsHeLBOf9dicBlRfvUdwFf4xY-6E6n_mHV9Y7RG9M1Ujv0q9yIpZFSKMzM1hAcWOP5cQg0xbDy4b9mnVwHJ2MTzcsSasRPLJpdZUGWNAsd3VPiyUGqi341T2FNN8IdQRMwH-GNlRuZBWuSdRQM1hAiis-bS2FmRhmGHVs6MDRfCoDbcHEEG5IAVZmvPNTH4NM8HBrHQd4l2xywOZGgDhJkWGpRGSADE9Y9klA3-oeplhARVl6soPBC8SOZVbiMkrJ7wCulegqra7mWw4ZTUlm9DTK-Y7DTZWGRI-x4R4fZicclOE4e4ZOK6VgNgbyoskKTFhANfVWFDTfGX7-FUnKHZeDy8kpQZUCmmWzm3r20pv-byj6r34SRkgBhR-h42N1wFgDPUgI0xoBgoiA8fY5ev7_Q1hAW8thJByPtnj7oaHOPhNiJUhli6-J6n0fJw7C1BHfMAR-aU5ivQlGi9qxm0F1MbRZSL4mYNTQNNmovaTVYWu5NVhAxgdoJMuvSru5jFpIpq37lqzyfH3-FrHWKpfgfP6ewaIrKRtImwHo0wUdButpOIkvXKqj8tERHI23eDs7g4MoOVhAaTqrvW4t6AMjGPnYuxXzXNM0p1gZTWTB8c47o8iSD3_CY1FfsJk2hBCQuZ4UKNWQ1-uCnnt_7voW4oM3sI4R91hAIpPKUjTBXs9DpXgkvLsfZPd-zBiZe5tdr-N70sWEBPbVuR1H4BGjhDuq-MllTG4WiyGWtrgx0EQ_oub4G67iP1hA5b96UnaSOX7EbgX7fjkWPNtkLDPkU-_712JhEKc4ICmYiMWHqmsgskneUHjhJ5UWxlK5oGw1dAswsLqcmTYAsFhAj_7m2JMA_LQhj9Cl0ebD3rzdMZV564sZsP6qFaBeN2pezCdncKtUcjF_GrCabdxW8j-dTYu2ImGD9raOmIYFQFhAM3UVZTlJkGKMw0ORcB46Nbmygv3qsl051eCz9YLjHXB-JL-wYOzzIwdIt6IsW_QxijsuWdw6FI2L1Kf5DePwM1hA-9EszXpu3CGN1SGa9hJyD4tS-JM7e9rZMhZppou7TFmiuD4kguEvCmC46JI1BS_L3IV3rcf9sYKNoSNubxdo81hAQ0Q-kBknBXe0pMwjFDdgtq_JqG1g9oxIHGB3guSdAdVIruXd2Fr3IgEQk6uM2Gsv7CnMaluh84HUO_pEAKzLU1hAC3dqDBixFe4eBFS2QoC821XsOjW74mY9nLEQ41uYDdIAtI-7V2LImwWtV-zeoMT-qNDpYFSpsjCFXHUMyp_Dq1hAn4-gGcyG7ZRuDW6bSa_GuE8CEj1w_32TufydwuPpY4wzeEFSnRvysQ0k1Cy8px3xiAPsD_R_HjpzI0a3hgATElhANo7xQkkudwCoGiSdJvlPE1hSAFt5fuQnHetmlXtLDxl89bGtfDu3NrWCUo1-cMnBBN5Aoxv-fHiDBBuJbQtFjlhAZOatkRaDZ_ctxB8QNF7-1pK10fP9tz16-HaQMuyLfUjV0CUOCvYrJQQ0HUjQ2ZD6ZVbaunwamjWtu57UExefPVhAmYRZ1vj_vdEb_gO1r8LgmvdvHwjL5zyrwAZ8oBoPjkXnXLeMYdE43UDdLr0Y6VMvM0LzKsMFA_rY-gfAiktNrlhANbWQ1a_GVuKR_QCd-OVLzABhDPTM9CmqkrIfJ-fDTE-tiCH6fsEwyQVnrQ5Jf-7Q3JgyPNeKOqQbkGKgqAimBlhAmCsfYHw_3Lo1SmD0VgABcXuBRb_IrTZz3WgZ3Cxm9RRCSpT2ug7DVi6aMPyJSXXicnW2PhgZgR5yztB4QGX4jVhA5n8np7zxlxAN87-3OzJm_h9p5V65oz2Lm-0HgxdFZcNjDoOeBBC5GiafHWl_HEIlcjgXgmaV_v2kh-gyRwHGRFhAM6U9CgJveuet6GpzGp_uNFJBemNHScQCJWXmoU-FC_0sxO6qrz2-A2P7Jktffc6QRiF0aR-jiLNQuj0Lt9yM-1hA7PP127fx71VuJSqkezQ7xIfirKX2f-MxUNYuRJk6fHSdnjWBcCJGThKUCtByvXpFQUssPyIm0INP43rXnV7tpVhAxxn89sT87kPpaabxYrBIJ2RnhSYhzKLXKhEn5bA8E_j04RSxf8N-jeLJbUpzZPZZ2zg0973EUS5tylGFz-CH51hABcMuGEFo7iVmEMU1kk4SABmrX7eiwUD8R4nL-_8YyGQVhgAKW_uQNaEe3YeWXZpojTxz_QFdaZFbPuqorr_GZFhAbNihfHmt-cfswkPTsvHhc_Uzq_Hlr6omsoPQr2TZPKAf2kLcOJiBtO-VbZxKJ4hBswejJFHs7-U8kmwSfsCC6FhAaBw2y_czrkkeEu4dEwDfAUZmM8wfnT0gb7IpHFvfyJ7jSvJN1teFkEoLK4N7rhAyhbWpoSr_TvU1Lei4GR__wlhA6j_1rhsp-ytwse86BI82dfM1Dr5GdOzLD5olVfQiIpEvus_GsltXYcLv7tmfqTuh7NA1YVnLdYclIgr0Kpse7lhAWpA0AytdglX1Nmh8FX7XTuPMpBOnZaxIGL14RZkAw72g_7Mi4sPe9ZrTboEGK96Uha-vBSk0Od_LnYVL50kVWVhAJgdDSRlyOxG9QGzxjive95SLG9Lc8OAtlvp1X7ryvOeYDOcNccIL4AiFSbZwpJhMjOq8qcc9t9S5cwY_Po1WqVhAwdwPuszhAPoWR777_puaw4Q-NWV-ksNA9FozONUf8B5vUAJHtuQPKqEyNlWxtp3Ewonrj-SejXgTHMjDLqhzx1hASBHGfoAyCxNJ-enk9n5uOAeGmXebDpnoGGzlcMn4b1WGAgJSp_sPriyVkEzqeSzuT2TC89qN7-rEweDSc9pq6lhAscxSSH8dmG2QF1-Foh6PFssxWS6-yl4mkOGNmjSiTPmySbkLmQAqIhFlFFTotyxzFTx4QONH1R3MCPWy61VDxVhAUrCMmlySDsy_993nxEBerHP_oIna00h_eJtUsZO4e-QjW2gqkrSKzoBaUaQKahCAWNLBkG4b8YHe-SeFBBog-lhAeTQHNUiQ-pDplPxrwID53973vq0z7cHbhdB6y5w6DiORtpojb8nGF-597q6YYZpeklvVlXDAOGrEc6pUGP9GQVhAOPK266S1wgBAlVuTARdjfWQiNI0gV00p-McOeyjKrkYL55SIa0-6fFSiZ9I_345Wk360alOVStJ790yhdU9N0FhAx5ZPHonu0pLmD2PGAKezezb9UwRbAHUl42MNNd2vcEtkcFlZuVPGQs5N6ZD53Gj37DqLmAWSFCdPzbLMjzx_PVhA4otjimuXLsCXxDfHvNHiXjvDwpduHHGx6WQBWjfzZY6RFfv9kkeZv28XE8UJj21tkmLLJ5Ugah-iqWEET222xlhAHSYKRZegFNakh9CbEPZC6VhQlhzq3uAfnwVjHckl7Srff8MOFmUSmFNYkSnlT7huzsksUajlc0G02W65O8__F1hADAVrT0y_yr1cueHT2OKQP8eRApf_CtoJsdympxmvHcM0MdnCKFq9Uo3K3sKd-cw3Mh-ClZiAEkBRQw4Mwx7qL1hANqzffZ8dHEgeYWciIyLuXDD4U_6AWDuNYfkTpigPOLToFYQ5oqfpRxn12PADcvbCMuIk3CvPBEVQ2gJ027xn11hAxEf1HsFhYYSdoIyq7G1EMdjW0mYxIqjbXRX0aGj1IYhRz2h1osAfGHMnFNtfDiJ2oQ7FKYOxtu0Ti8LNkRQYEVhAoGP7RTJexUP4Mq5bgFHDhymo7IcDTFooPjNcqS_coN-CPt6oJNj3r9OD0nb4ebYUqIkl8GAC8tCsM1caRvyTclhAJdn-zw7UaNyQKb80RfDl1CZLurymSrJnmj223GUAe3Grf-pSb6sDq4l-ne8AUhep6rAXBfSEMFyPCm34VJsojVhAuT6yFHJmGcKq3rnPe3pwMWrHY23aWVVJRW8W4pofK8skoDzd4FyzdmvgewGIIQVLGrabuHtsE5ZmCYMpjgrvrFhA6ovGeAiBaU7q3H9Orhqk-cPfP5DCyoe4pkl9doVn260sw2FCzWlOXDg6rrGCfh3o6YWfDf4vJIbjcCyImO5o5lhATImRcz7QgBUD6x0q-C5iCG1dVn7KoiDu2BwOdKeglv_9iZ7mGh4gx-VRS-Upr6KaiHWwt_dicuBq6wuYdiL-n1hAyc1NJGU6aiEazlhF9gOhzXyEXTha9KC6YiBWovZW4uXs2S17E76cxtYfhTLs9wxKu-eSgzs0CFgG6X2JnKPBBVhAb8-ScPz6ImzW1nFzvt9pYJAuJ7i1aD-i2Z0RFz7GHbxs-YHvJs3oKo0rfUelucOcak4jE-5wSXwBfK8F7McKWlhA3kVFSo5KrQwulttyBpf3HrCpdyfmpo60fqsTxiUyehkX9cSkoxdclRejoLkSYfhHp0AUJApapp9lLyShcdn5FFhAxmD_KeHs4TXjCMpWutkQpIx-k9XIXaE_VbnApCWEvruZGkCD-VGliTzG7IqwKZwB8yf4MjvlkuVzy_6U5_8nlrAAWCAhSSRRTtIUU68-7032cus6jkkHw49sPrtmefsgEHfn9AFYIPKQcUmoFsUvMSVHIVQaW3Lvs4THLRog2UKEwku7qMwPAlggbAa8Cw804oIplXwh5BD-8S7xVfARUJGlhTiQgAjHZUsDWCAkq7JcNBULZ9zGGkavG5M5Qk2_1NO5FVNUDvtzcmIiZgRYICmqW2sMLb-rI55c_oLMxxWi586xC2oglGKbN8jem7WQBVggcTwaYUCEE0mrPiz0iFhmDCKX0Yt7In3dG7bDfOndhs4GWCD7i3H3jZmI26a4UOln2UrF0DxaGfc2OBAsTArv81U93QdYIBRuYT1S-0VICm0jgM-4T7PmGb5r9A-UnvkmRsvsXxblCFggVb7IN2GOjocej8yrBYd5O7Yg5wyeTvoQR-H4JguhQUMJWCBwLyIC8fc3GJpqoSsdNU8C8QjoKtNEHg3Uc9CLLAeZEwpYIFr-duaoYFzOSyPPSoT6JzMJowpxTi9-Y0o_k5ehqTMVC1ggcx2gS_fvLeRPR2nb9h2BdWbHJ1nSryTG6rL_baJE4_YMWCB0XlMDiCO1GnHYViSLbkQnKNxz2kt_7otXjEiOGLrAHw1YIKU-o1smxmPNiHDzV4gzZ4h4x2bb6_Z2_rZTJuy8bKeWDlggHgnaXyOnyhzx2rgxS8h6GChOHX4b1sfLdpN-Z8gp2qEPWCCFXkftAeSP_FCDkmrfgD2iNJmGRDj-vEojfddnEnbgw4QXGBgYGhgb"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:8b615f87-e669-46ea-b9d9-c392fedbb6c6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-06-09T05:05:54Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:54Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAFU5dgQHN_DLsp0RZKQkzrVLo70eCe0Kv3ham0AF7ifA3XX-J_CGZQPGA_LbsYurSMtE0pYo7uOuX6ziI8i2W81gjgCQD5PEVXyU4ZwHf0dzqO_EWqWshugrv5Ui4MY-26UVLbCiYIlhAwQN8GgdZ6rqIFhUsiRt0tpVKlxYffSTX00Jjli5mlDoPF5K1F5KdecoTP-llKSuUM38hNAqdcCT79sPwJrar0FhAXcfJ9kjnT9AsVignklWzKe27Fd90e2W1pWuXCGNwmEdJEhznJDgNLNWfTMDxZ4MgJTbYNy0Ok-tm_8uk5WsFClhABQcwkUyNIteZuMtguh8huU3oftBIImPQkPNyASHwpXZQAHlwDC18qShdXo4Fj4FMkD3uoecN7XImj0BOOdUME1hARWWpAO0wTpizXatNtEu-_yZpqp2rPU3ydqPzbs3uuOxoZNgdYBvcuHFFxBGe44HOWAnyW371jPLkxFDnAz1t5VhAxP2SSWqD7OAVoC3DvtrIax6C4eC--vTKGLciEem5976pOHE-jIxnZGB9d0XZErGoxIFpBX9bPs_l6fbjBQnhdlhAG8T-BIOsBnolsmJRSRjQj2ALEemH_Onwt2oWa-VloQhRSXXt7Da-Q0wYT_aY-1TMeN1kJ4D32DHKsGyT5Xji9lhAbUbjTMwaF43JiECd297xGN1xJWWi8UJ9qNkziLNHbsveb4CF7doUG1YYvx6C6C948OunxbF280qD9JdiGlCw4lhAQsZjgywiZoLBGLrxTLd2PacrnYz-tbeMl59_wp50RpM97fPVtuju6wBBDE31J3_GcPLQImmTy0qgb1DwAvyx9lhAD-nw6ThJWLNzbbdjosKGPahFvkZgC1_gr5e2WUoM4NaR9uQm5V3lkMhiK3RDCzdEtB6erc644osKroCj7czYS1hAK-YO44IshTeZSABCmnIDyBrA5WEXJme6Ii858Tl9uRmmZXF-QKjRkHAQYHlgg4tUrYMUPrVT43adg64tkAdh5lhAdxUcZ-l3H_2bUz_Jx3AKv1g0ji6eWrwSCxZa8SZNAZiZGiN-VBLsy-k0uYEHzfqJGrsg5HHrRhmfakoPVf5YxlhAJZuAyPpqSp_FMjsqqQn7dA5lxbToXDLKRlnzEZkXQp42jnzSLmC0DmZHMDa0ng5kfJGi9r5y54jIC_kapgvWRlhALuMKEusyXgUBf_V-yzJ5f1LHILYC6T7-Xi5huA4TYVpigLYUlEzduu9jEgF6w4Bfjk07RWy9RkJNL38OZ2UC6lhARl_yHY7SiF_pRYzGVIH6gWI1VPILfriMUB_CyM5IEEBSBefo-wz2FOve0sGAM7_YEKcgdL8KradaqlQ0EIvxB1hAj5RflMM2UsT7aNCw2fTB0El9kFotjEBQlixRIm3Nuuvx-MmQxfTYOS9B9YRrFUz2RenyudVqEdw7FlRfGq6mB1hAppSVhqqZLeDu5T3lPoINMmx0L6MAX0yCiybMYnxXg3DVKpvFqOXdFvlZVCLR8MzukDF_Yu_lxyakiyl9DVov4lhAko-pDqHxuOljmfTMoult94aMVtulCi_k7GTbGir9YNFUQiTfMyfsYs_UVz_CwgF7_kuUDyX0jUY4Haasjxb6klhAFaU-q7X5HaGGvyc0lbDCKjLUtSKYrm99CEN-QPjJasG1UeHZZhzqjaDAPskMQYvjoXwH_S0FlIgOxY-wYDIvVFhAWMxxq_wUUss3Gcp1-BNPIW0qVT-F26HS62igrhjjhLlQx5TT_LFjmFuw73b_bYaI0nOxaaeqysZ2dDVQn0ZF11hA-PVDkAFVd_XS97Mz0v8me-6oUAWZB9LDLONyyOnE36i_I2Npbt-wad7hZXKW4FNkWfX3FCnD8wKebHUQHGCYbFhA5H-Ke2DpiEnowu83wwplUaiSRET7V_y52y5Vlyk565Zpx7-oFet0WrdBL1SylnnYaD5CeSHwDK4Adt7txaJeHlhAhq9GfG-hNmPK3izZ4vWouP7g3r9ocKzf-wEzH9ax0uTRmGsWY06-D1EghmscbgO_Qaqbl37I-MX2I1FZwQDkylhABXQCmNMhEfcmQ3z5XFYjzFyThapnT9EtivlfIqey9pOnjoqPpHvfVY4Xq0shKSYrJ_bQziMyINPYjBOypH_Zo1hATeTbJGg4Hb10xkvCPCtUTN9K69fah_rncVZUzhA89NlBhCE4ez9TIRBhYBsu1XfSLGc_eo_xUQux9GLkDVaFvVhAE6nNPXXrTwy_WP1bpTQehix_CPW_sziowM1bHo4PZnG0C0L_tpTK2hGSenHxw66nxFRQ95E3Ndfin_S32RfGJlhAAYJRddfRX2kEWa-a0yTw1n5CHoyI3q6gUJYpQwWPhB52fZFrVEjQ1APToNcjoodHCx0Z8GAlV8-8BsPAQfakilhAH2d1XRMZg09J838eMbL3-h5CACLiit0FveLajSCZFEK7P9yPKlIvwXhZ7xa0FNVsj9nn0ty4BdK2yMjGVbZHQVhAP5JJeDNuZJHqbofGE60vPUzitW9isNAxOKf75Izsnm4NdhyOWU2Ym8aDg-zJExa7d0ChukJftwFn8sGHSo89EFhANIlXhy3twueI0HruWLr95U87Er2d2l6pqcosrjeAa2rMpFs0H6Ln5dYtJV77K9dQ184zxpe77xHe1iuBJS5guVhAX76-leU1pm4MQhW1rbiFLVrHkPww5HHwb1yIu2-ZLXEZFJeIgEzSI11Rt68YpMKvuDqHbItXOeI051ccm4bAfVhAYxhAXzh5pj7rN960iWMEWkCyS3-duJvzISHY0KSHz7gW8dlBdtUuTcFJT1lt8uqX013Yku4KCBl1y9KlJ2cbWVhAQUP0UROrLk5W1W1bjqJOC8ATodhx3KDzYB0C_ejlYos9g73Scbt3tq-XVrys9hL2OsPPQQY_LdcztBFaWvoL4lhA-ZZuAiIWEIyewBrLhwAMndkqSWwcol0svMo8hIqpWLeSfDMbk4Bb6URoN9TpwHJh5UEdDgyy8YT6RYaRpxH0kVhA5ESaCibqFG1QGop6bCHLEqpujxq4HYVa1lupMhKBOwXWMp5tbEAixrfmmS7scTTT3kh6LJ40vS0hyk90p3hwt6sAWCCco5ioLTcYp9wc9N_XbMOKokYm7IyYeQuGV4gXdXX_cgFYIDyd5iad639c-fdDrftrM_NETdgMKwUdsiXAE0BKsSgoAlgg9VVipEMZA6N00EfIP8rYqLjuslJYMSQSLmIOEUNF_Q0DWCDU_qwyoEZ0VhalM9SaBqIxjMFKBwdWxbFbcrrxWVBs7gRYINBFafVl0YQhYC7cUDThC5xcoPyrFXQA7lB7OrhFsYWdBVgg54hZkPuaUsLWNUJy8aHL_duQglEv0rfBJKpNjaJu4ZYGWCBhreW2dBiVwEICFVxGXyiXzJftwiEQTWvrdYleH9RiQQdYILFe2tHBGgzhHc8XTbU1xES05_RR5iZtd-7nKC54XgETCFggJL2Jn2tIMA6FTIUHXno1fgJksI6vzvSr7qnYfXmrLNYJWCC5xJCrGNXlMSnye1AIbh7gtN7q6dlFwNcwC4nvidfh8wpYIE5jBSjBxjYuuAQQvHCDLAxTzLw8ho9_6I6B7kQwsQcYhAsMDg8\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-06-09T05:05:54Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:54Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAFU5dgQHN_DLsp0RZKQkzrVLo70eCe0Kv3ham0AF7ifA3XX-J_CGZQPGA_LbsYurSMtE0pYo7uOuX6ziI8i2W81gjgCQD5PEVXyU4ZwHf0dzqO_EWqWshugrv5Ui4MY-26UVLbCiYIlhAwQN8GgdZ6rqIFhUsiRt0tpVKlxYffSTX00Jjli5mlDoPF5K1F5KdecoTP-llKSuUM38hNAqdcCT79sPwJrar0FhAXcfJ9kjnT9AsVignklWzKe27Fd90e2W1pWuXCGNwmEdJEhznJDgNLNWfTMDxZ4MgJTbYNy0Ok-tm_8uk5WsFClhABQcwkUyNIteZuMtguh8huU3oftBIImPQkPNyASHwpXZQAHlwDC18qShdXo4Fj4FMkD3uoecN7XImj0BOOdUME1hARWWpAO0wTpizXatNtEu-_yZpqp2rPU3ydqPzbs3uuOxoZNgdYBvcuHFFxBGe44HOWAnyW371jPLkxFDnAz1t5VhAxP2SSWqD7OAVoC3DvtrIax6C4eC--vTKGLciEem5976pOHE-jIxnZGB9d0XZErGoxIFpBX9bPs_l6fbjBQnhdlhAG8T-BIOsBnolsmJRSRjQj2ALEemH_Onwt2oWa-VloQhRSXXt7Da-Q0wYT_aY-1TMeN1kJ4D32DHKsGyT5Xji9lhAbUbjTMwaF43JiECd297xGN1xJWWi8UJ9qNkziLNHbsveb4CF7doUG1YYvx6C6C948OunxbF280qD9JdiGlCw4lhAQsZjgywiZoLBGLrxTLd2PacrnYz-tbeMl59_wp50RpM97fPVtuju6wBBDE31J3_GcPLQImmTy0qgb1DwAvyx9lhAD-nw6ThJWLNzbbdjosKGPahFvkZgC1_gr5e2WUoM4NaR9uQm5V3lkMhiK3RDCzdEtB6erc644osKroCj7czYS1hAK-YO44IshTeZSABCmnIDyBrA5WEXJme6Ii858Tl9uRmmZXF-QKjRkHAQYHlgg4tUrYMUPrVT43adg64tkAdh5lhAdxUcZ-l3H_2bUz_Jx3AKv1g0ji6eWrwSCxZa8SZNAZiZGiN-VBLsy-k0uYEHzfqJGrsg5HHrRhmfakoPVf5YxlhAJZuAyPpqSp_FMjsqqQn7dA5lxbToXDLKRlnzEZkXQp42jnzSLmC0DmZHMDa0ng5kfJGi9r5y54jIC_kapgvWRlhALuMKEusyXgUBf_V-yzJ5f1LHILYC6T7-Xi5huA4TYVpigLYUlEzduu9jEgF6w4Bfjk07RWy9RkJNL38OZ2UC6lhARl_yHY7SiF_pRYzGVIH6gWI1VPILfriMUB_CyM5IEEBSBefo-wz2FOve0sGAM7_YEKcgdL8KradaqlQ0EIvxB1hAj5RflMM2UsT7aNCw2fTB0El9kFotjEBQlixRIm3Nuuvx-MmQxfTYOS9B9YRrFUz2RenyudVqEdw7FlRfGq6mB1hAppSVhqqZLeDu5T3lPoINMmx0L6MAX0yCiybMYnxXg3DVKpvFqOXdFvlZVCLR8MzukDF_Yu_lxyakiyl9DVov4lhAko-pDqHxuOljmfTMoult94aMVtulCi_k7GTbGir9YNFUQiTfMyfsYs_UVz_CwgF7_kuUDyX0jUY4Haasjxb6klhAFaU-q7X5HaGGvyc0lbDCKjLUtSKYrm99CEN-QPjJasG1UeHZZhzqjaDAPskMQYvjoXwH_S0FlIgOxY-wYDIvVFhAWMxxq_wUUss3Gcp1-BNPIW0qVT-F26HS62igrhjjhLlQx5TT_LFjmFuw73b_bYaI0nOxaaeqysZ2dDVQn0ZF11hA-PVDkAFVd_XS97Mz0v8me-6oUAWZB9LDLONyyOnE36i_I2Npbt-wad7hZXKW4FNkWfX3FCnD8wKebHUQHGCYbFhA5H-Ke2DpiEnowu83wwplUaiSRET7V_y52y5Vlyk565Zpx7-oFet0WrdBL1SylnnYaD5CeSHwDK4Adt7txaJeHlhAhq9GfG-hNmPK3izZ4vWouP7g3r9ocKzf-wEzH9ax0uTRmGsWY06-D1EghmscbgO_Qaqbl37I-MX2I1FZwQDkylhABXQCmNMhEfcmQ3z5XFYjzFyThapnT9EtivlfIqey9pOnjoqPpHvfVY4Xq0shKSYrJ_bQziMyINPYjBOypH_Zo1hATeTbJGg4Hb10xkvCPCtUTN9K69fah_rncVZUzhA89NlBhCE4ez9TIRBhYBsu1XfSLGc_eo_xUQux9GLkDVaFvVhAE6nNPXXrTwy_WP1bpTQehix_CPW_sziowM1bHo4PZnG0C0L_tpTK2hGSenHxw66nxFRQ95E3Ndfin_S32RfGJlhAAYJRddfRX2kEWa-a0yTw1n5CHoyI3q6gUJYpQwWPhB52fZFrVEjQ1APToNcjoodHCx0Z8GAlV8-8BsPAQfakilhAH2d1XRMZg09J838eMbL3-h5CACLiit0FveLajSCZFEK7P9yPKlIvwXhZ7xa0FNVsj9nn0ty4BdK2yMjGVbZHQVhAP5JJeDNuZJHqbofGE60vPUzitW9isNAxOKf75Izsnm4NdhyOWU2Ym8aDg-zJExa7d0ChukJftwFn8sGHSo89EFhANIlXhy3twueI0HruWLr95U87Er2d2l6pqcosrjeAa2rMpFs0H6Ln5dYtJV77K9dQ184zxpe77xHe1iuBJS5guVhAX76-leU1pm4MQhW1rbiFLVrHkPww5HHwb1yIu2-ZLXEZFJeIgEzSI11Rt68YpMKvuDqHbItXOeI051ccm4bAfVhAYxhAXzh5pj7rN960iWMEWkCyS3-duJvzISHY0KSHz7gW8dlBdtUuTcFJT1lt8uqX013Yku4KCBl1y9KlJ2cbWVhAQUP0UROrLk5W1W1bjqJOC8ATodhx3KDzYB0C_ejlYos9g73Scbt3tq-XVrys9hL2OsPPQQY_LdcztBFaWvoL4lhA-ZZuAiIWEIyewBrLhwAMndkqSWwcol0svMo8hIqpWLeSfDMbk4Bb6URoN9TpwHJh5UEdDgyy8YT6RYaRpxH0kVhA5ESaCibqFG1QGop6bCHLEqpujxq4HYVa1lupMhKBOwXWMp5tbEAixrfmmS7scTTT3kh6LJ40vS0hyk90p3hwt6sAWCCco5ioLTcYp9wc9N_XbMOKokYm7IyYeQuGV4gXdXX_cgFYIDyd5iad639c-fdDrftrM_NETdgMKwUdsiXAE0BKsSgoAlgg9VVipEMZA6N00EfIP8rYqLjuslJYMSQSLmIOEUNF_Q0DWCDU_qwyoEZ0VhalM9SaBqIxjMFKBwdWxbFbcrrxWVBs7gRYINBFafVl0YQhYC7cUDThC5xcoPyrFXQA7lB7OrhFsYWdBVgg54hZkPuaUsLWNUJy8aHL_duQglEv0rfBJKpNjaJu4ZYGWCBhreW2dBiVwEICFVxGXyiXzJftwiEQTWvrdYleH9RiQQdYILFe2tHBGgzhHc8XTbU1xES05_RR5iZtd-7nKC54XgETCFggJL2Jn2tIMA6FTIUHXno1fgJksI6vzvSr7qnYfXmrLNYJWCC5xJCrGNXlMSnye1AIbh7gtN7q6dlFwNcwC4nvidfh8wpYIE5jBSjBxjYuuAQQvHCDLAxTzLw8ho9_6I6B7kQwsQcYhAsMDg8"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:0c9213db-e143-41b4-8a10-cc7e67c52daa",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2603,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:7b21716a-bb6f-4625-a8d5-96c8f2536a20",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:685fecc8-2e49-4c2f-aab5-3709da50ac95",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:ac4c1c31-67b0-4a5d-8fcc-7253108cb5d5",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:d75ebaf1-e94e-4a14-8696-07557204795a",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 297,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 340,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_-5SrP46A7jdqBpfN0KQa",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:778b0797-6887-4bfe-b889-c1e06b3dc15f"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:ea3c908d-14a4-4a02-a971-c755f3588d40",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:5ca640e2-fa8d-452c-93b3-8c7e535d14b3",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:6c977e26-3cc7-4144-b4ab-7a8e43dec1b1",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:43d5a692-afc3-453f-9b72-3c634a6e6415",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:c01d9dbf-37df-4fc3-a096-563d197b92c1",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:eb725d88-fb7c-4350-aa3f-bd991d02fb6c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:c3f4063d-5703-42c5-9306-a7e737dce85a",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:33f2b723-512a-4298-82a3-f6bac5594882",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:a80f523b-a018-412d-b386-74ff44daa7ac",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:afc06898-8d46-4445-8ff6-0d3ba30f24d8",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_-5SrP46A7jdqBpfN0KQa",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:5cc70084-b14b-41c0-8d2e-73264ea62de2"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:68497fae-1731-4389-9620-e3b91af3f2d0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:49cd9303-051a-4e3e-a9b7-7ca02bc0059c",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:86d5697c-57f0-487e-82c4-00f356c47ac9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:70e97c85-60e2-43be-b48a-e55e55f8027d",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 761,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:cc206027-adfe-4c86-a4cb-c3ea9229107d",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 431,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:4fc53c00-dafd-4a46-a365-c58df6a976f6",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 360,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:84f9e149-8407-4e0d-9816-42ba0da68922",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:534dcc8f-7f78-430f-a53a-6c1b918fdb22",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:774f5689-1b33-4713-89d7-af7f14d6970d",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:c0293509-5a4e-4cf3-9778-1f100ae7306b",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_-5SrP46A7jdqBpfN0KQa",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:aae45775-2671-4515-ba27-a278e5a59e3f"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:5e16256a-d384-4069-8a4a-628e9a48970d",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:b96646eb-350e-4466-bd1e-7df20401f519",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:ea3c908d-14a4-4a02-a971-c755f3588d40",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:68497fae-1731-4389-9620-e3b91af3f2d0",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29627,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:b60b6b7d-9aa4-491a-aae5-249bcb1dee77",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 579,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:5ca640e2-fa8d-452c-93b3-8c7e535d14b3",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:49cd9303-051a-4e3e-a9b7-7ca02bc0059c",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:f1db6343-d2b0-440c-9cfa-725ed35f8bd0",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 412,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:6c977e26-3cc7-4144-b4ab-7a8e43dec1b1",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:86d5697c-57f0-487e-82c4-00f356c47ac9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 156,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:8bdb0560-003d-4def-946a-327c4040cf74",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 288,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-06-09T05:05:54Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:54Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAaQU1zsZxE4XxJMDRRVJw5ZtW8oZKnvVliiwnOQ3rsHfJTKPrRgfgtjsyJ6OkA_RL2FoXIGi2CXZBLcBQv6cNxVgjgCQD38Sv8J7eX5nK1FjId-A8Vs2aV7-ZTFSuvIbIY4JotDKYN1hAYY_K0T4kw_FCLOb7ZBko3GaMS1gwGCqEQkEY3BqXbZVNqN_4tpWq2PEgexYChPmGkYp43xYkgRseULqPqbGuRlhAh5KOIef0PWHbVbMP05Rz6522VxPtmOI57WLKEDMFfTlLZMG14CJtth9B9g1Xui4Lw_tlzug-xIr1NrH0DrvGd1hAfNNTSpsZIlg8yHJtGn_iOZ1gipBP5QCDq3WVJFRtcFJPVo-kcc-Fk8xDJEtQPOu5IJ-MKMC-83GYvQ7OQdUcslhAU1oKslXsSYampJ5mQwkmqAPCHPhSsHeLBOf9dicBlRfvUdwFf4xY-6E6n_mHV9Y7RG9M1Ujv0q9yIpZFSKMzM1hAcWOP5cQg0xbDy4b9mnVwHJ2MTzcsSasRPLJpdZUGWNAsd3VPiyUGqi341T2FNN8IdQRMwH-GNlRuZBWuSdRQM1hAiis-bS2FmRhmGHVs6MDRfCoDbcHEEG5IAVZmvPNTH4NM8HBrHQd4l2xywOZGgDhJkWGpRGSADE9Y9klA3-oeplhARVl6soPBC8SOZVbiMkrJ7wCulegqra7mWw4ZTUlm9DTK-Y7DTZWGRI-x4R4fZicclOE4e4ZOK6VgNgbyoskKTFhANfVWFDTfGX7-FUnKHZeDy8kpQZUCmmWzm3r20pv-byj6r34SRkgBhR-h42N1wFgDPUgI0xoBgoiA8fY5ev7_Q1hAW8thJByPtnj7oaHOPhNiJUhli6-J6n0fJw7C1BHfMAR-aU5ivQlGi9qxm0F1MbRZSL4mYNTQNNmovaTVYWu5NVhAxgdoJMuvSru5jFpIpq37lqzyfH3-FrHWKpfgfP6ewaIrKRtImwHo0wUdButpOIkvXKqj8tERHI23eDs7g4MoOVhAaTqrvW4t6AMjGPnYuxXzXNM0p1gZTWTB8c47o8iSD3_CY1FfsJk2hBCQuZ4UKNWQ1-uCnnt_7voW4oM3sI4R91hAIpPKUjTBXs9DpXgkvLsfZPd-zBiZe5tdr-N70sWEBPbVuR1H4BGjhDuq-MllTG4WiyGWtrgx0EQ_oub4G67iP1hA5b96UnaSOX7EbgX7fjkWPNtkLDPkU-_712JhEKc4ICmYiMWHqmsgskneUHjhJ5UWxlK5oGw1dAswsLqcmTYAsFhAj_7m2JMA_LQhj9Cl0ebD3rzdMZV564sZsP6qFaBeN2pezCdncKtUcjF_GrCabdxW8j-dTYu2ImGD9raOmIYFQFhAM3UVZTlJkGKMw0ORcB46Nbmygv3qsl051eCz9YLjHXB-JL-wYOzzIwdIt6IsW_QxijsuWdw6FI2L1Kf5DePwM1hA-9EszXpu3CGN1SGa9hJyD4tS-JM7e9rZMhZppou7TFmiuD4kguEvCmC46JI1BS_L3IV3rcf9sYKNoSNubxdo81hAQ0Q-kBknBXe0pMwjFDdgtq_JqG1g9oxIHGB3guSdAdVIruXd2Fr3IgEQk6uM2Gsv7CnMaluh84HUO_pEAKzLU1hAC3dqDBixFe4eBFS2QoC821XsOjW74mY9nLEQ41uYDdIAtI-7V2LImwWtV-zeoMT-qNDpYFSpsjCFXHUMyp_Dq1hAn4-gGcyG7ZRuDW6bSa_GuE8CEj1w_32TufydwuPpY4wzeEFSnRvysQ0k1Cy8px3xiAPsD_R_HjpzI0a3hgATElhANo7xQkkudwCoGiSdJvlPE1hSAFt5fuQnHetmlXtLDxl89bGtfDu3NrWCUo1-cMnBBN5Aoxv-fHiDBBuJbQtFjlhAZOatkRaDZ_ctxB8QNF7-1pK10fP9tz16-HaQMuyLfUjV0CUOCvYrJQQ0HUjQ2ZD6ZVbaunwamjWtu57UExefPVhAmYRZ1vj_vdEb_gO1r8LgmvdvHwjL5zyrwAZ8oBoPjkXnXLeMYdE43UDdLr0Y6VMvM0LzKsMFA_rY-gfAiktNrlhANbWQ1a_GVuKR_QCd-OVLzABhDPTM9CmqkrIfJ-fDTE-tiCH6fsEwyQVnrQ5Jf-7Q3JgyPNeKOqQbkGKgqAimBlhAmCsfYHw_3Lo1SmD0VgABcXuBRb_IrTZz3WgZ3Cxm9RRCSpT2ug7DVi6aMPyJSXXicnW2PhgZgR5yztB4QGX4jVhA5n8np7zxlxAN87-3OzJm_h9p5V65oz2Lm-0HgxdFZcNjDoOeBBC5GiafHWl_HEIlcjgXgmaV_v2kh-gyRwHGRFhAM6U9CgJveuet6GpzGp_uNFJBemNHScQCJWXmoU-FC_0sxO6qrz2-A2P7Jktffc6QRiF0aR-jiLNQuj0Lt9yM-1hA7PP127fx71VuJSqkezQ7xIfirKX2f-MxUNYuRJk6fHSdnjWBcCJGThKUCtByvXpFQUssPyIm0INP43rXnV7tpVhAxxn89sT87kPpaabxYrBIJ2RnhSYhzKLXKhEn5bA8E_j04RSxf8N-jeLJbUpzZPZZ2zg0973EUS5tylGFz-CH51hABcMuGEFo7iVmEMU1kk4SABmrX7eiwUD8R4nL-_8YyGQVhgAKW_uQNaEe3YeWXZpojTxz_QFdaZFbPuqorr_GZFhAbNihfHmt-cfswkPTsvHhc_Uzq_Hlr6omsoPQr2TZPKAf2kLcOJiBtO-VbZxKJ4hBswejJFHs7-U8kmwSfsCC6FhAaBw2y_czrkkeEu4dEwDfAUZmM8wfnT0gb7IpHFvfyJ7jSvJN1teFkEoLK4N7rhAyhbWpoSr_TvU1Lei4GR__wlhA6j_1rhsp-ytwse86BI82dfM1Dr5GdOzLD5olVfQiIpEvus_GsltXYcLv7tmfqTuh7NA1YVnLdYclIgr0Kpse7lhAWpA0AytdglX1Nmh8FX7XTuPMpBOnZaxIGL14RZkAw72g_7Mi4sPe9ZrTboEGK96Uha-vBSk0Od_LnYVL50kVWVhAJgdDSRlyOxG9QGzxjive95SLG9Lc8OAtlvp1X7ryvOeYDOcNccIL4AiFSbZwpJhMjOq8qcc9t9S5cwY_Po1WqVhAwdwPuszhAPoWR777_puaw4Q-NWV-ksNA9FozONUf8B5vUAJHtuQPKqEyNlWxtp3Ewonrj-SejXgTHMjDLqhzx1hASBHGfoAyCxNJ-enk9n5uOAeGmXebDpnoGGzlcMn4b1WGAgJSp_sPriyVkEzqeSzuT2TC89qN7-rEweDSc9pq6lhAscxSSH8dmG2QF1-Foh6PFssxWS6-yl4mkOGNmjSiTPmySbkLmQAqIhFlFFTotyxzFTx4QONH1R3MCPWy61VDxVhAUrCMmlySDsy_993nxEBerHP_oIna00h_eJtUsZO4e-QjW2gqkrSKzoBaUaQKahCAWNLBkG4b8YHe-SeFBBog-lhAeTQHNUiQ-pDplPxrwID53973vq0z7cHbhdB6y5w6DiORtpojb8nGF-597q6YYZpeklvVlXDAOGrEc6pUGP9GQVhAOPK266S1wgBAlVuTARdjfWQiNI0gV00p-McOeyjKrkYL55SIa0-6fFSiZ9I_345Wk360alOVStJ790yhdU9N0FhAx5ZPHonu0pLmD2PGAKezezb9UwRbAHUl42MNNd2vcEtkcFlZuVPGQs5N6ZD53Gj37DqLmAWSFCdPzbLMjzx_PVhA4otjimuXLsCXxDfHvNHiXjvDwpduHHGx6WQBWjfzZY6RFfv9kkeZv28XE8UJj21tkmLLJ5Ugah-iqWEET222xlhAHSYKRZegFNakh9CbEPZC6VhQlhzq3uAfnwVjHckl7Srff8MOFmUSmFNYkSnlT7huzsksUajlc0G02W65O8__F1hADAVrT0y_yr1cueHT2OKQP8eRApf_CtoJsdympxmvHcM0MdnCKFq9Uo3K3sKd-cw3Mh-ClZiAEkBRQw4Mwx7qL1hANqzffZ8dHEgeYWciIyLuXDD4U_6AWDuNYfkTpigPOLToFYQ5oqfpRxn12PADcvbCMuIk3CvPBEVQ2gJ027xn11hAxEf1HsFhYYSdoIyq7G1EMdjW0mYxIqjbXRX0aGj1IYhRz2h1osAfGHMnFNtfDiJ2oQ7FKYOxtu0Ti8LNkRQYEVhAoGP7RTJexUP4Mq5bgFHDhymo7IcDTFooPjNcqS_coN-CPt6oJNj3r9OD0nb4ebYUqIkl8GAC8tCsM1caRvyTclhAJdn-zw7UaNyQKb80RfDl1CZLurymSrJnmj223GUAe3Grf-pSb6sDq4l-ne8AUhep6rAXBfSEMFyPCm34VJsojVhAuT6yFHJmGcKq3rnPe3pwMWrHY23aWVVJRW8W4pofK8skoDzd4FyzdmvgewGIIQVLGrabuHtsE5ZmCYMpjgrvrFhA6ovGeAiBaU7q3H9Orhqk-cPfP5DCyoe4pkl9doVn260sw2FCzWlOXDg6rrGCfh3o6YWfDf4vJIbjcCyImO5o5lhATImRcz7QgBUD6x0q-C5iCG1dVn7KoiDu2BwOdKeglv_9iZ7mGh4gx-VRS-Upr6KaiHWwt_dicuBq6wuYdiL-n1hAyc1NJGU6aiEazlhF9gOhzXyEXTha9KC6YiBWovZW4uXs2S17E76cxtYfhTLs9wxKu-eSgzs0CFgG6X2JnKPBBVhAb8-ScPz6ImzW1nFzvt9pYJAuJ7i1aD-i2Z0RFz7GHbxs-YHvJs3oKo0rfUelucOcak4jE-5wSXwBfK8F7McKWlhA3kVFSo5KrQwulttyBpf3HrCpdyfmpo60fqsTxiUyehkX9cSkoxdclRejoLkSYfhHp0AUJApapp9lLyShcdn5FFhAxmD_KeHs4TXjCMpWutkQpIx-k9XIXaE_VbnApCWEvruZGkCD-VGliTzG7IqwKZwB8yf4MjvlkuVzy_6U5_8nlrAAWCAhSSRRTtIUU68-7032cus6jkkHw49sPrtmefsgEHfn9AFYIPKQcUmoFsUvMSVHIVQaW3Lvs4THLRog2UKEwku7qMwPAlggbAa8Cw804oIplXwh5BD-8S7xVfARUJGlhTiQgAjHZUsDWCAkq7JcNBULZ9zGGkavG5M5Qk2_1NO5FVNUDvtzcmIiZgRYICmqW2sMLb-rI55c_oLMxxWi586xC2oglGKbN8jem7WQBVggcTwaYUCEE0mrPiz0iFhmDCKX0Yt7In3dG7bDfOndhs4GWCD7i3H3jZmI26a4UOln2UrF0DxaGfc2OBAsTArv81U93QdYIBRuYT1S-0VICm0jgM-4T7PmGb5r9A-UnvkmRsvsXxblCFggVb7IN2GOjocej8yrBYd5O7Yg5wyeTvoQR-H4JguhQUMJWCBwLyIC8fc3GJpqoSsdNU8C8QjoKtNEHg3Uc9CLLAeZEwpYIFr-duaoYFzOSyPPSoT6JzMJowpxTi9-Y0o_k5ehqTMVC1ggcx2gS_fvLeRPR2nb9h2BdWbHJ1nSryTG6rL_baJE4_YMWCB0XlMDiCO1GnHYViSLbkQnKNxz2kt_7otXjEiOGLrAHw1YIKU-o1smxmPNiHDzV4gzZ4h4x2bb6_Z2_rZTJuy8bKeWDlggHgnaXyOnyhzx2rgxS8h6GChOHX4b1sfLdpN-Z8gp2qEPWCCFXkftAeSP_FCDkmrfgD2iNJmGRDj-vEojfddnEnbgw4QXGBgYGhgb\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-06-09T05:05:54Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:54Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAaQU1zsZxE4XxJMDRRVJw5ZtW8oZKnvVliiwnOQ3rsHfJTKPrRgfgtjsyJ6OkA_RL2FoXIGi2CXZBLcBQv6cNxVgjgCQD38Sv8J7eX5nK1FjId-A8Vs2aV7-ZTFSuvIbIY4JotDKYN1hAYY_K0T4kw_FCLOb7ZBko3GaMS1gwGCqEQkEY3BqXbZVNqN_4tpWq2PEgexYChPmGkYp43xYkgRseULqPqbGuRlhAh5KOIef0PWHbVbMP05Rz6522VxPtmOI57WLKEDMFfTlLZMG14CJtth9B9g1Xui4Lw_tlzug-xIr1NrH0DrvGd1hAfNNTSpsZIlg8yHJtGn_iOZ1gipBP5QCDq3WVJFRtcFJPVo-kcc-Fk8xDJEtQPOu5IJ-MKMC-83GYvQ7OQdUcslhAU1oKslXsSYampJ5mQwkmqAPCHPhSsHeLBOf9dicBlRfvUdwFf4xY-6E6n_mHV9Y7RG9M1Ujv0q9yIpZFSKMzM1hAcWOP5cQg0xbDy4b9mnVwHJ2MTzcsSasRPLJpdZUGWNAsd3VPiyUGqi341T2FNN8IdQRMwH-GNlRuZBWuSdRQM1hAiis-bS2FmRhmGHVs6MDRfCoDbcHEEG5IAVZmvPNTH4NM8HBrHQd4l2xywOZGgDhJkWGpRGSADE9Y9klA3-oeplhARVl6soPBC8SOZVbiMkrJ7wCulegqra7mWw4ZTUlm9DTK-Y7DTZWGRI-x4R4fZicclOE4e4ZOK6VgNgbyoskKTFhANfVWFDTfGX7-FUnKHZeDy8kpQZUCmmWzm3r20pv-byj6r34SRkgBhR-h42N1wFgDPUgI0xoBgoiA8fY5ev7_Q1hAW8thJByPtnj7oaHOPhNiJUhli6-J6n0fJw7C1BHfMAR-aU5ivQlGi9qxm0F1MbRZSL4mYNTQNNmovaTVYWu5NVhAxgdoJMuvSru5jFpIpq37lqzyfH3-FrHWKpfgfP6ewaIrKRtImwHo0wUdButpOIkvXKqj8tERHI23eDs7g4MoOVhAaTqrvW4t6AMjGPnYuxXzXNM0p1gZTWTB8c47o8iSD3_CY1FfsJk2hBCQuZ4UKNWQ1-uCnnt_7voW4oM3sI4R91hAIpPKUjTBXs9DpXgkvLsfZPd-zBiZe5tdr-N70sWEBPbVuR1H4BGjhDuq-MllTG4WiyGWtrgx0EQ_oub4G67iP1hA5b96UnaSOX7EbgX7fjkWPNtkLDPkU-_712JhEKc4ICmYiMWHqmsgskneUHjhJ5UWxlK5oGw1dAswsLqcmTYAsFhAj_7m2JMA_LQhj9Cl0ebD3rzdMZV564sZsP6qFaBeN2pezCdncKtUcjF_GrCabdxW8j-dTYu2ImGD9raOmIYFQFhAM3UVZTlJkGKMw0ORcB46Nbmygv3qsl051eCz9YLjHXB-JL-wYOzzIwdIt6IsW_QxijsuWdw6FI2L1Kf5DePwM1hA-9EszXpu3CGN1SGa9hJyD4tS-JM7e9rZMhZppou7TFmiuD4kguEvCmC46JI1BS_L3IV3rcf9sYKNoSNubxdo81hAQ0Q-kBknBXe0pMwjFDdgtq_JqG1g9oxIHGB3guSdAdVIruXd2Fr3IgEQk6uM2Gsv7CnMaluh84HUO_pEAKzLU1hAC3dqDBixFe4eBFS2QoC821XsOjW74mY9nLEQ41uYDdIAtI-7V2LImwWtV-zeoMT-qNDpYFSpsjCFXHUMyp_Dq1hAn4-gGcyG7ZRuDW6bSa_GuE8CEj1w_32TufydwuPpY4wzeEFSnRvysQ0k1Cy8px3xiAPsD_R_HjpzI0a3hgATElhANo7xQkkudwCoGiSdJvlPE1hSAFt5fuQnHetmlXtLDxl89bGtfDu3NrWCUo1-cMnBBN5Aoxv-fHiDBBuJbQtFjlhAZOatkRaDZ_ctxB8QNF7-1pK10fP9tz16-HaQMuyLfUjV0CUOCvYrJQQ0HUjQ2ZD6ZVbaunwamjWtu57UExefPVhAmYRZ1vj_vdEb_gO1r8LgmvdvHwjL5zyrwAZ8oBoPjkXnXLeMYdE43UDdLr0Y6VMvM0LzKsMFA_rY-gfAiktNrlhANbWQ1a_GVuKR_QCd-OVLzABhDPTM9CmqkrIfJ-fDTE-tiCH6fsEwyQVnrQ5Jf-7Q3JgyPNeKOqQbkGKgqAimBlhAmCsfYHw_3Lo1SmD0VgABcXuBRb_IrTZz3WgZ3Cxm9RRCSpT2ug7DVi6aMPyJSXXicnW2PhgZgR5yztB4QGX4jVhA5n8np7zxlxAN87-3OzJm_h9p5V65oz2Lm-0HgxdFZcNjDoOeBBC5GiafHWl_HEIlcjgXgmaV_v2kh-gyRwHGRFhAM6U9CgJveuet6GpzGp_uNFJBemNHScQCJWXmoU-FC_0sxO6qrz2-A2P7Jktffc6QRiF0aR-jiLNQuj0Lt9yM-1hA7PP127fx71VuJSqkezQ7xIfirKX2f-MxUNYuRJk6fHSdnjWBcCJGThKUCtByvXpFQUssPyIm0INP43rXnV7tpVhAxxn89sT87kPpaabxYrBIJ2RnhSYhzKLXKhEn5bA8E_j04RSxf8N-jeLJbUpzZPZZ2zg0973EUS5tylGFz-CH51hABcMuGEFo7iVmEMU1kk4SABmrX7eiwUD8R4nL-_8YyGQVhgAKW_uQNaEe3YeWXZpojTxz_QFdaZFbPuqorr_GZFhAbNihfHmt-cfswkPTsvHhc_Uzq_Hlr6omsoPQr2TZPKAf2kLcOJiBtO-VbZxKJ4hBswejJFHs7-U8kmwSfsCC6FhAaBw2y_czrkkeEu4dEwDfAUZmM8wfnT0gb7IpHFvfyJ7jSvJN1teFkEoLK4N7rhAyhbWpoSr_TvU1Lei4GR__wlhA6j_1rhsp-ytwse86BI82dfM1Dr5GdOzLD5olVfQiIpEvus_GsltXYcLv7tmfqTuh7NA1YVnLdYclIgr0Kpse7lhAWpA0AytdglX1Nmh8FX7XTuPMpBOnZaxIGL14RZkAw72g_7Mi4sPe9ZrTboEGK96Uha-vBSk0Od_LnYVL50kVWVhAJgdDSRlyOxG9QGzxjive95SLG9Lc8OAtlvp1X7ryvOeYDOcNccIL4AiFSbZwpJhMjOq8qcc9t9S5cwY_Po1WqVhAwdwPuszhAPoWR777_puaw4Q-NWV-ksNA9FozONUf8B5vUAJHtuQPKqEyNlWxtp3Ewonrj-SejXgTHMjDLqhzx1hASBHGfoAyCxNJ-enk9n5uOAeGmXebDpnoGGzlcMn4b1WGAgJSp_sPriyVkEzqeSzuT2TC89qN7-rEweDSc9pq6lhAscxSSH8dmG2QF1-Foh6PFssxWS6-yl4mkOGNmjSiTPmySbkLmQAqIhFlFFTotyxzFTx4QONH1R3MCPWy61VDxVhAUrCMmlySDsy_993nxEBerHP_oIna00h_eJtUsZO4e-QjW2gqkrSKzoBaUaQKahCAWNLBkG4b8YHe-SeFBBog-lhAeTQHNUiQ-pDplPxrwID53973vq0z7cHbhdB6y5w6DiORtpojb8nGF-597q6YYZpeklvVlXDAOGrEc6pUGP9GQVhAOPK266S1wgBAlVuTARdjfWQiNI0gV00p-McOeyjKrkYL55SIa0-6fFSiZ9I_345Wk360alOVStJ790yhdU9N0FhAx5ZPHonu0pLmD2PGAKezezb9UwRbAHUl42MNNd2vcEtkcFlZuVPGQs5N6ZD53Gj37DqLmAWSFCdPzbLMjzx_PVhA4otjimuXLsCXxDfHvNHiXjvDwpduHHGx6WQBWjfzZY6RFfv9kkeZv28XE8UJj21tkmLLJ5Ugah-iqWEET222xlhAHSYKRZegFNakh9CbEPZC6VhQlhzq3uAfnwVjHckl7Srff8MOFmUSmFNYkSnlT7huzsksUajlc0G02W65O8__F1hADAVrT0y_yr1cueHT2OKQP8eRApf_CtoJsdympxmvHcM0MdnCKFq9Uo3K3sKd-cw3Mh-ClZiAEkBRQw4Mwx7qL1hANqzffZ8dHEgeYWciIyLuXDD4U_6AWDuNYfkTpigPOLToFYQ5oqfpRxn12PADcvbCMuIk3CvPBEVQ2gJ027xn11hAxEf1HsFhYYSdoIyq7G1EMdjW0mYxIqjbXRX0aGj1IYhRz2h1osAfGHMnFNtfDiJ2oQ7FKYOxtu0Ti8LNkRQYEVhAoGP7RTJexUP4Mq5bgFHDhymo7IcDTFooPjNcqS_coN-CPt6oJNj3r9OD0nb4ebYUqIkl8GAC8tCsM1caRvyTclhAJdn-zw7UaNyQKb80RfDl1CZLurymSrJnmj223GUAe3Grf-pSb6sDq4l-ne8AUhep6rAXBfSEMFyPCm34VJsojVhAuT6yFHJmGcKq3rnPe3pwMWrHY23aWVVJRW8W4pofK8skoDzd4FyzdmvgewGIIQVLGrabuHtsE5ZmCYMpjgrvrFhA6ovGeAiBaU7q3H9Orhqk-cPfP5DCyoe4pkl9doVn260sw2FCzWlOXDg6rrGCfh3o6YWfDf4vJIbjcCyImO5o5lhATImRcz7QgBUD6x0q-C5iCG1dVn7KoiDu2BwOdKeglv_9iZ7mGh4gx-VRS-Upr6KaiHWwt_dicuBq6wuYdiL-n1hAyc1NJGU6aiEazlhF9gOhzXyEXTha9KC6YiBWovZW4uXs2S17E76cxtYfhTLs9wxKu-eSgzs0CFgG6X2JnKPBBVhAb8-ScPz6ImzW1nFzvt9pYJAuJ7i1aD-i2Z0RFz7GHbxs-YHvJs3oKo0rfUelucOcak4jE-5wSXwBfK8F7McKWlhA3kVFSo5KrQwulttyBpf3HrCpdyfmpo60fqsTxiUyehkX9cSkoxdclRejoLkSYfhHp0AUJApapp9lLyShcdn5FFhAxmD_KeHs4TXjCMpWutkQpIx-k9XIXaE_VbnApCWEvruZGkCD-VGliTzG7IqwKZwB8yf4MjvlkuVzy_6U5_8nlrAAWCAhSSRRTtIUU68-7032cus6jkkHw49sPrtmefsgEHfn9AFYIPKQcUmoFsUvMSVHIVQaW3Lvs4THLRog2UKEwku7qMwPAlggbAa8Cw804oIplXwh5BD-8S7xVfARUJGlhTiQgAjHZUsDWCAkq7JcNBULZ9zGGkavG5M5Qk2_1NO5FVNUDvtzcmIiZgRYICmqW2sMLb-rI55c_oLMxxWi586xC2oglGKbN8jem7WQBVggcTwaYUCEE0mrPiz0iFhmDCKX0Yt7In3dG7bDfOndhs4GWCD7i3H3jZmI26a4UOln2UrF0DxaGfc2OBAsTArv81U93QdYIBRuYT1S-0VICm0jgM-4T7PmGb5r9A-UnvkmRsvsXxblCFggVb7IN2GOjocej8yrBYd5O7Yg5wyeTvoQR-H4JguhQUMJWCBwLyIC8fc3GJpqoSsdNU8C8QjoKtNEHg3Uc9CLLAeZEwpYIFr-duaoYFzOSyPPSoT6JzMJowpxTi9-Y0o_k5ehqTMVC1ggcx2gS_fvLeRPR2nb9h2BdWbHJ1nSryTG6rL_baJE4_YMWCB0XlMDiCO1GnHYViSLbkQnKNxz2kt_7otXjEiOGLrAHw1YIKU-o1smxmPNiHDzV4gzZ4h4x2bb6_Z2_rZTJuy8bKeWDlggHgnaXyOnyhzx2rgxS8h6GChOHX4b1sfLdpN-Z8gp2qEPWCCFXkftAeSP_FCDkmrfgD2iNJmGRDj-vEojfddnEnbgw4QXGBgYGhgb"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:43d5a692-afc3-453f-9b72-3c634a6e6415",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:70e97c85-60e2-43be-b48a-e55e55f8027d",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 761,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:8b615f87-e669-46ea-b9d9-c392fedbb6c6",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"name\":\"https://schema.org/name\",\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuanceDate\":\"2024-06-09T05:05:54Z\",\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:05:54Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAFU5dgQHN_DLsp0RZKQkzrVLo70eCe0Kv3ham0AF7ifA3XX-J_CGZQPGA_LbsYurSMtE0pYo7uOuX6ziI8i2W81gjgCQD5PEVXyU4ZwHf0dzqO_EWqWshugrv5Ui4MY-26UVLbCiYIlhAwQN8GgdZ6rqIFhUsiRt0tpVKlxYffSTX00Jjli5mlDoPF5K1F5KdecoTP-llKSuUM38hNAqdcCT79sPwJrar0FhAXcfJ9kjnT9AsVignklWzKe27Fd90e2W1pWuXCGNwmEdJEhznJDgNLNWfTMDxZ4MgJTbYNy0Ok-tm_8uk5WsFClhABQcwkUyNIteZuMtguh8huU3oftBIImPQkPNyASHwpXZQAHlwDC18qShdXo4Fj4FMkD3uoecN7XImj0BOOdUME1hARWWpAO0wTpizXatNtEu-_yZpqp2rPU3ydqPzbs3uuOxoZNgdYBvcuHFFxBGe44HOWAnyW371jPLkxFDnAz1t5VhAxP2SSWqD7OAVoC3DvtrIax6C4eC--vTKGLciEem5976pOHE-jIxnZGB9d0XZErGoxIFpBX9bPs_l6fbjBQnhdlhAG8T-BIOsBnolsmJRSRjQj2ALEemH_Onwt2oWa-VloQhRSXXt7Da-Q0wYT_aY-1TMeN1kJ4D32DHKsGyT5Xji9lhAbUbjTMwaF43JiECd297xGN1xJWWi8UJ9qNkziLNHbsveb4CF7doUG1YYvx6C6C948OunxbF280qD9JdiGlCw4lhAQsZjgywiZoLBGLrxTLd2PacrnYz-tbeMl59_wp50RpM97fPVtuju6wBBDE31J3_GcPLQImmTy0qgb1DwAvyx9lhAD-nw6ThJWLNzbbdjosKGPahFvkZgC1_gr5e2WUoM4NaR9uQm5V3lkMhiK3RDCzdEtB6erc644osKroCj7czYS1hAK-YO44IshTeZSABCmnIDyBrA5WEXJme6Ii858Tl9uRmmZXF-QKjRkHAQYHlgg4tUrYMUPrVT43adg64tkAdh5lhAdxUcZ-l3H_2bUz_Jx3AKv1g0ji6eWrwSCxZa8SZNAZiZGiN-VBLsy-k0uYEHzfqJGrsg5HHrRhmfakoPVf5YxlhAJZuAyPpqSp_FMjsqqQn7dA5lxbToXDLKRlnzEZkXQp42jnzSLmC0DmZHMDa0ng5kfJGi9r5y54jIC_kapgvWRlhALuMKEusyXgUBf_V-yzJ5f1LHILYC6T7-Xi5huA4TYVpigLYUlEzduu9jEgF6w4Bfjk07RWy9RkJNL38OZ2UC6lhARl_yHY7SiF_pRYzGVIH6gWI1VPILfriMUB_CyM5IEEBSBefo-wz2FOve0sGAM7_YEKcgdL8KradaqlQ0EIvxB1hAj5RflMM2UsT7aNCw2fTB0El9kFotjEBQlixRIm3Nuuvx-MmQxfTYOS9B9YRrFUz2RenyudVqEdw7FlRfGq6mB1hAppSVhqqZLeDu5T3lPoINMmx0L6MAX0yCiybMYnxXg3DVKpvFqOXdFvlZVCLR8MzukDF_Yu_lxyakiyl9DVov4lhAko-pDqHxuOljmfTMoult94aMVtulCi_k7GTbGir9YNFUQiTfMyfsYs_UVz_CwgF7_kuUDyX0jUY4Haasjxb6klhAFaU-q7X5HaGGvyc0lbDCKjLUtSKYrm99CEN-QPjJasG1UeHZZhzqjaDAPskMQYvjoXwH_S0FlIgOxY-wYDIvVFhAWMxxq_wUUss3Gcp1-BNPIW0qVT-F26HS62igrhjjhLlQx5TT_LFjmFuw73b_bYaI0nOxaaeqysZ2dDVQn0ZF11hA-PVDkAFVd_XS97Mz0v8me-6oUAWZB9LDLONyyOnE36i_I2Npbt-wad7hZXKW4FNkWfX3FCnD8wKebHUQHGCYbFhA5H-Ke2DpiEnowu83wwplUaiSRET7V_y52y5Vlyk565Zpx7-oFet0WrdBL1SylnnYaD5CeSHwDK4Adt7txaJeHlhAhq9GfG-hNmPK3izZ4vWouP7g3r9ocKzf-wEzH9ax0uTRmGsWY06-D1EghmscbgO_Qaqbl37I-MX2I1FZwQDkylhABXQCmNMhEfcmQ3z5XFYjzFyThapnT9EtivlfIqey9pOnjoqPpHvfVY4Xq0shKSYrJ_bQziMyINPYjBOypH_Zo1hATeTbJGg4Hb10xkvCPCtUTN9K69fah_rncVZUzhA89NlBhCE4ez9TIRBhYBsu1XfSLGc_eo_xUQux9GLkDVaFvVhAE6nNPXXrTwy_WP1bpTQehix_CPW_sziowM1bHo4PZnG0C0L_tpTK2hGSenHxw66nxFRQ95E3Ndfin_S32RfGJlhAAYJRddfRX2kEWa-a0yTw1n5CHoyI3q6gUJYpQwWPhB52fZFrVEjQ1APToNcjoodHCx0Z8GAlV8-8BsPAQfakilhAH2d1XRMZg09J838eMbL3-h5CACLiit0FveLajSCZFEK7P9yPKlIvwXhZ7xa0FNVsj9nn0ty4BdK2yMjGVbZHQVhAP5JJeDNuZJHqbofGE60vPUzitW9isNAxOKf75Izsnm4NdhyOWU2Ym8aDg-zJExa7d0ChukJftwFn8sGHSo89EFhANIlXhy3twueI0HruWLr95U87Er2d2l6pqcosrjeAa2rMpFs0H6Ln5dYtJV77K9dQ184zxpe77xHe1iuBJS5guVhAX76-leU1pm4MQhW1rbiFLVrHkPww5HHwb1yIu2-ZLXEZFJeIgEzSI11Rt68YpMKvuDqHbItXOeI051ccm4bAfVhAYxhAXzh5pj7rN960iWMEWkCyS3-duJvzISHY0KSHz7gW8dlBdtUuTcFJT1lt8uqX013Yku4KCBl1y9KlJ2cbWVhAQUP0UROrLk5W1W1bjqJOC8ATodhx3KDzYB0C_ejlYos9g73Scbt3tq-XVrys9hL2OsPPQQY_LdcztBFaWvoL4lhA-ZZuAiIWEIyewBrLhwAMndkqSWwcol0svMo8hIqpWLeSfDMbk4Bb6URoN9TpwHJh5UEdDgyy8YT6RYaRpxH0kVhA5ESaCibqFG1QGop6bCHLEqpujxq4HYVa1lupMhKBOwXWMp5tbEAixrfmmS7scTTT3kh6LJ40vS0hyk90p3hwt6sAWCCco5ioLTcYp9wc9N_XbMOKokYm7IyYeQuGV4gXdXX_cgFYIDyd5iad639c-fdDrftrM_NETdgMKwUdsiXAE0BKsSgoAlgg9VVipEMZA6N00EfIP8rYqLjuslJYMSQSLmIOEUNF_Q0DWCDU_qwyoEZ0VhalM9SaBqIxjMFKBwdWxbFbcrrxWVBs7gRYINBFafVl0YQhYC7cUDThC5xcoPyrFXQA7lB7OrhFsYWdBVgg54hZkPuaUsLWNUJy8aHL_duQglEv0rfBJKpNjaJu4ZYGWCBhreW2dBiVwEICFVxGXyiXzJftwiEQTWvrdYleH9RiQQdYILFe2tHBGgzhHc8XTbU1xES05_RR5iZtd-7nKC54XgETCFggJL2Jn2tIMA6FTIUHXno1fgJksI6vzvSr7qnYfXmrLNYJWCC5xJCrGNXlMSnye1AIbh7gtN7q6dlFwNcwC4nvidfh8wpYIE5jBSjBxjYuuAQQvHCDLAxTzLw8ho9_6I6B7kQwsQcYhAsMDg8\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "name": "https://schema.org/name",
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuanceDate": "2024-06-09T05:05:54Z",
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:05:54Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAFU5dgQHN_DLsp0RZKQkzrVLo70eCe0Kv3ham0AF7ifA3XX-J_CGZQPGA_LbsYurSMtE0pYo7uOuX6ziI8i2W81gjgCQD5PEVXyU4ZwHf0dzqO_EWqWshugrv5Ui4MY-26UVLbCiYIlhAwQN8GgdZ6rqIFhUsiRt0tpVKlxYffSTX00Jjli5mlDoPF5K1F5KdecoTP-llKSuUM38hNAqdcCT79sPwJrar0FhAXcfJ9kjnT9AsVignklWzKe27Fd90e2W1pWuXCGNwmEdJEhznJDgNLNWfTMDxZ4MgJTbYNy0Ok-tm_8uk5WsFClhABQcwkUyNIteZuMtguh8huU3oftBIImPQkPNyASHwpXZQAHlwDC18qShdXo4Fj4FMkD3uoecN7XImj0BOOdUME1hARWWpAO0wTpizXatNtEu-_yZpqp2rPU3ydqPzbs3uuOxoZNgdYBvcuHFFxBGe44HOWAnyW371jPLkxFDnAz1t5VhAxP2SSWqD7OAVoC3DvtrIax6C4eC--vTKGLciEem5976pOHE-jIxnZGB9d0XZErGoxIFpBX9bPs_l6fbjBQnhdlhAG8T-BIOsBnolsmJRSRjQj2ALEemH_Onwt2oWa-VloQhRSXXt7Da-Q0wYT_aY-1TMeN1kJ4D32DHKsGyT5Xji9lhAbUbjTMwaF43JiECd297xGN1xJWWi8UJ9qNkziLNHbsveb4CF7doUG1YYvx6C6C948OunxbF280qD9JdiGlCw4lhAQsZjgywiZoLBGLrxTLd2PacrnYz-tbeMl59_wp50RpM97fPVtuju6wBBDE31J3_GcPLQImmTy0qgb1DwAvyx9lhAD-nw6ThJWLNzbbdjosKGPahFvkZgC1_gr5e2WUoM4NaR9uQm5V3lkMhiK3RDCzdEtB6erc644osKroCj7czYS1hAK-YO44IshTeZSABCmnIDyBrA5WEXJme6Ii858Tl9uRmmZXF-QKjRkHAQYHlgg4tUrYMUPrVT43adg64tkAdh5lhAdxUcZ-l3H_2bUz_Jx3AKv1g0ji6eWrwSCxZa8SZNAZiZGiN-VBLsy-k0uYEHzfqJGrsg5HHrRhmfakoPVf5YxlhAJZuAyPpqSp_FMjsqqQn7dA5lxbToXDLKRlnzEZkXQp42jnzSLmC0DmZHMDa0ng5kfJGi9r5y54jIC_kapgvWRlhALuMKEusyXgUBf_V-yzJ5f1LHILYC6T7-Xi5huA4TYVpigLYUlEzduu9jEgF6w4Bfjk07RWy9RkJNL38OZ2UC6lhARl_yHY7SiF_pRYzGVIH6gWI1VPILfriMUB_CyM5IEEBSBefo-wz2FOve0sGAM7_YEKcgdL8KradaqlQ0EIvxB1hAj5RflMM2UsT7aNCw2fTB0El9kFotjEBQlixRIm3Nuuvx-MmQxfTYOS9B9YRrFUz2RenyudVqEdw7FlRfGq6mB1hAppSVhqqZLeDu5T3lPoINMmx0L6MAX0yCiybMYnxXg3DVKpvFqOXdFvlZVCLR8MzukDF_Yu_lxyakiyl9DVov4lhAko-pDqHxuOljmfTMoult94aMVtulCi_k7GTbGir9YNFUQiTfMyfsYs_UVz_CwgF7_kuUDyX0jUY4Haasjxb6klhAFaU-q7X5HaGGvyc0lbDCKjLUtSKYrm99CEN-QPjJasG1UeHZZhzqjaDAPskMQYvjoXwH_S0FlIgOxY-wYDIvVFhAWMxxq_wUUss3Gcp1-BNPIW0qVT-F26HS62igrhjjhLlQx5TT_LFjmFuw73b_bYaI0nOxaaeqysZ2dDVQn0ZF11hA-PVDkAFVd_XS97Mz0v8me-6oUAWZB9LDLONyyOnE36i_I2Npbt-wad7hZXKW4FNkWfX3FCnD8wKebHUQHGCYbFhA5H-Ke2DpiEnowu83wwplUaiSRET7V_y52y5Vlyk565Zpx7-oFet0WrdBL1SylnnYaD5CeSHwDK4Adt7txaJeHlhAhq9GfG-hNmPK3izZ4vWouP7g3r9ocKzf-wEzH9ax0uTRmGsWY06-D1EghmscbgO_Qaqbl37I-MX2I1FZwQDkylhABXQCmNMhEfcmQ3z5XFYjzFyThapnT9EtivlfIqey9pOnjoqPpHvfVY4Xq0shKSYrJ_bQziMyINPYjBOypH_Zo1hATeTbJGg4Hb10xkvCPCtUTN9K69fah_rncVZUzhA89NlBhCE4ez9TIRBhYBsu1XfSLGc_eo_xUQux9GLkDVaFvVhAE6nNPXXrTwy_WP1bpTQehix_CPW_sziowM1bHo4PZnG0C0L_tpTK2hGSenHxw66nxFRQ95E3Ndfin_S32RfGJlhAAYJRddfRX2kEWa-a0yTw1n5CHoyI3q6gUJYpQwWPhB52fZFrVEjQ1APToNcjoodHCx0Z8GAlV8-8BsPAQfakilhAH2d1XRMZg09J838eMbL3-h5CACLiit0FveLajSCZFEK7P9yPKlIvwXhZ7xa0FNVsj9nn0ty4BdK2yMjGVbZHQVhAP5JJeDNuZJHqbofGE60vPUzitW9isNAxOKf75Izsnm4NdhyOWU2Ym8aDg-zJExa7d0ChukJftwFn8sGHSo89EFhANIlXhy3twueI0HruWLr95U87Er2d2l6pqcosrjeAa2rMpFs0H6Ln5dYtJV77K9dQ184zxpe77xHe1iuBJS5guVhAX76-leU1pm4MQhW1rbiFLVrHkPww5HHwb1yIu2-ZLXEZFJeIgEzSI11Rt68YpMKvuDqHbItXOeI051ccm4bAfVhAYxhAXzh5pj7rN960iWMEWkCyS3-duJvzISHY0KSHz7gW8dlBdtUuTcFJT1lt8uqX013Yku4KCBl1y9KlJ2cbWVhAQUP0UROrLk5W1W1bjqJOC8ATodhx3KDzYB0C_ejlYos9g73Scbt3tq-XVrys9hL2OsPPQQY_LdcztBFaWvoL4lhA-ZZuAiIWEIyewBrLhwAMndkqSWwcol0svMo8hIqpWLeSfDMbk4Bb6URoN9TpwHJh5UEdDgyy8YT6RYaRpxH0kVhA5ESaCibqFG1QGop6bCHLEqpujxq4HYVa1lupMhKBOwXWMp5tbEAixrfmmS7scTTT3kh6LJ40vS0hyk90p3hwt6sAWCCco5ioLTcYp9wc9N_XbMOKokYm7IyYeQuGV4gXdXX_cgFYIDyd5iad639c-fdDrftrM_NETdgMKwUdsiXAE0BKsSgoAlgg9VVipEMZA6N00EfIP8rYqLjuslJYMSQSLmIOEUNF_Q0DWCDU_qwyoEZ0VhalM9SaBqIxjMFKBwdWxbFbcrrxWVBs7gRYINBFafVl0YQhYC7cUDThC5xcoPyrFXQA7lB7OrhFsYWdBVgg54hZkPuaUsLWNUJy8aHL_duQglEv0rfBJKpNjaJu4ZYGWCBhreW2dBiVwEICFVxGXyiXzJftwiEQTWvrdYleH9RiQQdYILFe2tHBGgzhHc8XTbU1xES05_RR5iZtd-7nKC54XgETCFggJL2Jn2tIMA6FTIUHXno1fgJksI6vzvSr7qnYfXmrLNYJWCC5xJCrGNXlMSnye1AIbh7gtN7q6dlFwNcwC4nvidfh8wpYIE5jBSjBxjYuuAQQvHCDLAxTzLw8ho9_6I6B7kQwsQcYhAsMDg8"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:c01d9dbf-37df-4fc3-a096-563d197b92c1",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:cc206027-adfe-4c86-a4cb-c3ea9229107d",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 431,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:0c9213db-e143-41b4-8a10-cc7e67c52daa",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2603,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:eb725d88-fb7c-4350-aa3f-bd991d02fb6c",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:4fc53c00-dafd-4a46-a365-c58df6a976f6",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 360,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:7b21716a-bb6f-4625-a8d5-96c8f2536a20",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:c3f4063d-5703-42c5-9306-a7e737dce85a",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:84f9e149-8407-4e0d-9816-42ba0da68922",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:685fecc8-2e49-4c2f-aab5-3709da50ac95",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:33f2b723-512a-4298-82a3-f6bac5594882",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:534dcc8f-7f78-430f-a53a-6c1b918fdb22",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:ac4c1c31-67b0-4a5d-8fcc-7253108cb5d5",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:a80f523b-a018-412d-b386-74ff44daa7ac",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:774f5689-1b33-4713-89d7-af7f14d6970d",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tCBCt_mBOzmNs35OvjvTf",
              "ctx": null,
              "_testId": "urn:uuid:d75ebaf1-e94e-4a14-8696-07557204795a",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 297,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "0zd4riT4Y5240Ds4bLLg7",
              "ctx": null,
              "_testId": "urn:uuid:afc06898-8d46-4445-8ff6-0d3ba30f24d8",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "WEyNy7bEDGxNU7cKCiWwL",
              "ctx": null,
              "_testId": "urn:uuid:c0293509-5a4e-4cf3-9778-1f100ae7306b",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers 2.0)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:44bffb47-0270-486a-8bf3-cc892f89d150",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32248,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:a24f38ec-4c0f-4bb8-842c-8323a9c86862",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 501,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:c69001f6-b4b9-4ccf-a5dc-0598fe2a9637",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 598,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:90e1fa2b-f086-4c28-adbe-f23273543324",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:06:03Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhApRJ_tlBDF8a3SIkT3Buh7mhdx4USuuP5jl6jCBL9hnKi1FJ79Zp72adevkqMcUvGzGm_LULhjlchbJP05M6jolgjgCQCodlXLqLfHTZ22b1uFhBHLBq2xmh2JpPhYgHR02Rv_AqYN1hAknm_XwBuQRzvYGPgKWFekHFs9NOVN6AU68pkw31KSv-OZZc0eHYBCS8mSK9Z-6IZxcwaKnUhoUE8s5fo-_OQcVhAFznySCTZpNs7rgZPDAhuRT1w46wCpFWLmeI7vFrA057BFyij-mVTMdLLty2gCGcht_T5BW-eIBhjpj_kUvmtp1hAVmsMYXJtZZ9hW15yeOsarX5PYD9yKtCiauuJUhQuSBePoyJd9spQ0kYpY7fAuHH_F2_rDwUgdt89m0tReVGuylhAncdDxB9z7fCowpfmrY1Q_nI3iDQwZwyYqk75vX0In19HyJ-l00h2kP3IDD86Ft0aagumUJiM5v4KoFbZP6Gae1hAFF8ZYEtHTFUP99WjTkKleTtpwnw6TWCqdbjfHsG_CU11rU-02hUqpF0eOlFh3Dt1BXWViDTC_Snvo8tNUclYiFhA-sbLIGlrNaPfMzkvWo7BwX_x-vr0J1AATdA78kB5dFHfreov-Xox9gyCZEYZu8Nd_32W4ui3uv6kjv7qhB4OKFhASaM1KKff9fp31Mmm4FeWewe_vguFiMTxsYEfDNnTsJCTA94M_Lx79SiWUxVhIDSGDZTjuxvghyul5ptO6sNxmVhAWJAEVN2XfuWgFGWEryS6iBdPwlYdzzHsyYw7xwIM3QDiwVQleH3QAlvG7lhO2vJtHhvejR987q9Zs-gDPPur3VhAdl8sXYqxmViQmSVxX9qd7U4HSo8-qsJOjMR7MNbrr-k-rpe5lvhVhJAPIkduC_Yp4Z-qA8hggHxxFfRQ7fAI01hADucGvHfFl2oQKYa-KwgtT7o82ldA8S5nrbFBsmjnnsacycJgcQeBczjnMC-fBosu2v2fMm-j-c5JJuvelrwx1VhAmdH01Jn4McwBj7uaF3j3GynXwXjAC7a4BuF6j5c4o3bd7IcZhxZ_lIFl8rKU1gktjy8RnwwGPwY3lygBmQcLwFhAzaUL29Ca_dsRBGaukA4zc9af_PIlJz0xfItyPTgHpUvn6ApVAlrqdGuYXUD3-ZdGUKSuQjc69ip7Jouqwk5aKlhA6xSKBCwzo4eFYsgnRcr4bYGRA9a0Xo1YtaNqLLndQFkDKoK1QFWqZQ-8ZsXrmLHj1zdfc302qnBx3AOKa8SnjVhAzhDbydk89Y06NBZeuzAKDrSPbZSoeE7l3420YPI1MnTWpYbS94llkDZFHQ9UlA6C5v2VFYVyZ5nGXWspiu2CI1hAKErcY0GGeX3i4uQCPEzwG4sEILOBXGnc-nmK1_vYokYk-mLzNWqqK1okP-ZFgOfLJv6luUxv6SCmx4CKow8Mi1hAISx3BlQu_IjmncamJNTKTRV_7xdGoKEApqxsAvtOjatTMyVD9dpEzY0QtKq0ANbKMthRfPOsXbSMFnzmHppiA1hAe-ckgCBTep03fON8fKZ_usPj_NuEM57OIMdjJk9UGQ2zMLyyKsY4ZXMnSp8EgVVQI2t0jHYwM-oBTYZZAc6e21hA8anDAN33PFncs3lWnOYU4baJw7l2IOXn3OAefaW-amUDMPxdvTwurzkCu2DGlnVPTrb089exVtJeMm0ekGK3BlhApoV4ZKi2j7Z8KUoxZO5uDiGp9Xk1XAilvVolWv48_SXVRzUnFH3W9iOAoFyrZJU5WjDoXs0XEuoQqxMm3dJ-l1hANmqOyc12eEOBVMosw6C10iR-etC3f6uglL9_zPA_RHuebEIZLtBSVO8kEmqqDIhTor-H9xomQoxBwOl6dH_74lhAUoZgIldyIkAhaUGwz5LwAMHxSbeJyuHTH6R3WrfCYXUevWbSxX7aKaicqTJfOyyjYC7JC-f6DhGtiUcOWVAO31hAWF_W_twHjHRwKSZpWmf4K3D-bomi_v5X52fjHj9XQwNodAPCpqYZZv2d8gH_q3WX4cW9q4XeLTOGFAQdH-CKxVhAua-T_ls2HcHWrZ4LSPbT1HMI8dUepj1QwIOEnQ_Ep7CENTUPQQVpMhZTaflRrevALRuBMOJ1X-O3QHni1ET2X1hAZx0eQURxdAA9A5WycTaCWJ6DQavholeRkJnNsaZKoMl2AruvOBWT4O_SnJViksGuycEP97E5jaIXnHQ6wcGl1VhAmfVvmsWqxsBPDmsLCnU5Vo_k_rYzJP_pmPE_44CgLmN8zeDFKLw0yTHpGCPC9115_zXhc3IqJ2lCmh5LfaI4mFhAzioBkjR027RXCXhyy3Feik-unPhPYcfAv2iqqx4Nb1XW1FxCAVI_49_0mrCCDp6DvQDjN-YzeiXi_LqR24ZbBFhAmSaAVg0eD8EYRS9zuiB0aRLEZ3bkC74FaB194yadY3JYaE9Kn4BDZP8_GrycS3an4dRQ4_jyGtfLqTFMxdBpQlhAPir5aP5jkOxZWF87SuXyUpX0ESOtsYpcDzXyDMQxtYjog0WHxVVpgTgL83FTJfPwQrSe-umdVTsPB_9DtefyL1hAKGR9_8wv1e5dKB-qEIUD-l2fQlUWjxeFoX2Ds6VRBq_itBstOejvMHAgkDaF0trvAGm6liAYStrZmYaYZ9sD3lhAp5AxQWJDhreBsF_mWRiiixwWDZ_l90Dn-eEczDTaJY7qA1CzvVjyLct4pDQPsiXET8M9TmnRXcu4NWwpdunpbVhAd5Cvcm0a5a48NqZ3S9bSUEeMEp4y5pUzHm7Pc2RgUHPJlMkxfua-0Lrg6WeR6z_3bSxAhfnsjSbZ3gO57dbtz1hAGT4i3-kiYJTjEAbt0IMpmERqeLE8_PdBCHHSRCnaGwKN6lPeYy8tmu8soX3EbW97PJqcdfCDRtougFlJYba8v1hAXxWhnzQdjMs8bazqtXbNRdKlg8YmNGyJmUMo7qgwSvG_pqj-5H5iFAwros4QTrUD3s-a2k-oYJE-97tXnM5pwFhAuOHso4KFleLlcGVhHZNV4eVE-KVTcFchmuHW9yR_aGHfc6WBTQiiWxGzuz9-vyxDYMuWVHRZG5_wc_UUItLcMVhA1BPJ9Qdu2IVpZQzoV0180GoF3fAwn5NKjqr4Eh6AON-EqKwSMvMjjkCPmxsb0ElY76XN35iom69ecPDchhe5t1hAFJ7_Rfg0eeGuiZYKcJHGOfMwh7SSboSzKncVFAGG75w2Z5BmriTQw-npN4T0CXphkxYOFssPDsqz7LG1oQ4sylhA1H30Hq4v3Z9AV-Hxy9GT16pgNfCiC3loU3ubsg1blW-zt0MpjI4lRWzXjIaT-pPgK-4rDeEJp930QLwmiAyKxFhAEhZek-2HyTnR71zs1uZUbg7jI8sedVcCrrEXeXlRtb87qSOaxamg_LU52SWE_Ndf7nwliT2ThotUVPvePuxfw1hAPwUrB_tNcXjRHk11Fnp1Mi3Mvitx1DNO6yLW-UK0dzSN38FAYXkYbOmtkujVxlOR-1LC4clXxRbXh56QaF1MWFhAOLjSU2tK9TUKjbvVJOIo_e8hPqf2yoGlSHK_jvUNeXjoGRSPNzZEMhz9lgkKzqnpcWdOn_H1haJWWr7yu_7CBVhA5C8MugN9HObShsGSqR_-X0L2Gvere7gAXyI-GO6QarlVdjaL7OlO4EMXViVYY3qw28Z9R5n0d1isB_p0OzQzuFhAuqQVI-Dhq_9rJHM8FHGmxkpX0uV64LEZSuoN4w_EQ7-dikJ4jmshY4TFOc1jefqHshACFSUEqj-sfPmO78BMZFhALbaS-IjBsx0jDdpjncsRtOqmecQgr1NXz67vjKl3EFllARWhy1EfAfyK41g3z6P_eceZdA6l6ql5kwQ4WSHgC1hAneCfOiUKealn6-TpYDx0cK-_yNZGoNyUHU-eXdVgf541dxa4i0BA3vQUkuslQCtq_1UqsBRe6ZTcdaXYgxvL3lhAS5h5oLXNgi3ISEuEq9IJfpEagrQNSCPnPyg8Qbz83omtFgQW3Vaz_9VQmqce-CrUAqS6umg4x0Bks7A-FwOlyFhApLSI5IxPHrIZA5HbjgniTsCYsSWcDDZbTdnBDeTe9S7Fy7hm6nMrdjrE70UuA4R1MmmqhRrV_DLq6M5rSCb_r1hA8YjjXj5VopX4iKqs1FuMvsMYNglsMohKFz2kFTA_vmuP4yxwM-9O6_T-HxzOy_tL65Fjh09ZS5vp5DjcLqBbDlhAs5oyp7UENIIHrX5JK4mTg42gs5RZOdiL8ZlLsM8ypewxBFxsZrdP5gL5WmXv0Uf8kxi3MOBxndTjYUr96DgAv1hAWbWIYmbpC2-zx98wi4-uKi2OLscm8Jt-RUmoJf50T_tuB3rqmSMAo2MMPCqjY4Ymtyk7Z3hesbiCnA-_NA-BcFhA30QOvUKVJ06yRyI0KBv5uRCUVQ9ZRsyZLxSdOGKzBau9OwzbtkmDCDPdyoiEP0nhL3Sms7UeK61ytmfU4Toy7lhAjdmR8O6vPYgJI4VQbALdzsQiMLoEeoaBhLLFSBIApabtJz3ATy1ut_KZPhWvMJ7xtf99v9bmFIDa0qjVfoU9MFhAXzLH1MIrl11xE6_w1lBMUsbZ2xkhVlLThi9za_wZG3On3068HNDxeZfTRUD4DQdya-7nh0SrRZxf8iDJ7RrUO1hAF4bXtTGsK5XSz-FEXmw534vd3POshtr0eDy2FnT3RHaZcyQ2kwJXWrX7GBwowwgfC3aLPUFdt9_lkFo0UCaNlVhARe78rzI3ng4EXH2Ryk4EAqbvZiOTPUyPIovFYHQWvlLHUfSSijn7aT11SMwKZJBQpfzlH69xF4bXl1sa5Hj041hAt9iQsuMXbFL5fnmqHWjrzBO6GlndQFMn1WJZuYoSM-KxMar2zLdwPm3EWdOs8Ni-xa8AUKqWYOJsRyVoUJZ9hbAAWCDtpqPZXfWaBxkt1pdXUtHcZ5xqNhtbOTAE4KdscDO9pgFYIF0VlyOPCLWSwtdqkX_x-BJd_9LUMyLZtn7WNiavFAbPAlggH0YM4YyoHbz9VfZnZ6eNcfuNo3LHGxcN_vW5u2n_O7oDWCC78e0rAM5iyd8CLYdcj3D2dWI6U-MR8epKIjV35Pro5wRYIJn4e_nVai0rht4K-FnFP5FHkb-ICDylpXYS9QbuT8baBVgg0zJfMxMLyPLuiWS3vFFWwZCfMAUeaGV1O3C_JW_4HfwGWCDKUQYcOX5gP5s3RanfKNZ-1EZUgghXId_pbK0grfJmCgdYIPWGmHtapDPAOKXefytJry4Q5abIoInFMqwr6CTii1anCFgg-1rPwKroj07lQL50nBIvCZlYrWWJcDyV1KWCdLyah_IJWCAgyU2rkbKZ36SlI6Ma_QMP90J4R1mOy4lF7xBHeNT6JwpYIDMQuAyhN3w3CQHLm52hfc0pzBPGwOhGJ_yk6b5-PNZxC1ggkV6dIlcsswFdog6o4JIeg1ZcJRk6DaG0btj-2242KVkMWCBGyXmX2AIDjFfluOGcg6TzQCpzNGckqnt9QdLXo3-k-g1YIO6DVWLHxeovU_uf8sAK2qVntGVEDlo6kLZKqOISAfF2Dlgg-vUNXmtS3kCAhFL1UQYdi7MQ4utTKi2B71EBjmIRTuwPWCBvXPmu7UK-_ymgSPHnB_Dk6VIhGoq-0R-7GDtqueRWlIMYIhgjGCU\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:06:03Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhApRJ_tlBDF8a3SIkT3Buh7mhdx4USuuP5jl6jCBL9hnKi1FJ79Zp72adevkqMcUvGzGm_LULhjlchbJP05M6jolgjgCQCodlXLqLfHTZ22b1uFhBHLBq2xmh2JpPhYgHR02Rv_AqYN1hAknm_XwBuQRzvYGPgKWFekHFs9NOVN6AU68pkw31KSv-OZZc0eHYBCS8mSK9Z-6IZxcwaKnUhoUE8s5fo-_OQcVhAFznySCTZpNs7rgZPDAhuRT1w46wCpFWLmeI7vFrA057BFyij-mVTMdLLty2gCGcht_T5BW-eIBhjpj_kUvmtp1hAVmsMYXJtZZ9hW15yeOsarX5PYD9yKtCiauuJUhQuSBePoyJd9spQ0kYpY7fAuHH_F2_rDwUgdt89m0tReVGuylhAncdDxB9z7fCowpfmrY1Q_nI3iDQwZwyYqk75vX0In19HyJ-l00h2kP3IDD86Ft0aagumUJiM5v4KoFbZP6Gae1hAFF8ZYEtHTFUP99WjTkKleTtpwnw6TWCqdbjfHsG_CU11rU-02hUqpF0eOlFh3Dt1BXWViDTC_Snvo8tNUclYiFhA-sbLIGlrNaPfMzkvWo7BwX_x-vr0J1AATdA78kB5dFHfreov-Xox9gyCZEYZu8Nd_32W4ui3uv6kjv7qhB4OKFhASaM1KKff9fp31Mmm4FeWewe_vguFiMTxsYEfDNnTsJCTA94M_Lx79SiWUxVhIDSGDZTjuxvghyul5ptO6sNxmVhAWJAEVN2XfuWgFGWEryS6iBdPwlYdzzHsyYw7xwIM3QDiwVQleH3QAlvG7lhO2vJtHhvejR987q9Zs-gDPPur3VhAdl8sXYqxmViQmSVxX9qd7U4HSo8-qsJOjMR7MNbrr-k-rpe5lvhVhJAPIkduC_Yp4Z-qA8hggHxxFfRQ7fAI01hADucGvHfFl2oQKYa-KwgtT7o82ldA8S5nrbFBsmjnnsacycJgcQeBczjnMC-fBosu2v2fMm-j-c5JJuvelrwx1VhAmdH01Jn4McwBj7uaF3j3GynXwXjAC7a4BuF6j5c4o3bd7IcZhxZ_lIFl8rKU1gktjy8RnwwGPwY3lygBmQcLwFhAzaUL29Ca_dsRBGaukA4zc9af_PIlJz0xfItyPTgHpUvn6ApVAlrqdGuYXUD3-ZdGUKSuQjc69ip7Jouqwk5aKlhA6xSKBCwzo4eFYsgnRcr4bYGRA9a0Xo1YtaNqLLndQFkDKoK1QFWqZQ-8ZsXrmLHj1zdfc302qnBx3AOKa8SnjVhAzhDbydk89Y06NBZeuzAKDrSPbZSoeE7l3420YPI1MnTWpYbS94llkDZFHQ9UlA6C5v2VFYVyZ5nGXWspiu2CI1hAKErcY0GGeX3i4uQCPEzwG4sEILOBXGnc-nmK1_vYokYk-mLzNWqqK1okP-ZFgOfLJv6luUxv6SCmx4CKow8Mi1hAISx3BlQu_IjmncamJNTKTRV_7xdGoKEApqxsAvtOjatTMyVD9dpEzY0QtKq0ANbKMthRfPOsXbSMFnzmHppiA1hAe-ckgCBTep03fON8fKZ_usPj_NuEM57OIMdjJk9UGQ2zMLyyKsY4ZXMnSp8EgVVQI2t0jHYwM-oBTYZZAc6e21hA8anDAN33PFncs3lWnOYU4baJw7l2IOXn3OAefaW-amUDMPxdvTwurzkCu2DGlnVPTrb089exVtJeMm0ekGK3BlhApoV4ZKi2j7Z8KUoxZO5uDiGp9Xk1XAilvVolWv48_SXVRzUnFH3W9iOAoFyrZJU5WjDoXs0XEuoQqxMm3dJ-l1hANmqOyc12eEOBVMosw6C10iR-etC3f6uglL9_zPA_RHuebEIZLtBSVO8kEmqqDIhTor-H9xomQoxBwOl6dH_74lhAUoZgIldyIkAhaUGwz5LwAMHxSbeJyuHTH6R3WrfCYXUevWbSxX7aKaicqTJfOyyjYC7JC-f6DhGtiUcOWVAO31hAWF_W_twHjHRwKSZpWmf4K3D-bomi_v5X52fjHj9XQwNodAPCpqYZZv2d8gH_q3WX4cW9q4XeLTOGFAQdH-CKxVhAua-T_ls2HcHWrZ4LSPbT1HMI8dUepj1QwIOEnQ_Ep7CENTUPQQVpMhZTaflRrevALRuBMOJ1X-O3QHni1ET2X1hAZx0eQURxdAA9A5WycTaCWJ6DQavholeRkJnNsaZKoMl2AruvOBWT4O_SnJViksGuycEP97E5jaIXnHQ6wcGl1VhAmfVvmsWqxsBPDmsLCnU5Vo_k_rYzJP_pmPE_44CgLmN8zeDFKLw0yTHpGCPC9115_zXhc3IqJ2lCmh5LfaI4mFhAzioBkjR027RXCXhyy3Feik-unPhPYcfAv2iqqx4Nb1XW1FxCAVI_49_0mrCCDp6DvQDjN-YzeiXi_LqR24ZbBFhAmSaAVg0eD8EYRS9zuiB0aRLEZ3bkC74FaB194yadY3JYaE9Kn4BDZP8_GrycS3an4dRQ4_jyGtfLqTFMxdBpQlhAPir5aP5jkOxZWF87SuXyUpX0ESOtsYpcDzXyDMQxtYjog0WHxVVpgTgL83FTJfPwQrSe-umdVTsPB_9DtefyL1hAKGR9_8wv1e5dKB-qEIUD-l2fQlUWjxeFoX2Ds6VRBq_itBstOejvMHAgkDaF0trvAGm6liAYStrZmYaYZ9sD3lhAp5AxQWJDhreBsF_mWRiiixwWDZ_l90Dn-eEczDTaJY7qA1CzvVjyLct4pDQPsiXET8M9TmnRXcu4NWwpdunpbVhAd5Cvcm0a5a48NqZ3S9bSUEeMEp4y5pUzHm7Pc2RgUHPJlMkxfua-0Lrg6WeR6z_3bSxAhfnsjSbZ3gO57dbtz1hAGT4i3-kiYJTjEAbt0IMpmERqeLE8_PdBCHHSRCnaGwKN6lPeYy8tmu8soX3EbW97PJqcdfCDRtougFlJYba8v1hAXxWhnzQdjMs8bazqtXbNRdKlg8YmNGyJmUMo7qgwSvG_pqj-5H5iFAwros4QTrUD3s-a2k-oYJE-97tXnM5pwFhAuOHso4KFleLlcGVhHZNV4eVE-KVTcFchmuHW9yR_aGHfc6WBTQiiWxGzuz9-vyxDYMuWVHRZG5_wc_UUItLcMVhA1BPJ9Qdu2IVpZQzoV0180GoF3fAwn5NKjqr4Eh6AON-EqKwSMvMjjkCPmxsb0ElY76XN35iom69ecPDchhe5t1hAFJ7_Rfg0eeGuiZYKcJHGOfMwh7SSboSzKncVFAGG75w2Z5BmriTQw-npN4T0CXphkxYOFssPDsqz7LG1oQ4sylhA1H30Hq4v3Z9AV-Hxy9GT16pgNfCiC3loU3ubsg1blW-zt0MpjI4lRWzXjIaT-pPgK-4rDeEJp930QLwmiAyKxFhAEhZek-2HyTnR71zs1uZUbg7jI8sedVcCrrEXeXlRtb87qSOaxamg_LU52SWE_Ndf7nwliT2ThotUVPvePuxfw1hAPwUrB_tNcXjRHk11Fnp1Mi3Mvitx1DNO6yLW-UK0dzSN38FAYXkYbOmtkujVxlOR-1LC4clXxRbXh56QaF1MWFhAOLjSU2tK9TUKjbvVJOIo_e8hPqf2yoGlSHK_jvUNeXjoGRSPNzZEMhz9lgkKzqnpcWdOn_H1haJWWr7yu_7CBVhA5C8MugN9HObShsGSqR_-X0L2Gvere7gAXyI-GO6QarlVdjaL7OlO4EMXViVYY3qw28Z9R5n0d1isB_p0OzQzuFhAuqQVI-Dhq_9rJHM8FHGmxkpX0uV64LEZSuoN4w_EQ7-dikJ4jmshY4TFOc1jefqHshACFSUEqj-sfPmO78BMZFhALbaS-IjBsx0jDdpjncsRtOqmecQgr1NXz67vjKl3EFllARWhy1EfAfyK41g3z6P_eceZdA6l6ql5kwQ4WSHgC1hAneCfOiUKealn6-TpYDx0cK-_yNZGoNyUHU-eXdVgf541dxa4i0BA3vQUkuslQCtq_1UqsBRe6ZTcdaXYgxvL3lhAS5h5oLXNgi3ISEuEq9IJfpEagrQNSCPnPyg8Qbz83omtFgQW3Vaz_9VQmqce-CrUAqS6umg4x0Bks7A-FwOlyFhApLSI5IxPHrIZA5HbjgniTsCYsSWcDDZbTdnBDeTe9S7Fy7hm6nMrdjrE70UuA4R1MmmqhRrV_DLq6M5rSCb_r1hA8YjjXj5VopX4iKqs1FuMvsMYNglsMohKFz2kFTA_vmuP4yxwM-9O6_T-HxzOy_tL65Fjh09ZS5vp5DjcLqBbDlhAs5oyp7UENIIHrX5JK4mTg42gs5RZOdiL8ZlLsM8ypewxBFxsZrdP5gL5WmXv0Uf8kxi3MOBxndTjYUr96DgAv1hAWbWIYmbpC2-zx98wi4-uKi2OLscm8Jt-RUmoJf50T_tuB3rqmSMAo2MMPCqjY4Ymtyk7Z3hesbiCnA-_NA-BcFhA30QOvUKVJ06yRyI0KBv5uRCUVQ9ZRsyZLxSdOGKzBau9OwzbtkmDCDPdyoiEP0nhL3Sms7UeK61ytmfU4Toy7lhAjdmR8O6vPYgJI4VQbALdzsQiMLoEeoaBhLLFSBIApabtJz3ATy1ut_KZPhWvMJ7xtf99v9bmFIDa0qjVfoU9MFhAXzLH1MIrl11xE6_w1lBMUsbZ2xkhVlLThi9za_wZG3On3068HNDxeZfTRUD4DQdya-7nh0SrRZxf8iDJ7RrUO1hAF4bXtTGsK5XSz-FEXmw534vd3POshtr0eDy2FnT3RHaZcyQ2kwJXWrX7GBwowwgfC3aLPUFdt9_lkFo0UCaNlVhARe78rzI3ng4EXH2Ryk4EAqbvZiOTPUyPIovFYHQWvlLHUfSSijn7aT11SMwKZJBQpfzlH69xF4bXl1sa5Hj041hAt9iQsuMXbFL5fnmqHWjrzBO6GlndQFMn1WJZuYoSM-KxMar2zLdwPm3EWdOs8Ni-xa8AUKqWYOJsRyVoUJZ9hbAAWCDtpqPZXfWaBxkt1pdXUtHcZ5xqNhtbOTAE4KdscDO9pgFYIF0VlyOPCLWSwtdqkX_x-BJd_9LUMyLZtn7WNiavFAbPAlggH0YM4YyoHbz9VfZnZ6eNcfuNo3LHGxcN_vW5u2n_O7oDWCC78e0rAM5iyd8CLYdcj3D2dWI6U-MR8epKIjV35Pro5wRYIJn4e_nVai0rht4K-FnFP5FHkb-ICDylpXYS9QbuT8baBVgg0zJfMxMLyPLuiWS3vFFWwZCfMAUeaGV1O3C_JW_4HfwGWCDKUQYcOX5gP5s3RanfKNZ-1EZUgghXId_pbK0grfJmCgdYIPWGmHtapDPAOKXefytJry4Q5abIoInFMqwr6CTii1anCFgg-1rPwKroj07lQL50nBIvCZlYrWWJcDyV1KWCdLyah_IJWCAgyU2rkbKZ36SlI6Ma_QMP90J4R1mOy4lF7xBHeNT6JwpYIDMQuAyhN3w3CQHLm52hfc0pzBPGwOhGJ_yk6b5-PNZxC1ggkV6dIlcsswFdog6o4JIeg1ZcJRk6DaG0btj-2242KVkMWCBGyXmX2AIDjFfluOGcg6TzQCpzNGckqnt9QdLXo3-k-g1YIO6DVWLHxeovU_uf8sAK2qVntGVEDlo6kLZKqOISAfF2Dlgg-vUNXmtS3kCAhFL1UQYdi7MQ4utTKi2B71EBjmIRTuwPWCBvXPmu7UK-_ymgSPHnB_Dk6VIhGoq-0R-7GDtqueRWlIMYIhgjGCU"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:d4af40f8-bd98-400f-907c-a48f232bd2be",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:06:03Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAdT_LBIS2PKZcusAlz1kAMFBXIClNiqI2IDUW7SiVWKwWRcNNFNlCg1C3_t1iKnGn9Y-R8THsqw2kKohtfMkOlFgjgCQD1a-O41tuceEdyJsip_uV2nEbBklQ5l8kVfhvCEgAHPSYIlhA9N0PVsTTOSNPDVR2utSUDRggCq78wuvd2-so2nzUDDwsUCLxqCROPCGWDbt5EQHHbZiZgiNwiX28v1EUpdk2H1hAE1Txcv_fLUetkRWH4nvMGPBvVfBIXwax632IEzF4FuCUwmzx_psUCyNLQKl6gAQUnKlfidAV5qc-7tOi62ZYB1hAyz-y-JJjENfjezcZsbKUJSo4hOtnIj3aTkPO8FenOsPNPlZ1clEdVVdZR3fkajj0ksDT5MU9Nw678uLKQ7henVhA4anvhWcrt4OJJYqJH7UAgjQt8iyJu9PXxiKvI6FljtL6XdjIToaBIBO3JBqZU595p7czcoUAIV_T7EPUf2IHIVhAWnJzDCqMctbcsd1_Z9uOxBMBhUu1_dq_LGbIk6geSoWoMGE08yo9ZVC__S1bGuzBTQWHbB32gnMhLCm-PLjrv1hAFOMSowCzkeuQerSYQv_ksr8x5i9GU20VOAG5VtuG6c_Yo0zFwEEzr_fWMgSlDFpcUHqKo0zPg1MaMuF4CXIQCVhAHnO3e077QAcC-RfXo4VeKow8HsP8adSVS7u269zfN8WueztoXWH922UDpkXOHdj5tqZ47TyqnYpxUbMFg1yT6FhAL2904utpA8Ef3O98hNQfKtfCnJkwadYck-dPfYEGZPeWznsHuCoQF8RoRx46JZ-Kdw970ylWFXqwTUqkefrlfVhAYwpBH7D4niDPvIvmuWVz3IEOsY17U34Pf7BWSpGSmfqErUD2_3PT42tiPBl9hDG9m9OpPLWIQp3qb8XfJtS6tlhAkgGTqfUjq7mo-wYANgxXskZXFW44Z2eHGKrdHNXjAVU41MhymnKqb9tcHHYZNRNsczfPKuPRrR4iy5fXOtFLZlhAtFewK30cDGy9T5GNbzPsYVab0iPIJm2BGzYqdZlwcvOqplLn81jiu2VXYaedZEqVvsUEH9gWNKJwvyAH7bmErlhAudfvOGebkNhC2n77sanjGet7b1o7wqsA1qQQhFSqFeQbAd7-YQmAH1eoMqVNSxSpNY622UncO5zzhfRkOy6jM1hAzH-FPDMmEbvUvO1lUe2Ntg_7M3e4dFCeoU7RAS3JX-CAN8ZFksjCGqcmBATKF_SNhFyZGWWUXiIBptOOCOYCj1hAvrrWcnxfl97ke-iVtqBic_h0neLVjjTLKLlLelWTyWqKmzD99B3bhZiDEbnlGuMletN1-FtRrtDvWjxEBk4wZVhAUnrMi9wHn8FwIvLN79qNLoSYb8BgfLKpqT_iedcVaSFdiArfTjGccLkQtix_GH2Uod3zbxWz2LMBaSsUjoXxt1hAAtNj9rtwcSrH5EM3K24lgv67B65mjKVgDmP9qnawFXyyIk8LfD8O_Tx-_xOWLs38VmKW5-o8nNCAMb1x060nO1hAlwb1NYl6so97laXTrKWbjuqvX9VPeRlU2OADtl8MxfeFTrOzgu0ckBfTw62dFDzfze9O8iXHQ5cD6gUKh4iX3lhAQtvXcq5yUHAtrmzVFzduFo5JOf0hq0aPKWd0A3O7HOGR5HH9zu6x8cr2Kmi5lEsXWjc6bIvJ8LeGE2vIKQRV_FhALHkZ3CYaNmtfjR5YT21blsGK2ROnpqS_LPaoh4TqjpHvSvOjQB-C8Wr5jHJYWrbkEkH0eDYocLUiuY6V-n9x-FhAssxIPxf1Wn22fLF7NtHpzFNy46Y4FMj16tmm3X8FqrJX3eZE-PECE6JPuXdMN3oPeYvQ7eCbCi8wPsxA_26GF1hAH4Ax1bo1cW4JYK4fa23oGz2nNWQ4Edi36qyeDPda38OTCLueCO_WB3iQVQ1zb_nBUSiCoyJ7CG_ycK7uUklobVhAgPVnvfmNcM-ayJm9Hh0IT4jtKVOOuQAjqsJBdvOvnJomU9uahQXWZPRgQbaZNYbsj9g1RqX72VZVG4K_TGYIt1hAI-YmyXnvFSZpkGlx-j8TTJMCAsxuKXoLKjXM-9pLIeCVOhbIFwX-zpJiLveasWyJU8zFSTCnGctNdWjAd0nkoFhAbCoAk_oJu-H0SMNoCvAOadm82dBtqqSP1gBiAOuS_3Drka0AtilljmND1mgbtmjSjeywS4JrgIgVPIJTLjPN11hAuyULmrtYNYZ-K1_9EMrmHauARkQSgvhkBS1pmdHyU_Kp3oDRxnK_S6eEhBtAKmWAvBcsfSvgONeLQhiBrYgbKVhAW-olbLD_m21mxBObV_B3jQAmg9ULeZVz11l7X_TfPtedkCnEwpzHS-WMi3czOuNc2CnnxKjs7FFKJSHBZHF6xlhAHVF0pZEOcLNEKx2Ci-N_iC2rQ9JRnb7RyNJeGWM89hcR-pDlf-vMAboAcrDwDpxJieAxLSzKG4DT8GzdjlR9PlhAYiYAz7vvRHFHtakrhNsOzqbOkM3QSO7N3UodEI2cAGNXuBbgbchRvC5heisyRPdcCyGvnw4uukX0JGTl5FaNp1hAykOGi2T3sRL4UWEVN5zB6z205ePPSmfEb-Hvt0dZ1TSuF8IqLYgB2vKg3BTJp5pKgO-0sUQn_Ke86ShQul0Z3VhADdxf5NW5fq1qRsOV5dFEARoSmY4BzHUZoZtOSX-gUEUxnxj0hFfjor4GxqO3C0eq4_PRHjKAIr8TPQvmlhikSFhAYhb9JdusvAraskONeH3k6J4iThLAx7Gnd3kUWcFHYPQFRhe6PFUEZtTAtal6rWbkfu8jnKWi0ao795vaWjb-21hAXIBmiSkI0oVKbDQeW4srAU_BzxG6V9K9ElJtAkPeJBK2czlBdUCmI16NgPwLVb-ByjCULAx6_QK-fDSUWVkGoFhAYMGb2_zMnTX7n72BTW0IuMoPfUlgsc7qcA3ldq8l4NMKTcYYEo7R2CdY0e2XGUx4pCf7KTeEOmv7U3an6pv2VVhAdRvcgjjSL8QJHELVMnTpev8T3y_eyewTjGi8gJRtJ2DV3HuGW9VOorHKNCj-oovZFfx_K4eNDUBK7zr7geCKlqsAWCAM3zKHKBEXHCviMbMwKtLMdC5pQBjun49T2T_Av9X_FAFYIBgGs3h8sYDwfs2a7yoL754o88KDSEGMImLHBJH4_5BOAlggsuUf4j9s0svHdM1XY5PiewnREbiXpr5GhVMPgh5PkVsDWCBGFbJEcnH46mGntQma8mfiPm50Nm0WhghAihZPlvMpFARYILeyf9-YTGknobYuD5uxiOMX1LIMC-Q27u1C08Sv63YaBVggAUYX7P2H_YZkcRAUwe8Uiubc1QiKggTOqcSV0cIlbZEGWCDUwdyTaKn3OOEBoyTiObPBAADELAuvGFwXCgNYMeMRfgdYIFwMzSLF4wimFzPyv0x7ZygBI6hkYors4UyclnwNPQvwCFggVWZeUnPkLi2QUZj9H-yKiH5kRbqaVrGDvIws_mpXzzUJWCA2ow6fHO9UZjCuUgAShgZ1ejBifuRgRmeXzcxvar6hYQpYIBysvogfn5BMiDN6y-egVcNyaX7uBYeM2aPgyG2iG2UDgwUGCA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:06:03Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAdT_LBIS2PKZcusAlz1kAMFBXIClNiqI2IDUW7SiVWKwWRcNNFNlCg1C3_t1iKnGn9Y-R8THsqw2kKohtfMkOlFgjgCQD1a-O41tuceEdyJsip_uV2nEbBklQ5l8kVfhvCEgAHPSYIlhA9N0PVsTTOSNPDVR2utSUDRggCq78wuvd2-so2nzUDDwsUCLxqCROPCGWDbt5EQHHbZiZgiNwiX28v1EUpdk2H1hAE1Txcv_fLUetkRWH4nvMGPBvVfBIXwax632IEzF4FuCUwmzx_psUCyNLQKl6gAQUnKlfidAV5qc-7tOi62ZYB1hAyz-y-JJjENfjezcZsbKUJSo4hOtnIj3aTkPO8FenOsPNPlZ1clEdVVdZR3fkajj0ksDT5MU9Nw678uLKQ7henVhA4anvhWcrt4OJJYqJH7UAgjQt8iyJu9PXxiKvI6FljtL6XdjIToaBIBO3JBqZU595p7czcoUAIV_T7EPUf2IHIVhAWnJzDCqMctbcsd1_Z9uOxBMBhUu1_dq_LGbIk6geSoWoMGE08yo9ZVC__S1bGuzBTQWHbB32gnMhLCm-PLjrv1hAFOMSowCzkeuQerSYQv_ksr8x5i9GU20VOAG5VtuG6c_Yo0zFwEEzr_fWMgSlDFpcUHqKo0zPg1MaMuF4CXIQCVhAHnO3e077QAcC-RfXo4VeKow8HsP8adSVS7u269zfN8WueztoXWH922UDpkXOHdj5tqZ47TyqnYpxUbMFg1yT6FhAL2904utpA8Ef3O98hNQfKtfCnJkwadYck-dPfYEGZPeWznsHuCoQF8RoRx46JZ-Kdw970ylWFXqwTUqkefrlfVhAYwpBH7D4niDPvIvmuWVz3IEOsY17U34Pf7BWSpGSmfqErUD2_3PT42tiPBl9hDG9m9OpPLWIQp3qb8XfJtS6tlhAkgGTqfUjq7mo-wYANgxXskZXFW44Z2eHGKrdHNXjAVU41MhymnKqb9tcHHYZNRNsczfPKuPRrR4iy5fXOtFLZlhAtFewK30cDGy9T5GNbzPsYVab0iPIJm2BGzYqdZlwcvOqplLn81jiu2VXYaedZEqVvsUEH9gWNKJwvyAH7bmErlhAudfvOGebkNhC2n77sanjGet7b1o7wqsA1qQQhFSqFeQbAd7-YQmAH1eoMqVNSxSpNY622UncO5zzhfRkOy6jM1hAzH-FPDMmEbvUvO1lUe2Ntg_7M3e4dFCeoU7RAS3JX-CAN8ZFksjCGqcmBATKF_SNhFyZGWWUXiIBptOOCOYCj1hAvrrWcnxfl97ke-iVtqBic_h0neLVjjTLKLlLelWTyWqKmzD99B3bhZiDEbnlGuMletN1-FtRrtDvWjxEBk4wZVhAUnrMi9wHn8FwIvLN79qNLoSYb8BgfLKpqT_iedcVaSFdiArfTjGccLkQtix_GH2Uod3zbxWz2LMBaSsUjoXxt1hAAtNj9rtwcSrH5EM3K24lgv67B65mjKVgDmP9qnawFXyyIk8LfD8O_Tx-_xOWLs38VmKW5-o8nNCAMb1x060nO1hAlwb1NYl6so97laXTrKWbjuqvX9VPeRlU2OADtl8MxfeFTrOzgu0ckBfTw62dFDzfze9O8iXHQ5cD6gUKh4iX3lhAQtvXcq5yUHAtrmzVFzduFo5JOf0hq0aPKWd0A3O7HOGR5HH9zu6x8cr2Kmi5lEsXWjc6bIvJ8LeGE2vIKQRV_FhALHkZ3CYaNmtfjR5YT21blsGK2ROnpqS_LPaoh4TqjpHvSvOjQB-C8Wr5jHJYWrbkEkH0eDYocLUiuY6V-n9x-FhAssxIPxf1Wn22fLF7NtHpzFNy46Y4FMj16tmm3X8FqrJX3eZE-PECE6JPuXdMN3oPeYvQ7eCbCi8wPsxA_26GF1hAH4Ax1bo1cW4JYK4fa23oGz2nNWQ4Edi36qyeDPda38OTCLueCO_WB3iQVQ1zb_nBUSiCoyJ7CG_ycK7uUklobVhAgPVnvfmNcM-ayJm9Hh0IT4jtKVOOuQAjqsJBdvOvnJomU9uahQXWZPRgQbaZNYbsj9g1RqX72VZVG4K_TGYIt1hAI-YmyXnvFSZpkGlx-j8TTJMCAsxuKXoLKjXM-9pLIeCVOhbIFwX-zpJiLveasWyJU8zFSTCnGctNdWjAd0nkoFhAbCoAk_oJu-H0SMNoCvAOadm82dBtqqSP1gBiAOuS_3Drka0AtilljmND1mgbtmjSjeywS4JrgIgVPIJTLjPN11hAuyULmrtYNYZ-K1_9EMrmHauARkQSgvhkBS1pmdHyU_Kp3oDRxnK_S6eEhBtAKmWAvBcsfSvgONeLQhiBrYgbKVhAW-olbLD_m21mxBObV_B3jQAmg9ULeZVz11l7X_TfPtedkCnEwpzHS-WMi3czOuNc2CnnxKjs7FFKJSHBZHF6xlhAHVF0pZEOcLNEKx2Ci-N_iC2rQ9JRnb7RyNJeGWM89hcR-pDlf-vMAboAcrDwDpxJieAxLSzKG4DT8GzdjlR9PlhAYiYAz7vvRHFHtakrhNsOzqbOkM3QSO7N3UodEI2cAGNXuBbgbchRvC5heisyRPdcCyGvnw4uukX0JGTl5FaNp1hAykOGi2T3sRL4UWEVN5zB6z205ePPSmfEb-Hvt0dZ1TSuF8IqLYgB2vKg3BTJp5pKgO-0sUQn_Ke86ShQul0Z3VhADdxf5NW5fq1qRsOV5dFEARoSmY4BzHUZoZtOSX-gUEUxnxj0hFfjor4GxqO3C0eq4_PRHjKAIr8TPQvmlhikSFhAYhb9JdusvAraskONeH3k6J4iThLAx7Gnd3kUWcFHYPQFRhe6PFUEZtTAtal6rWbkfu8jnKWi0ao795vaWjb-21hAXIBmiSkI0oVKbDQeW4srAU_BzxG6V9K9ElJtAkPeJBK2czlBdUCmI16NgPwLVb-ByjCULAx6_QK-fDSUWVkGoFhAYMGb2_zMnTX7n72BTW0IuMoPfUlgsc7qcA3ldq8l4NMKTcYYEo7R2CdY0e2XGUx4pCf7KTeEOmv7U3an6pv2VVhAdRvcgjjSL8QJHELVMnTpev8T3y_eyewTjGi8gJRtJ2DV3HuGW9VOorHKNCj-oovZFfx_K4eNDUBK7zr7geCKlqsAWCAM3zKHKBEXHCviMbMwKtLMdC5pQBjun49T2T_Av9X_FAFYIBgGs3h8sYDwfs2a7yoL754o88KDSEGMImLHBJH4_5BOAlggsuUf4j9s0svHdM1XY5PiewnREbiXpr5GhVMPgh5PkVsDWCBGFbJEcnH46mGntQma8mfiPm50Nm0WhghAihZPlvMpFARYILeyf9-YTGknobYuD5uxiOMX1LIMC-Q27u1C08Sv63YaBVggAUYX7P2H_YZkcRAUwe8Uiubc1QiKggTOqcSV0cIlbZEGWCDUwdyTaKn3OOEBoyTiObPBAADELAuvGFwXCgNYMeMRfgdYIFwMzSLF4wimFzPyv0x7ZygBI6hkYors4UyclnwNPQvwCFggVWZeUnPkLi2QUZj9H-yKiH5kRbqaVrGDvIws_mpXzzUJWCA2ow6fHO9UZjCuUgAShgZ1ejBifuRgRmeXzcxvar6hYQpYIBysvogfn5BMiDN6y-egVcNyaX7uBYeM2aPgyG2iG2UDgwUGCA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:71c09a54-45a3-4a72-8ecd-b55121933ba5",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33794,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:6eaa5288-251c-452a-9786-a0ae2db425af",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:fb3af08f-48c0-4c4d-b6e7-1ef9753ebc83",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:17e8e703-698d-471f-a29c-d86e72150c9d",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36114,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:80d466eb-22fd-44b9-a39e-4e75619bb554",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 210,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SklqRobkt2fbsUZY3tRl9",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:9dd09d42-2159-4bd5-b4f2-5f290ad36562"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:f88aa1db-6338-4521-9c8d-f749c6ab21e4",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:d5279a80-54fd-480b-81ae-c40c14c1da00",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:32a0d4b6-4154-472c-ab37-fc2b1e2995f6",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:b1a3dc1d-625c-41ae-b53d-77afaf9a5f38",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:8fa179f2-d5d3-457e-9684-01e926c88e24",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:067f0058-f03c-4325-bcf2-21f2d9900ab2",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:81f2e0b0-a029-46be-8cf5-86c49eb60044",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36951,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:add4c0b9-311a-4389-88c3-dd90aca45c3b",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37004,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:836cd463-a3f7-492b-8a1b-f5ddc0fb702e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:c0600a4d-3fea-4cf0-a12d-8df250b6bb58",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 197,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SklqRobkt2fbsUZY3tRl9",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:2afa64b6-4ad2-46e2-ab15-4f5ba9e71777"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:76c28eeb-d9ec-4766-a9e2-87813b8cc91e",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:5568ca59-9bc8-4d92-abd4-73efb6f09320",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:e91fb9e9-06bc-4d5f-ac4f-7d34f52d4968",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:7e4e4a50-0f24-46e7-a6d1-f7b2bcea8eb4",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37861,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 591,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:4b95f4a2-ac3e-4c3c-b2e1-636b9092bcb9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 508,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:9a014034-202b-4817-abcf-44e06949bd87",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:e623f9ab-5ea5-465c-88b9-c012258975c4",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39278,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:060392ad-4911-4449-9695-c26bf5844798",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:f7a24a0c-6cb1-44c1-a45f-0bec00e20820",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:016c31d8-d81b-4524-80ba-0798d20a4608",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n                annotateReportableTest(this, {\n                  implementationName: name,\n                  keyType\n                });\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      testVectors = await sdVerifySetup({\n        credentials,\n        keyTypes,\n        suite\n      });\n\n      // Define the test vector mapping for convienence.\n      defineTestVectorMapping(vcVersion);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SklqRobkt2fbsUZY3tRl9",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:c6dbf1aa-2edb-4f64-84f9-13008017f27d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:69f6b736-d9e9-4c8f-af32-18dea9c661c5",
      "columns": [
        "apicatalog.com: P-256",
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:44bffb47-0270-486a-8bf3-cc892f89d150",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32248,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:f88aa1db-6338-4521-9c8d-f749c6ab21e4",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:76c28eeb-d9ec-4766-a9e2-87813b8cc91e",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:a24f38ec-4c0f-4bb8-842c-8323a9c86862",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 501,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:d5279a80-54fd-480b-81ae-c40c14c1da00",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n        assertTestVector(nestedDisclosedCredentials);\n        for(const credential of nestedDisclosedCredentials) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:5568ca59-9bc8-4d92-abd4-73efb6f09320",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:c69001f6-b4b9-4ccf-a5dc-0598fe2a9637",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 598,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:32a0d4b6-4154-472c-ab37-fc2b1e2995f6",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n        assertTestVector(disclosedDlCredentialNoIds);\n        for(const credential of disclosedDlCredentialNoIds) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:e91fb9e9-06bc-4d5f-ac4f-7d34f52d4968",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:90e1fa2b-f086-4c28-adbe-f23273543324",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Earth101\",\"sails\":[{\"size\":5.5,\"sailName\":\"Osprey\",\"year\":2023},{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023},{\"size\":6.8,\"sailName\":\"Vulture-FR\",\"year\":2020},{\"size\":7.7,\"sailName\":\"Vulture-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"Oak620\",\"brand\":\"Excite\",\"year\":2020},{\"boardName\":\"Excite Custom\",\"brand\":\"Excite\",\"year\":2018}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:06:03Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhApRJ_tlBDF8a3SIkT3Buh7mhdx4USuuP5jl6jCBL9hnKi1FJ79Zp72adevkqMcUvGzGm_LULhjlchbJP05M6jolgjgCQCodlXLqLfHTZ22b1uFhBHLBq2xmh2JpPhYgHR02Rv_AqYN1hAknm_XwBuQRzvYGPgKWFekHFs9NOVN6AU68pkw31KSv-OZZc0eHYBCS8mSK9Z-6IZxcwaKnUhoUE8s5fo-_OQcVhAFznySCTZpNs7rgZPDAhuRT1w46wCpFWLmeI7vFrA057BFyij-mVTMdLLty2gCGcht_T5BW-eIBhjpj_kUvmtp1hAVmsMYXJtZZ9hW15yeOsarX5PYD9yKtCiauuJUhQuSBePoyJd9spQ0kYpY7fAuHH_F2_rDwUgdt89m0tReVGuylhAncdDxB9z7fCowpfmrY1Q_nI3iDQwZwyYqk75vX0In19HyJ-l00h2kP3IDD86Ft0aagumUJiM5v4KoFbZP6Gae1hAFF8ZYEtHTFUP99WjTkKleTtpwnw6TWCqdbjfHsG_CU11rU-02hUqpF0eOlFh3Dt1BXWViDTC_Snvo8tNUclYiFhA-sbLIGlrNaPfMzkvWo7BwX_x-vr0J1AATdA78kB5dFHfreov-Xox9gyCZEYZu8Nd_32W4ui3uv6kjv7qhB4OKFhASaM1KKff9fp31Mmm4FeWewe_vguFiMTxsYEfDNnTsJCTA94M_Lx79SiWUxVhIDSGDZTjuxvghyul5ptO6sNxmVhAWJAEVN2XfuWgFGWEryS6iBdPwlYdzzHsyYw7xwIM3QDiwVQleH3QAlvG7lhO2vJtHhvejR987q9Zs-gDPPur3VhAdl8sXYqxmViQmSVxX9qd7U4HSo8-qsJOjMR7MNbrr-k-rpe5lvhVhJAPIkduC_Yp4Z-qA8hggHxxFfRQ7fAI01hADucGvHfFl2oQKYa-KwgtT7o82ldA8S5nrbFBsmjnnsacycJgcQeBczjnMC-fBosu2v2fMm-j-c5JJuvelrwx1VhAmdH01Jn4McwBj7uaF3j3GynXwXjAC7a4BuF6j5c4o3bd7IcZhxZ_lIFl8rKU1gktjy8RnwwGPwY3lygBmQcLwFhAzaUL29Ca_dsRBGaukA4zc9af_PIlJz0xfItyPTgHpUvn6ApVAlrqdGuYXUD3-ZdGUKSuQjc69ip7Jouqwk5aKlhA6xSKBCwzo4eFYsgnRcr4bYGRA9a0Xo1YtaNqLLndQFkDKoK1QFWqZQ-8ZsXrmLHj1zdfc302qnBx3AOKa8SnjVhAzhDbydk89Y06NBZeuzAKDrSPbZSoeE7l3420YPI1MnTWpYbS94llkDZFHQ9UlA6C5v2VFYVyZ5nGXWspiu2CI1hAKErcY0GGeX3i4uQCPEzwG4sEILOBXGnc-nmK1_vYokYk-mLzNWqqK1okP-ZFgOfLJv6luUxv6SCmx4CKow8Mi1hAISx3BlQu_IjmncamJNTKTRV_7xdGoKEApqxsAvtOjatTMyVD9dpEzY0QtKq0ANbKMthRfPOsXbSMFnzmHppiA1hAe-ckgCBTep03fON8fKZ_usPj_NuEM57OIMdjJk9UGQ2zMLyyKsY4ZXMnSp8EgVVQI2t0jHYwM-oBTYZZAc6e21hA8anDAN33PFncs3lWnOYU4baJw7l2IOXn3OAefaW-amUDMPxdvTwurzkCu2DGlnVPTrb089exVtJeMm0ekGK3BlhApoV4ZKi2j7Z8KUoxZO5uDiGp9Xk1XAilvVolWv48_SXVRzUnFH3W9iOAoFyrZJU5WjDoXs0XEuoQqxMm3dJ-l1hANmqOyc12eEOBVMosw6C10iR-etC3f6uglL9_zPA_RHuebEIZLtBSVO8kEmqqDIhTor-H9xomQoxBwOl6dH_74lhAUoZgIldyIkAhaUGwz5LwAMHxSbeJyuHTH6R3WrfCYXUevWbSxX7aKaicqTJfOyyjYC7JC-f6DhGtiUcOWVAO31hAWF_W_twHjHRwKSZpWmf4K3D-bomi_v5X52fjHj9XQwNodAPCpqYZZv2d8gH_q3WX4cW9q4XeLTOGFAQdH-CKxVhAua-T_ls2HcHWrZ4LSPbT1HMI8dUepj1QwIOEnQ_Ep7CENTUPQQVpMhZTaflRrevALRuBMOJ1X-O3QHni1ET2X1hAZx0eQURxdAA9A5WycTaCWJ6DQavholeRkJnNsaZKoMl2AruvOBWT4O_SnJViksGuycEP97E5jaIXnHQ6wcGl1VhAmfVvmsWqxsBPDmsLCnU5Vo_k_rYzJP_pmPE_44CgLmN8zeDFKLw0yTHpGCPC9115_zXhc3IqJ2lCmh5LfaI4mFhAzioBkjR027RXCXhyy3Feik-unPhPYcfAv2iqqx4Nb1XW1FxCAVI_49_0mrCCDp6DvQDjN-YzeiXi_LqR24ZbBFhAmSaAVg0eD8EYRS9zuiB0aRLEZ3bkC74FaB194yadY3JYaE9Kn4BDZP8_GrycS3an4dRQ4_jyGtfLqTFMxdBpQlhAPir5aP5jkOxZWF87SuXyUpX0ESOtsYpcDzXyDMQxtYjog0WHxVVpgTgL83FTJfPwQrSe-umdVTsPB_9DtefyL1hAKGR9_8wv1e5dKB-qEIUD-l2fQlUWjxeFoX2Ds6VRBq_itBstOejvMHAgkDaF0trvAGm6liAYStrZmYaYZ9sD3lhAp5AxQWJDhreBsF_mWRiiixwWDZ_l90Dn-eEczDTaJY7qA1CzvVjyLct4pDQPsiXET8M9TmnRXcu4NWwpdunpbVhAd5Cvcm0a5a48NqZ3S9bSUEeMEp4y5pUzHm7Pc2RgUHPJlMkxfua-0Lrg6WeR6z_3bSxAhfnsjSbZ3gO57dbtz1hAGT4i3-kiYJTjEAbt0IMpmERqeLE8_PdBCHHSRCnaGwKN6lPeYy8tmu8soX3EbW97PJqcdfCDRtougFlJYba8v1hAXxWhnzQdjMs8bazqtXbNRdKlg8YmNGyJmUMo7qgwSvG_pqj-5H5iFAwros4QTrUD3s-a2k-oYJE-97tXnM5pwFhAuOHso4KFleLlcGVhHZNV4eVE-KVTcFchmuHW9yR_aGHfc6WBTQiiWxGzuz9-vyxDYMuWVHRZG5_wc_UUItLcMVhA1BPJ9Qdu2IVpZQzoV0180GoF3fAwn5NKjqr4Eh6AON-EqKwSMvMjjkCPmxsb0ElY76XN35iom69ecPDchhe5t1hAFJ7_Rfg0eeGuiZYKcJHGOfMwh7SSboSzKncVFAGG75w2Z5BmriTQw-npN4T0CXphkxYOFssPDsqz7LG1oQ4sylhA1H30Hq4v3Z9AV-Hxy9GT16pgNfCiC3loU3ubsg1blW-zt0MpjI4lRWzXjIaT-pPgK-4rDeEJp930QLwmiAyKxFhAEhZek-2HyTnR71zs1uZUbg7jI8sedVcCrrEXeXlRtb87qSOaxamg_LU52SWE_Ndf7nwliT2ThotUVPvePuxfw1hAPwUrB_tNcXjRHk11Fnp1Mi3Mvitx1DNO6yLW-UK0dzSN38FAYXkYbOmtkujVxlOR-1LC4clXxRbXh56QaF1MWFhAOLjSU2tK9TUKjbvVJOIo_e8hPqf2yoGlSHK_jvUNeXjoGRSPNzZEMhz9lgkKzqnpcWdOn_H1haJWWr7yu_7CBVhA5C8MugN9HObShsGSqR_-X0L2Gvere7gAXyI-GO6QarlVdjaL7OlO4EMXViVYY3qw28Z9R5n0d1isB_p0OzQzuFhAuqQVI-Dhq_9rJHM8FHGmxkpX0uV64LEZSuoN4w_EQ7-dikJ4jmshY4TFOc1jefqHshACFSUEqj-sfPmO78BMZFhALbaS-IjBsx0jDdpjncsRtOqmecQgr1NXz67vjKl3EFllARWhy1EfAfyK41g3z6P_eceZdA6l6ql5kwQ4WSHgC1hAneCfOiUKealn6-TpYDx0cK-_yNZGoNyUHU-eXdVgf541dxa4i0BA3vQUkuslQCtq_1UqsBRe6ZTcdaXYgxvL3lhAS5h5oLXNgi3ISEuEq9IJfpEagrQNSCPnPyg8Qbz83omtFgQW3Vaz_9VQmqce-CrUAqS6umg4x0Bks7A-FwOlyFhApLSI5IxPHrIZA5HbjgniTsCYsSWcDDZbTdnBDeTe9S7Fy7hm6nMrdjrE70UuA4R1MmmqhRrV_DLq6M5rSCb_r1hA8YjjXj5VopX4iKqs1FuMvsMYNglsMohKFz2kFTA_vmuP4yxwM-9O6_T-HxzOy_tL65Fjh09ZS5vp5DjcLqBbDlhAs5oyp7UENIIHrX5JK4mTg42gs5RZOdiL8ZlLsM8ypewxBFxsZrdP5gL5WmXv0Uf8kxi3MOBxndTjYUr96DgAv1hAWbWIYmbpC2-zx98wi4-uKi2OLscm8Jt-RUmoJf50T_tuB3rqmSMAo2MMPCqjY4Ymtyk7Z3hesbiCnA-_NA-BcFhA30QOvUKVJ06yRyI0KBv5uRCUVQ9ZRsyZLxSdOGKzBau9OwzbtkmDCDPdyoiEP0nhL3Sms7UeK61ytmfU4Toy7lhAjdmR8O6vPYgJI4VQbALdzsQiMLoEeoaBhLLFSBIApabtJz3ATy1ut_KZPhWvMJ7xtf99v9bmFIDa0qjVfoU9MFhAXzLH1MIrl11xE6_w1lBMUsbZ2xkhVlLThi9za_wZG3On3068HNDxeZfTRUD4DQdya-7nh0SrRZxf8iDJ7RrUO1hAF4bXtTGsK5XSz-FEXmw534vd3POshtr0eDy2FnT3RHaZcyQ2kwJXWrX7GBwowwgfC3aLPUFdt9_lkFo0UCaNlVhARe78rzI3ng4EXH2Ryk4EAqbvZiOTPUyPIovFYHQWvlLHUfSSijn7aT11SMwKZJBQpfzlH69xF4bXl1sa5Hj041hAt9iQsuMXbFL5fnmqHWjrzBO6GlndQFMn1WJZuYoSM-KxMar2zLdwPm3EWdOs8Ni-xa8AUKqWYOJsRyVoUJZ9hbAAWCDtpqPZXfWaBxkt1pdXUtHcZ5xqNhtbOTAE4KdscDO9pgFYIF0VlyOPCLWSwtdqkX_x-BJd_9LUMyLZtn7WNiavFAbPAlggH0YM4YyoHbz9VfZnZ6eNcfuNo3LHGxcN_vW5u2n_O7oDWCC78e0rAM5iyd8CLYdcj3D2dWI6U-MR8epKIjV35Pro5wRYIJn4e_nVai0rht4K-FnFP5FHkb-ICDylpXYS9QbuT8baBVgg0zJfMxMLyPLuiWS3vFFWwZCfMAUeaGV1O3C_JW_4HfwGWCDKUQYcOX5gP5s3RanfKNZ-1EZUgghXId_pbK0grfJmCgdYIPWGmHtapDPAOKXefytJry4Q5abIoInFMqwr6CTii1anCFgg-1rPwKroj07lQL50nBIvCZlYrWWJcDyV1KWCdLyah_IJWCAgyU2rkbKZ36SlI6Ma_QMP90J4R1mOy4lF7xBHeNT6JwpYIDMQuAyhN3w3CQHLm52hfc0pzBPGwOhGJ_yk6b5-PNZxC1ggkV6dIlcsswFdog6o4JIeg1ZcJRk6DaG0btj-2242KVkMWCBGyXmX2AIDjFfluOGcg6TzQCpzNGckqnt9QdLXo3-k-g1YIO6DVWLHxeovU_uf8sAK2qVntGVEDlo6kLZKqOISAfF2Dlgg-vUNXmtS3kCAhFL1UQYdi7MQ4utTKi2B71EBjmIRTuwPWCBvXPmu7UK-_ymgSPHnB_Dk6VIhGoq-0R-7GDtqueRWlIMYIhgjGCU\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Earth101",
                              "sails": [
                                {
                                  "size": 5.5,
                                  "sailName": "Osprey",
                                  "year": 2023
                                },
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 6.8,
                                  "sailName": "Vulture-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.7,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "Oak620",
                                  "brand": "Excite",
                                  "year": 2020
                                },
                                {
                                  "boardName": "Excite Custom",
                                  "brand": "Excite",
                                  "year": 2018
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:06:03Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhApRJ_tlBDF8a3SIkT3Buh7mhdx4USuuP5jl6jCBL9hnKi1FJ79Zp72adevkqMcUvGzGm_LULhjlchbJP05M6jolgjgCQCodlXLqLfHTZ22b1uFhBHLBq2xmh2JpPhYgHR02Rv_AqYN1hAknm_XwBuQRzvYGPgKWFekHFs9NOVN6AU68pkw31KSv-OZZc0eHYBCS8mSK9Z-6IZxcwaKnUhoUE8s5fo-_OQcVhAFznySCTZpNs7rgZPDAhuRT1w46wCpFWLmeI7vFrA057BFyij-mVTMdLLty2gCGcht_T5BW-eIBhjpj_kUvmtp1hAVmsMYXJtZZ9hW15yeOsarX5PYD9yKtCiauuJUhQuSBePoyJd9spQ0kYpY7fAuHH_F2_rDwUgdt89m0tReVGuylhAncdDxB9z7fCowpfmrY1Q_nI3iDQwZwyYqk75vX0In19HyJ-l00h2kP3IDD86Ft0aagumUJiM5v4KoFbZP6Gae1hAFF8ZYEtHTFUP99WjTkKleTtpwnw6TWCqdbjfHsG_CU11rU-02hUqpF0eOlFh3Dt1BXWViDTC_Snvo8tNUclYiFhA-sbLIGlrNaPfMzkvWo7BwX_x-vr0J1AATdA78kB5dFHfreov-Xox9gyCZEYZu8Nd_32W4ui3uv6kjv7qhB4OKFhASaM1KKff9fp31Mmm4FeWewe_vguFiMTxsYEfDNnTsJCTA94M_Lx79SiWUxVhIDSGDZTjuxvghyul5ptO6sNxmVhAWJAEVN2XfuWgFGWEryS6iBdPwlYdzzHsyYw7xwIM3QDiwVQleH3QAlvG7lhO2vJtHhvejR987q9Zs-gDPPur3VhAdl8sXYqxmViQmSVxX9qd7U4HSo8-qsJOjMR7MNbrr-k-rpe5lvhVhJAPIkduC_Yp4Z-qA8hggHxxFfRQ7fAI01hADucGvHfFl2oQKYa-KwgtT7o82ldA8S5nrbFBsmjnnsacycJgcQeBczjnMC-fBosu2v2fMm-j-c5JJuvelrwx1VhAmdH01Jn4McwBj7uaF3j3GynXwXjAC7a4BuF6j5c4o3bd7IcZhxZ_lIFl8rKU1gktjy8RnwwGPwY3lygBmQcLwFhAzaUL29Ca_dsRBGaukA4zc9af_PIlJz0xfItyPTgHpUvn6ApVAlrqdGuYXUD3-ZdGUKSuQjc69ip7Jouqwk5aKlhA6xSKBCwzo4eFYsgnRcr4bYGRA9a0Xo1YtaNqLLndQFkDKoK1QFWqZQ-8ZsXrmLHj1zdfc302qnBx3AOKa8SnjVhAzhDbydk89Y06NBZeuzAKDrSPbZSoeE7l3420YPI1MnTWpYbS94llkDZFHQ9UlA6C5v2VFYVyZ5nGXWspiu2CI1hAKErcY0GGeX3i4uQCPEzwG4sEILOBXGnc-nmK1_vYokYk-mLzNWqqK1okP-ZFgOfLJv6luUxv6SCmx4CKow8Mi1hAISx3BlQu_IjmncamJNTKTRV_7xdGoKEApqxsAvtOjatTMyVD9dpEzY0QtKq0ANbKMthRfPOsXbSMFnzmHppiA1hAe-ckgCBTep03fON8fKZ_usPj_NuEM57OIMdjJk9UGQ2zMLyyKsY4ZXMnSp8EgVVQI2t0jHYwM-oBTYZZAc6e21hA8anDAN33PFncs3lWnOYU4baJw7l2IOXn3OAefaW-amUDMPxdvTwurzkCu2DGlnVPTrb089exVtJeMm0ekGK3BlhApoV4ZKi2j7Z8KUoxZO5uDiGp9Xk1XAilvVolWv48_SXVRzUnFH3W9iOAoFyrZJU5WjDoXs0XEuoQqxMm3dJ-l1hANmqOyc12eEOBVMosw6C10iR-etC3f6uglL9_zPA_RHuebEIZLtBSVO8kEmqqDIhTor-H9xomQoxBwOl6dH_74lhAUoZgIldyIkAhaUGwz5LwAMHxSbeJyuHTH6R3WrfCYXUevWbSxX7aKaicqTJfOyyjYC7JC-f6DhGtiUcOWVAO31hAWF_W_twHjHRwKSZpWmf4K3D-bomi_v5X52fjHj9XQwNodAPCpqYZZv2d8gH_q3WX4cW9q4XeLTOGFAQdH-CKxVhAua-T_ls2HcHWrZ4LSPbT1HMI8dUepj1QwIOEnQ_Ep7CENTUPQQVpMhZTaflRrevALRuBMOJ1X-O3QHni1ET2X1hAZx0eQURxdAA9A5WycTaCWJ6DQavholeRkJnNsaZKoMl2AruvOBWT4O_SnJViksGuycEP97E5jaIXnHQ6wcGl1VhAmfVvmsWqxsBPDmsLCnU5Vo_k_rYzJP_pmPE_44CgLmN8zeDFKLw0yTHpGCPC9115_zXhc3IqJ2lCmh5LfaI4mFhAzioBkjR027RXCXhyy3Feik-unPhPYcfAv2iqqx4Nb1XW1FxCAVI_49_0mrCCDp6DvQDjN-YzeiXi_LqR24ZbBFhAmSaAVg0eD8EYRS9zuiB0aRLEZ3bkC74FaB194yadY3JYaE9Kn4BDZP8_GrycS3an4dRQ4_jyGtfLqTFMxdBpQlhAPir5aP5jkOxZWF87SuXyUpX0ESOtsYpcDzXyDMQxtYjog0WHxVVpgTgL83FTJfPwQrSe-umdVTsPB_9DtefyL1hAKGR9_8wv1e5dKB-qEIUD-l2fQlUWjxeFoX2Ds6VRBq_itBstOejvMHAgkDaF0trvAGm6liAYStrZmYaYZ9sD3lhAp5AxQWJDhreBsF_mWRiiixwWDZ_l90Dn-eEczDTaJY7qA1CzvVjyLct4pDQPsiXET8M9TmnRXcu4NWwpdunpbVhAd5Cvcm0a5a48NqZ3S9bSUEeMEp4y5pUzHm7Pc2RgUHPJlMkxfua-0Lrg6WeR6z_3bSxAhfnsjSbZ3gO57dbtz1hAGT4i3-kiYJTjEAbt0IMpmERqeLE8_PdBCHHSRCnaGwKN6lPeYy8tmu8soX3EbW97PJqcdfCDRtougFlJYba8v1hAXxWhnzQdjMs8bazqtXbNRdKlg8YmNGyJmUMo7qgwSvG_pqj-5H5iFAwros4QTrUD3s-a2k-oYJE-97tXnM5pwFhAuOHso4KFleLlcGVhHZNV4eVE-KVTcFchmuHW9yR_aGHfc6WBTQiiWxGzuz9-vyxDYMuWVHRZG5_wc_UUItLcMVhA1BPJ9Qdu2IVpZQzoV0180GoF3fAwn5NKjqr4Eh6AON-EqKwSMvMjjkCPmxsb0ElY76XN35iom69ecPDchhe5t1hAFJ7_Rfg0eeGuiZYKcJHGOfMwh7SSboSzKncVFAGG75w2Z5BmriTQw-npN4T0CXphkxYOFssPDsqz7LG1oQ4sylhA1H30Hq4v3Z9AV-Hxy9GT16pgNfCiC3loU3ubsg1blW-zt0MpjI4lRWzXjIaT-pPgK-4rDeEJp930QLwmiAyKxFhAEhZek-2HyTnR71zs1uZUbg7jI8sedVcCrrEXeXlRtb87qSOaxamg_LU52SWE_Ndf7nwliT2ThotUVPvePuxfw1hAPwUrB_tNcXjRHk11Fnp1Mi3Mvitx1DNO6yLW-UK0dzSN38FAYXkYbOmtkujVxlOR-1LC4clXxRbXh56QaF1MWFhAOLjSU2tK9TUKjbvVJOIo_e8hPqf2yoGlSHK_jvUNeXjoGRSPNzZEMhz9lgkKzqnpcWdOn_H1haJWWr7yu_7CBVhA5C8MugN9HObShsGSqR_-X0L2Gvere7gAXyI-GO6QarlVdjaL7OlO4EMXViVYY3qw28Z9R5n0d1isB_p0OzQzuFhAuqQVI-Dhq_9rJHM8FHGmxkpX0uV64LEZSuoN4w_EQ7-dikJ4jmshY4TFOc1jefqHshACFSUEqj-sfPmO78BMZFhALbaS-IjBsx0jDdpjncsRtOqmecQgr1NXz67vjKl3EFllARWhy1EfAfyK41g3z6P_eceZdA6l6ql5kwQ4WSHgC1hAneCfOiUKealn6-TpYDx0cK-_yNZGoNyUHU-eXdVgf541dxa4i0BA3vQUkuslQCtq_1UqsBRe6ZTcdaXYgxvL3lhAS5h5oLXNgi3ISEuEq9IJfpEagrQNSCPnPyg8Qbz83omtFgQW3Vaz_9VQmqce-CrUAqS6umg4x0Bks7A-FwOlyFhApLSI5IxPHrIZA5HbjgniTsCYsSWcDDZbTdnBDeTe9S7Fy7hm6nMrdjrE70UuA4R1MmmqhRrV_DLq6M5rSCb_r1hA8YjjXj5VopX4iKqs1FuMvsMYNglsMohKFz2kFTA_vmuP4yxwM-9O6_T-HxzOy_tL65Fjh09ZS5vp5DjcLqBbDlhAs5oyp7UENIIHrX5JK4mTg42gs5RZOdiL8ZlLsM8ypewxBFxsZrdP5gL5WmXv0Uf8kxi3MOBxndTjYUr96DgAv1hAWbWIYmbpC2-zx98wi4-uKi2OLscm8Jt-RUmoJf50T_tuB3rqmSMAo2MMPCqjY4Ymtyk7Z3hesbiCnA-_NA-BcFhA30QOvUKVJ06yRyI0KBv5uRCUVQ9ZRsyZLxSdOGKzBau9OwzbtkmDCDPdyoiEP0nhL3Sms7UeK61ytmfU4Toy7lhAjdmR8O6vPYgJI4VQbALdzsQiMLoEeoaBhLLFSBIApabtJz3ATy1ut_KZPhWvMJ7xtf99v9bmFIDa0qjVfoU9MFhAXzLH1MIrl11xE6_w1lBMUsbZ2xkhVlLThi9za_wZG3On3068HNDxeZfTRUD4DQdya-7nh0SrRZxf8iDJ7RrUO1hAF4bXtTGsK5XSz-FEXmw534vd3POshtr0eDy2FnT3RHaZcyQ2kwJXWrX7GBwowwgfC3aLPUFdt9_lkFo0UCaNlVhARe78rzI3ng4EXH2Ryk4EAqbvZiOTPUyPIovFYHQWvlLHUfSSijn7aT11SMwKZJBQpfzlH69xF4bXl1sa5Hj041hAt9iQsuMXbFL5fnmqHWjrzBO6GlndQFMn1WJZuYoSM-KxMar2zLdwPm3EWdOs8Ni-xa8AUKqWYOJsRyVoUJZ9hbAAWCDtpqPZXfWaBxkt1pdXUtHcZ5xqNhtbOTAE4KdscDO9pgFYIF0VlyOPCLWSwtdqkX_x-BJd_9LUMyLZtn7WNiavFAbPAlggH0YM4YyoHbz9VfZnZ6eNcfuNo3LHGxcN_vW5u2n_O7oDWCC78e0rAM5iyd8CLYdcj3D2dWI6U-MR8epKIjV35Pro5wRYIJn4e_nVai0rht4K-FnFP5FHkb-ICDylpXYS9QbuT8baBVgg0zJfMxMLyPLuiWS3vFFWwZCfMAUeaGV1O3C_JW_4HfwGWCDKUQYcOX5gP5s3RanfKNZ-1EZUgghXId_pbK0grfJmCgdYIPWGmHtapDPAOKXefytJry4Q5abIoInFMqwr6CTii1anCFgg-1rPwKroj07lQL50nBIvCZlYrWWJcDyV1KWCdLyah_IJWCAgyU2rkbKZ36SlI6Ma_QMP90J4R1mOy4lF7xBHeNT6JwpYIDMQuAyhN3w3CQHLm52hfc0pzBPGwOhGJ_yk6b5-PNZxC1ggkV6dIlcsswFdog6o4JIeg1ZcJRk6DaG0btj-2242KVkMWCBGyXmX2AIDjFfluOGcg6TzQCpzNGckqnt9QdLXo3-k-g1YIO6DVWLHxeovU_uf8sAK2qVntGVEDlo6kLZKqOISAfF2Dlgg-vUNXmtS3kCAhFL1UQYdi7MQ4utTKi2B71EBjmIRTuwPWCBvXPmu7UK-_ymgSPHnB_Dk6VIhGoq-0R-7GDtqueRWlIMYIhgjGCU"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:111:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:b1a3dc1d-625c-41ae-b53d-77afaf9a5f38",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithFullArray);\n        for(const credential of disclosedCredentialsWithFullArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:7e4e4a50-0f24-46e7-a6d1-f7b2bcea8eb4",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37861,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 591,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:d4af40f8-bd98-400f-907c-a48f232bd2be",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"ExampleAchievementCredential\":\"urn:example:ExampleAchievementCredential\",\"WindsailingAchievement\":{\"@id\":\"urn:example:WindsailingAchievement\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"sailNumber\":\"urn:example:sailNumber\",\"sails\":{\"@id\":\"urn:example:sails\",\"@context\":{\"@protected\":true,\"sailName\":\"urn:example:sailName\",\"size\":\"urn:example:size\",\"year\":\"urn:example:year\"}},\"boards\":{\"@id\":\"urn:example:boards\",\"@context\":{\"@protected\":true,\"boardName\":\"urn:example:boardName\",\"brand\":\"urn:example:brand\",\"year\":\"urn:example:year\"}}}},\"achievements\":{\"@id\":\"urn:example:achievements\",\"@type\":\"@id\"}}],\"type\":[\"VerifiableCredential\",\"ExampleAchievementCredential\"],\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"credentialSubject\":{\"achievements\":[{\"type\":\"WindsailingAchievement\",\"sails\":[{\"size\":6.1,\"sailName\":\"Eagle-FR\",\"year\":2023},{\"size\":7,\"sailName\":\"Eagle-FR\",\"year\":2020},{\"size\":7.8,\"sailName\":\"Eagle-FR\",\"year\":2023}],\"boards\":[{\"boardName\":\"CompFoil170\",\"brand\":\"Tillo\",\"year\":2022},{\"boardName\":\"Tillo Custom\",\"brand\":\"Tillo\",\"year\":2019}]},{\"type\":\"WindsailingAchievement\",\"sailNumber\":\"Mars101\",\"sails\":[{\"size\":5.9,\"sailName\":\"Chicken\",\"year\":2022},{\"size\":4.9,\"sailName\":\"Vulture-FR\",\"year\":2023}]}]},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-09T05:06:03Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"u2V0BhVhAdT_LBIS2PKZcusAlz1kAMFBXIClNiqI2IDUW7SiVWKwWRcNNFNlCg1C3_t1iKnGn9Y-R8THsqw2kKohtfMkOlFgjgCQD1a-O41tuceEdyJsip_uV2nEbBklQ5l8kVfhvCEgAHPSYIlhA9N0PVsTTOSNPDVR2utSUDRggCq78wuvd2-so2nzUDDwsUCLxqCROPCGWDbt5EQHHbZiZgiNwiX28v1EUpdk2H1hAE1Txcv_fLUetkRWH4nvMGPBvVfBIXwax632IEzF4FuCUwmzx_psUCyNLQKl6gAQUnKlfidAV5qc-7tOi62ZYB1hAyz-y-JJjENfjezcZsbKUJSo4hOtnIj3aTkPO8FenOsPNPlZ1clEdVVdZR3fkajj0ksDT5MU9Nw678uLKQ7henVhA4anvhWcrt4OJJYqJH7UAgjQt8iyJu9PXxiKvI6FljtL6XdjIToaBIBO3JBqZU595p7czcoUAIV_T7EPUf2IHIVhAWnJzDCqMctbcsd1_Z9uOxBMBhUu1_dq_LGbIk6geSoWoMGE08yo9ZVC__S1bGuzBTQWHbB32gnMhLCm-PLjrv1hAFOMSowCzkeuQerSYQv_ksr8x5i9GU20VOAG5VtuG6c_Yo0zFwEEzr_fWMgSlDFpcUHqKo0zPg1MaMuF4CXIQCVhAHnO3e077QAcC-RfXo4VeKow8HsP8adSVS7u269zfN8WueztoXWH922UDpkXOHdj5tqZ47TyqnYpxUbMFg1yT6FhAL2904utpA8Ef3O98hNQfKtfCnJkwadYck-dPfYEGZPeWznsHuCoQF8RoRx46JZ-Kdw970ylWFXqwTUqkefrlfVhAYwpBH7D4niDPvIvmuWVz3IEOsY17U34Pf7BWSpGSmfqErUD2_3PT42tiPBl9hDG9m9OpPLWIQp3qb8XfJtS6tlhAkgGTqfUjq7mo-wYANgxXskZXFW44Z2eHGKrdHNXjAVU41MhymnKqb9tcHHYZNRNsczfPKuPRrR4iy5fXOtFLZlhAtFewK30cDGy9T5GNbzPsYVab0iPIJm2BGzYqdZlwcvOqplLn81jiu2VXYaedZEqVvsUEH9gWNKJwvyAH7bmErlhAudfvOGebkNhC2n77sanjGet7b1o7wqsA1qQQhFSqFeQbAd7-YQmAH1eoMqVNSxSpNY622UncO5zzhfRkOy6jM1hAzH-FPDMmEbvUvO1lUe2Ntg_7M3e4dFCeoU7RAS3JX-CAN8ZFksjCGqcmBATKF_SNhFyZGWWUXiIBptOOCOYCj1hAvrrWcnxfl97ke-iVtqBic_h0neLVjjTLKLlLelWTyWqKmzD99B3bhZiDEbnlGuMletN1-FtRrtDvWjxEBk4wZVhAUnrMi9wHn8FwIvLN79qNLoSYb8BgfLKpqT_iedcVaSFdiArfTjGccLkQtix_GH2Uod3zbxWz2LMBaSsUjoXxt1hAAtNj9rtwcSrH5EM3K24lgv67B65mjKVgDmP9qnawFXyyIk8LfD8O_Tx-_xOWLs38VmKW5-o8nNCAMb1x060nO1hAlwb1NYl6so97laXTrKWbjuqvX9VPeRlU2OADtl8MxfeFTrOzgu0ckBfTw62dFDzfze9O8iXHQ5cD6gUKh4iX3lhAQtvXcq5yUHAtrmzVFzduFo5JOf0hq0aPKWd0A3O7HOGR5HH9zu6x8cr2Kmi5lEsXWjc6bIvJ8LeGE2vIKQRV_FhALHkZ3CYaNmtfjR5YT21blsGK2ROnpqS_LPaoh4TqjpHvSvOjQB-C8Wr5jHJYWrbkEkH0eDYocLUiuY6V-n9x-FhAssxIPxf1Wn22fLF7NtHpzFNy46Y4FMj16tmm3X8FqrJX3eZE-PECE6JPuXdMN3oPeYvQ7eCbCi8wPsxA_26GF1hAH4Ax1bo1cW4JYK4fa23oGz2nNWQ4Edi36qyeDPda38OTCLueCO_WB3iQVQ1zb_nBUSiCoyJ7CG_ycK7uUklobVhAgPVnvfmNcM-ayJm9Hh0IT4jtKVOOuQAjqsJBdvOvnJomU9uahQXWZPRgQbaZNYbsj9g1RqX72VZVG4K_TGYIt1hAI-YmyXnvFSZpkGlx-j8TTJMCAsxuKXoLKjXM-9pLIeCVOhbIFwX-zpJiLveasWyJU8zFSTCnGctNdWjAd0nkoFhAbCoAk_oJu-H0SMNoCvAOadm82dBtqqSP1gBiAOuS_3Drka0AtilljmND1mgbtmjSjeywS4JrgIgVPIJTLjPN11hAuyULmrtYNYZ-K1_9EMrmHauARkQSgvhkBS1pmdHyU_Kp3oDRxnK_S6eEhBtAKmWAvBcsfSvgONeLQhiBrYgbKVhAW-olbLD_m21mxBObV_B3jQAmg9ULeZVz11l7X_TfPtedkCnEwpzHS-WMi3czOuNc2CnnxKjs7FFKJSHBZHF6xlhAHVF0pZEOcLNEKx2Ci-N_iC2rQ9JRnb7RyNJeGWM89hcR-pDlf-vMAboAcrDwDpxJieAxLSzKG4DT8GzdjlR9PlhAYiYAz7vvRHFHtakrhNsOzqbOkM3QSO7N3UodEI2cAGNXuBbgbchRvC5heisyRPdcCyGvnw4uukX0JGTl5FaNp1hAykOGi2T3sRL4UWEVN5zB6z205ePPSmfEb-Hvt0dZ1TSuF8IqLYgB2vKg3BTJp5pKgO-0sUQn_Ke86ShQul0Z3VhADdxf5NW5fq1qRsOV5dFEARoSmY4BzHUZoZtOSX-gUEUxnxj0hFfjor4GxqO3C0eq4_PRHjKAIr8TPQvmlhikSFhAYhb9JdusvAraskONeH3k6J4iThLAx7Gnd3kUWcFHYPQFRhe6PFUEZtTAtal6rWbkfu8jnKWi0ao795vaWjb-21hAXIBmiSkI0oVKbDQeW4srAU_BzxG6V9K9ElJtAkPeJBK2czlBdUCmI16NgPwLVb-ByjCULAx6_QK-fDSUWVkGoFhAYMGb2_zMnTX7n72BTW0IuMoPfUlgsc7qcA3ldq8l4NMKTcYYEo7R2CdY0e2XGUx4pCf7KTeEOmv7U3an6pv2VVhAdRvcgjjSL8QJHELVMnTpev8T3y_eyewTjGi8gJRtJ2DV3HuGW9VOorHKNCj-oovZFfx_K4eNDUBK7zr7geCKlqsAWCAM3zKHKBEXHCviMbMwKtLMdC5pQBjun49T2T_Av9X_FAFYIBgGs3h8sYDwfs2a7yoL754o88KDSEGMImLHBJH4_5BOAlggsuUf4j9s0svHdM1XY5PiewnREbiXpr5GhVMPgh5PkVsDWCBGFbJEcnH46mGntQma8mfiPm50Nm0WhghAihZPlvMpFARYILeyf9-YTGknobYuD5uxiOMX1LIMC-Q27u1C08Sv63YaBVggAUYX7P2H_YZkcRAUwe8Uiubc1QiKggTOqcSV0cIlbZEGWCDUwdyTaKn3OOEBoyTiObPBAADELAuvGFwXCgNYMeMRfgdYIFwMzSLF4wimFzPyv0x7ZygBI6hkYors4UyclnwNPQvwCFggVWZeUnPkLi2QUZj9H-yKiH5kRbqaVrGDvIws_mpXzzUJWCA2ow6fHO9UZjCuUgAShgZ1ejBifuRgRmeXzcxvar6hYQpYIBysvogfn5BMiDN6y-egVcNyaX7uBYeM2aPgyG2iG2UDgwUGCA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "ExampleAchievementCredential": "urn:example:ExampleAchievementCredential",
                            "WindsailingAchievement": {
                              "@id": "urn:example:WindsailingAchievement",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "sailNumber": "urn:example:sailNumber",
                                "sails": {
                                  "@id": "urn:example:sails",
                                  "@context": {
                                    "@protected": true,
                                    "sailName": "urn:example:sailName",
                                    "size": "urn:example:size",
                                    "year": "urn:example:year"
                                  }
                                },
                                "boards": {
                                  "@id": "urn:example:boards",
                                  "@context": {
                                    "@protected": true,
                                    "boardName": "urn:example:boardName",
                                    "brand": "urn:example:brand",
                                    "year": "urn:example:year"
                                  }
                                }
                              }
                            },
                            "achievements": {
                              "@id": "urn:example:achievements",
                              "@type": "@id"
                            }
                          }
                        ],
                        "type": [
                          "VerifiableCredential",
                          "ExampleAchievementCredential"
                        ],
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "credentialSubject": {
                          "achievements": [
                            {
                              "type": "WindsailingAchievement",
                              "sails": [
                                {
                                  "size": 6.1,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                },
                                {
                                  "size": 7,
                                  "sailName": "Eagle-FR",
                                  "year": 2020
                                },
                                {
                                  "size": 7.8,
                                  "sailName": "Eagle-FR",
                                  "year": 2023
                                }
                              ],
                              "boards": [
                                {
                                  "boardName": "CompFoil170",
                                  "brand": "Tillo",
                                  "year": 2022
                                },
                                {
                                  "boardName": "Tillo Custom",
                                  "brand": "Tillo",
                                  "year": 2019
                                }
                              ]
                            },
                            {
                              "type": "WindsailingAchievement",
                              "sailNumber": "Mars101",
                              "sails": [
                                {
                                  "size": 5.9,
                                  "sailName": "Chicken",
                                  "year": 2022
                                },
                                {
                                  "size": 4.9,
                                  "sailName": "Vulture-FR",
                                  "year": 2023
                                }
                              ]
                            }
                          ]
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-06-09T05:06:03Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "u2V0BhVhAdT_LBIS2PKZcusAlz1kAMFBXIClNiqI2IDUW7SiVWKwWRcNNFNlCg1C3_t1iKnGn9Y-R8THsqw2kKohtfMkOlFgjgCQD1a-O41tuceEdyJsip_uV2nEbBklQ5l8kVfhvCEgAHPSYIlhA9N0PVsTTOSNPDVR2utSUDRggCq78wuvd2-so2nzUDDwsUCLxqCROPCGWDbt5EQHHbZiZgiNwiX28v1EUpdk2H1hAE1Txcv_fLUetkRWH4nvMGPBvVfBIXwax632IEzF4FuCUwmzx_psUCyNLQKl6gAQUnKlfidAV5qc-7tOi62ZYB1hAyz-y-JJjENfjezcZsbKUJSo4hOtnIj3aTkPO8FenOsPNPlZ1clEdVVdZR3fkajj0ksDT5MU9Nw678uLKQ7henVhA4anvhWcrt4OJJYqJH7UAgjQt8iyJu9PXxiKvI6FljtL6XdjIToaBIBO3JBqZU595p7czcoUAIV_T7EPUf2IHIVhAWnJzDCqMctbcsd1_Z9uOxBMBhUu1_dq_LGbIk6geSoWoMGE08yo9ZVC__S1bGuzBTQWHbB32gnMhLCm-PLjrv1hAFOMSowCzkeuQerSYQv_ksr8x5i9GU20VOAG5VtuG6c_Yo0zFwEEzr_fWMgSlDFpcUHqKo0zPg1MaMuF4CXIQCVhAHnO3e077QAcC-RfXo4VeKow8HsP8adSVS7u269zfN8WueztoXWH922UDpkXOHdj5tqZ47TyqnYpxUbMFg1yT6FhAL2904utpA8Ef3O98hNQfKtfCnJkwadYck-dPfYEGZPeWznsHuCoQF8RoRx46JZ-Kdw970ylWFXqwTUqkefrlfVhAYwpBH7D4niDPvIvmuWVz3IEOsY17U34Pf7BWSpGSmfqErUD2_3PT42tiPBl9hDG9m9OpPLWIQp3qb8XfJtS6tlhAkgGTqfUjq7mo-wYANgxXskZXFW44Z2eHGKrdHNXjAVU41MhymnKqb9tcHHYZNRNsczfPKuPRrR4iy5fXOtFLZlhAtFewK30cDGy9T5GNbzPsYVab0iPIJm2BGzYqdZlwcvOqplLn81jiu2VXYaedZEqVvsUEH9gWNKJwvyAH7bmErlhAudfvOGebkNhC2n77sanjGet7b1o7wqsA1qQQhFSqFeQbAd7-YQmAH1eoMqVNSxSpNY622UncO5zzhfRkOy6jM1hAzH-FPDMmEbvUvO1lUe2Ntg_7M3e4dFCeoU7RAS3JX-CAN8ZFksjCGqcmBATKF_SNhFyZGWWUXiIBptOOCOYCj1hAvrrWcnxfl97ke-iVtqBic_h0neLVjjTLKLlLelWTyWqKmzD99B3bhZiDEbnlGuMletN1-FtRrtDvWjxEBk4wZVhAUnrMi9wHn8FwIvLN79qNLoSYb8BgfLKpqT_iedcVaSFdiArfTjGccLkQtix_GH2Uod3zbxWz2LMBaSsUjoXxt1hAAtNj9rtwcSrH5EM3K24lgv67B65mjKVgDmP9qnawFXyyIk8LfD8O_Tx-_xOWLs38VmKW5-o8nNCAMb1x060nO1hAlwb1NYl6so97laXTrKWbjuqvX9VPeRlU2OADtl8MxfeFTrOzgu0ckBfTw62dFDzfze9O8iXHQ5cD6gUKh4iX3lhAQtvXcq5yUHAtrmzVFzduFo5JOf0hq0aPKWd0A3O7HOGR5HH9zu6x8cr2Kmi5lEsXWjc6bIvJ8LeGE2vIKQRV_FhALHkZ3CYaNmtfjR5YT21blsGK2ROnpqS_LPaoh4TqjpHvSvOjQB-C8Wr5jHJYWrbkEkH0eDYocLUiuY6V-n9x-FhAssxIPxf1Wn22fLF7NtHpzFNy46Y4FMj16tmm3X8FqrJX3eZE-PECE6JPuXdMN3oPeYvQ7eCbCi8wPsxA_26GF1hAH4Ax1bo1cW4JYK4fa23oGz2nNWQ4Edi36qyeDPda38OTCLueCO_WB3iQVQ1zb_nBUSiCoyJ7CG_ycK7uUklobVhAgPVnvfmNcM-ayJm9Hh0IT4jtKVOOuQAjqsJBdvOvnJomU9uahQXWZPRgQbaZNYbsj9g1RqX72VZVG4K_TGYIt1hAI-YmyXnvFSZpkGlx-j8TTJMCAsxuKXoLKjXM-9pLIeCVOhbIFwX-zpJiLveasWyJU8zFSTCnGctNdWjAd0nkoFhAbCoAk_oJu-H0SMNoCvAOadm82dBtqqSP1gBiAOuS_3Drka0AtilljmND1mgbtmjSjeywS4JrgIgVPIJTLjPN11hAuyULmrtYNYZ-K1_9EMrmHauARkQSgvhkBS1pmdHyU_Kp3oDRxnK_S6eEhBtAKmWAvBcsfSvgONeLQhiBrYgbKVhAW-olbLD_m21mxBObV_B3jQAmg9ULeZVz11l7X_TfPtedkCnEwpzHS-WMi3czOuNc2CnnxKjs7FFKJSHBZHF6xlhAHVF0pZEOcLNEKx2Ci-N_iC2rQ9JRnb7RyNJeGWM89hcR-pDlf-vMAboAcrDwDpxJieAxLSzKG4DT8GzdjlR9PlhAYiYAz7vvRHFHtakrhNsOzqbOkM3QSO7N3UodEI2cAGNXuBbgbchRvC5heisyRPdcCyGvnw4uukX0JGTl5FaNp1hAykOGi2T3sRL4UWEVN5zB6z205ePPSmfEb-Hvt0dZ1TSuF8IqLYgB2vKg3BTJp5pKgO-0sUQn_Ke86ShQul0Z3VhADdxf5NW5fq1qRsOV5dFEARoSmY4BzHUZoZtOSX-gUEUxnxj0hFfjor4GxqO3C0eq4_PRHjKAIr8TPQvmlhikSFhAYhb9JdusvAraskONeH3k6J4iThLAx7Gnd3kUWcFHYPQFRhe6PFUEZtTAtal6rWbkfu8jnKWi0ao795vaWjb-21hAXIBmiSkI0oVKbDQeW4srAU_BzxG6V9K9ElJtAkPeJBK2czlBdUCmI16NgPwLVb-ByjCULAx6_QK-fDSUWVkGoFhAYMGb2_zMnTX7n72BTW0IuMoPfUlgsc7qcA3ldq8l4NMKTcYYEo7R2CdY0e2XGUx4pCf7KTeEOmv7U3an6pv2VVhAdRvcgjjSL8QJHELVMnTpev8T3y_eyewTjGi8gJRtJ2DV3HuGW9VOorHKNCj-oovZFfx_K4eNDUBK7zr7geCKlqsAWCAM3zKHKBEXHCviMbMwKtLMdC5pQBjun49T2T_Av9X_FAFYIBgGs3h8sYDwfs2a7yoL754o88KDSEGMImLHBJH4_5BOAlggsuUf4j9s0svHdM1XY5PiewnREbiXpr5GhVMPgh5PkVsDWCBGFbJEcnH46mGntQma8mfiPm50Nm0WhghAihZPlvMpFARYILeyf9-YTGknobYuD5uxiOMX1LIMC-Q27u1C08Sv63YaBVggAUYX7P2H_YZkcRAUwe8Uiubc1QiKggTOqcSV0cIlbZEGWCDUwdyTaKn3OOEBoyTiObPBAADELAuvGFwXCgNYMeMRfgdYIFwMzSLF4wimFzPyv0x7ZygBI6hkYors4UyclnwNPQvwCFggVWZeUnPkLi2QUZj9H-yKiH5kRbqaVrGDvIws_mpXzzUJWCA2ow6fHO9UZjCuUgAShgZ1ejBifuRgRmeXzcxvar6hYQpYIBysvogfn5BMiDN6y-egVcNyaX7uBYeM2aPgyG2iG2UDgwUGCA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:119:11)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:8fa179f2-d5d3-457e-9684-01e926c88e24",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithLessThanFullSubArray);\n        for(const credential of\n          disclosedCredentialsWithLessThanFullSubArray) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:4b95f4a2-ac3e-4c3c-b2e1-636b9092bcb9",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 508,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:71c09a54-45a3-4a72-8ecd-b55121933ba5",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33794,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:067f0058-f03c-4325-bcf2-21f2d9900ab2",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n        assertTestVector(disclosedCredentialsWithoutFirstArrayElement);\n        for(const credential of\n          disclosedCredentialsWithoutFirstArrayElement) {\n          await verificationSuccess({credential, verifier});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:9a014034-202b-4817-abcf-44e06949bd87",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:6eaa5288-251c-452a-9786-a0ae2db425af",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:81f2e0b0-a029-46be-8cf5-86c49eb60044",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36951,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        // intentionally modify proofValue to not start with 'u'\n        signedCredentialCopy.proof.proofValue = 'a';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:e623f9ab-5ea5-465c-88b9-c012258975c4",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39278,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:fb3af08f-48c0-4c4d-b6e7-1ef9753ebc83",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:add4c0b9-311a-4389-88c3-dd90aca45c3b",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37004,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n      assertTestVector(disclosedCredentials);\n      for(const credential of disclosedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        signedCredentialCopy.proof.cryptosuite =\n        'invalid-cryptosuite';\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:060392ad-4911-4449-9695-c26bf5844798",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:17e8e703-698d-471f-a29c-d86e72150c9d",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36114,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:836cd463-a3f7-492b-8a1b-f5ddc0fb702e",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n      assertTestVector(signedCredentials);\n      for(const credential of signedCredentials) {\n        const signedCredentialCopy = klona(credential);\n        await verificationFail({\n          credential: signedCredentialCopy, verifier\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:f7a24a0c-6cb1-44c1-a45f-0bec00e20820",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "BHUa3qOvAJvuklHxmnAHX",
              "ctx": null,
              "_testId": "urn:uuid:80d466eb-22fd-44b9-a39e-4e75619bb554",
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "2JN_TiXaSaJ-spMuvlFnt",
              "ctx": null,
              "_testId": "urn:uuid:c0600a4d-3fea-4cf0-a12d-8df250b6bb58",
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n        assertTestVector(disclosedCredentials);\n        for(const credential of disclosedCredentials) {\n          const signedCredentialCopy = klona(credential);\n          // intentionally modify `credentialSubject` ID\n          signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n          await verificationFail({\n            credential: signedCredentialCopy, verifier\n          });\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "YOUlimsMlXbI76aBGEV3V",
              "ctx": null,
              "_testId": "urn:uuid:016c31d8-d81b-4524-80ba-0798d20a4608",
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 39518,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 154,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 39672,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 207,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 39879,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 296,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 40174,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 566,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 40741,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 192,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 40933,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 175,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41107,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 291,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41399,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 243,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n          const issuedVc = await createInitialVc({\n            issuer: issuerEndpoint,\n            vc: credentials.interop['2.0'].document,\n            mandatoryPointers: credentials.interop['2.0'].mandatoryPointers,\n            vcVersion: '2.0'\n          });\n          const {match: matchingVcHolders} = endpoints.filterByTag({\n            tags: ['vcHolder'],\n            property: 'vcHolders'\n          });\n          // Uses 'Digital Bazaar' as default VC holder to create disclosed\n          // credentials for the tests.\n          const vcHolders = matchingVcHolders.get(holderName).endpoints;\n          const vcHolder = vcHolders[0];\n          ({disclosedCredential} = await createDisclosedVc({\n            selectivePointers: ['/credentialSubject/id'],\n            signedCredential: issuedVc,\n            vcHolder\n          }));\n        }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "gfiSnZOCt5-U-1HtGYtHE",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 41641,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 211,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "eCyQyASWbIWqnLCzKXUUs",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:7cab6f0f-461d-45db-bdbb-e965ed84372f",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:19918f67-c880-4c90-b858-1daea9cfadcb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:eb5cd762-347d-4a68-b544-9392677b370b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "id": "urn:uuid:2b709161-cbfc-48a2-ba1b-93dda7f2576e",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023",
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "proof": {
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:06:10Z",
                          "proofValue": "u2V0BhVhA6DZR3lZstW1ZY9cEfE92rch8QPS9UgaVcduujC_4T2k5PbnCsPuZ3s8ioolpGMbWZfC-duPqdlgYg-u7kxqUHFgjgCQCGSIBDzwNEcfeER6LfJp2Ga6H13dopLzf4x50-s6IkJ2BWEC4dStNjU_B3RZrDvmSj4t0Au8eBlr0su_9MQ42GtzYJjGw0WXMp-MdAkUpC-vi69jtFn-YFsTEdccCm-zf-WYnoIMAAQM"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"id\":\"urn:uuid:2b709161-cbfc-48a2-ba1b-93dda7f2576e\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=ecdsa-sd-2023\",\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"proof\":{\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"ecdsa-sd-2023\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-06-09T05:06:10Z\",\"proofValue\":\"u2V0BhVhA6DZR3lZstW1ZY9cEfE92rch8QPS9UgaVcduujC_4T2k5PbnCsPuZ3s8ioolpGMbWZfC-duPqdlgYg-u7kxqUHFgjgCQCGSIBDzwNEcfeER6LfJp2Ga6H13dopLzf4x50-s6IkJ2BWEC4dStNjU_B3RZrDvmSj4t0Au8eBlr0su_9MQ42GtzYJjGw0WXMp-MdAkUpC-vi69jtFn-YFsTEdccCm-zf-WYnoIMAAQM\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            }
                          ],
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "ecdsa-sd-2023",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-06-09T05:06:10Z",
                          "proofValue": "u2V0BhVhA6DZR3lZstW1ZY9cEfE92rch8QPS9UgaVcduujC_4T2k5PbnCsPuZ3s8ioolpGMbWZfC-duPqdlgYg-u7kxqUHFgjgCQCGSIBDzwNEcfeER6LfJp2Ga6H13dopLzf4x50-s6IkJ2BWEC4dStNjU_B3RZrDvmSj4t0Au8eBlr0su_9MQ42GtzYJjGw0WXMp-MdAkUpC-vi69jtFn-YFsTEdccCm-zf-WYnoIMAAQM"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/multikey/v1",
                          "id": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "type": "Multikey",
                          "controller": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "publicKeyMultibase": "zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:2b709161-cbfc-48a2-ba1b-93dda7f2576e",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:118:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:115:13)"
              }
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"apicatalog.com: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:383b5bd9-76ff-4705-89cc-a47ba0ae3ab1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:7b556dc4-25ec-42bb-ba6b-71e0664a4655",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 211,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:a8327c74-3099-43a3-a37f-fde5618d160b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:3d456b57-dd90-4636-838d-b2c6de818ca3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "Grotto Networking: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:397160ee-bda8-4b9d-8903-3a7afe787b73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:8d6253c9-d831-43e6-80be-6e0d3599d140",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n            this.test.cell = {\n              rowId: issuerDisplayName,\n              columnId: verifierDisplayName\n            };\n            should.exist(\n              disclosedCredential,\n              `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n            );\n            await verificationSuccess({\n              credential: disclosedCredential, verifier: verifierEndpoint\n            });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "gfiSnZOCt5-U-1HtGYtHE",
              "ctx": null,
              "_testId": "urn:uuid:277f47cc-ad06-4121-b53a-b6d1212aad27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42652,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-ecdsa-test-suite",
    "subtitle": "Interoperability test suite for ECDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c/vc-di-ecdsa-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-ecdsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Tyler Minard",
        "url": "https://github.com/tminard",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "Data Integrity ECDSA Cryptosuites Interoperability Report",
  "stats": [
    "Tests passed 409/445 91%",
    "Tests failed 36/445 9%",
    "Failures 36",
    "Tests skipped 0",
    "Total tests 445"
  ]
}